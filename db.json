{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/theme/cloud.png","path":"images/theme/cloud.png","modified":0,"renderable":0},{"_id":"source/images/theme/loading.gif","path":"images/theme/loading.gif","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-dark.jpg","path":"images/theme/welcome-dark.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post.jpg","path":"images/theme/post.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-image.jpg","path":"images/theme/welcome-image.jpg","modified":0,"renderable":0},{"_id":"source/images/theme/welcome-light.jpg","path":"images/theme/welcome-light.jpg","modified":0,"renderable":0},{"_id":"source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":0,"renderable":0},{"_id":"source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/icons/zhaoo-logo.png","path":"images/icons/zhaoo-logo.png","modified":0,"renderable":0},{"_id":"source/images/icons/favicon-128x128.png","path":"images/icons/favicon-128x128.png","modified":0,"renderable":0},{"_id":"source/images/icons/logo.png","path":"images/icons/logo.png","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (1).jpg","path":"images/theme/post-image/post (1).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (10).jpg","path":"images/theme/post-image/post (10).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (11).jpg","path":"images/theme/post-image/post (11).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (14).jpg","path":"images/theme/post-image/post (14).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (12).jpg","path":"images/theme/post-image/post (12).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (13).jpg","path":"images/theme/post-image/post (13).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (15).jpg","path":"images/theme/post-image/post (15).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (16).jpg","path":"images/theme/post-image/post (16).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (17).jpg","path":"images/theme/post-image/post (17).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (18).jpg","path":"images/theme/post-image/post (18).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (19).jpg","path":"images/theme/post-image/post (19).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (20).jpg","path":"images/theme/post-image/post (20).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (21).jpg","path":"images/theme/post-image/post (21).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (2).jpg","path":"images/theme/post-image/post (2).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (4).jpg","path":"images/theme/post-image/post (4).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (3).jpg","path":"images/theme/post-image/post (3).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (22).jpg","path":"images/theme/post-image/post (22).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (5).jpg","path":"images/theme/post-image/post (5).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (6).jpg","path":"images/theme/post-image/post (6).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (7).jpg","path":"images/theme/post-image/post (7).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (9).jpg","path":"images/theme/post-image/post (9).jpg","modified":0,"renderable":0},{"_id":"source/images/theme/post-image/post (8).jpg","path":"images/theme/post-image/post (8).jpg","modified":0,"renderable":0},{"_id":"themes/zhaoo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/color-mode.js","path":"js/color-mode.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","path":"images/icons/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","path":"images/icons/favicon-128x128.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","path":"images/icons/favicon-144x144.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/logo.png","path":"images/icons/logo.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","path":"images/icons/zhaoo-logo.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","path":"lib/daovoice/daovoice.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","path":"lib/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/animation.gif","path":"images/theme/animation.gif","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/cloud.png","path":"images/theme/cloud.png","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/loading.gif","path":"images/theme/loading.gif","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","path":"lib/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","path":"lib/gitalk/gitalk.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-dark.jpg","path":"images/theme/welcome-dark.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","path":"lib/jquery/jquery.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","path":"lib/lazyload/lazyload.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-light.jpg","path":"images/theme/welcome-light.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/welcome-image.jpg","path":"images/theme/welcome-image.jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","path":"lib/highlight/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","path":"lib/highlight/highlight.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","path":"lib/lottie/lottie.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","path":"lib/qrcode/qrcode.js","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (1).jpg","path":"images/theme/post-image/post (1).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (10).jpg","path":"images/theme/post-image/post (10).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (11).jpg","path":"images/theme/post-image/post (11).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (12).jpg","path":"images/theme/post-image/post (12).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (14).jpg","path":"images/theme/post-image/post (14).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (16).jpg","path":"images/theme/post-image/post (16).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (13).jpg","path":"images/theme/post-image/post (13).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (15).jpg","path":"images/theme/post-image/post (15).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (17).jpg","path":"images/theme/post-image/post (17).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (18).jpg","path":"images/theme/post-image/post (18).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (19).jpg","path":"images/theme/post-image/post (19).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (2).jpg","path":"images/theme/post-image/post (2).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (20).jpg","path":"images/theme/post-image/post (20).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (21).jpg","path":"images/theme/post-image/post (21).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (5).jpg","path":"images/theme/post-image/post (5).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (4).jpg","path":"images/theme/post-image/post (4).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (22).jpg","path":"images/theme/post-image/post (22).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (3).jpg","path":"images/theme/post-image/post (3).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (6).jpg","path":"images/theme/post-image/post (6).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (7).jpg","path":"images/theme/post-image/post (7).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (9).jpg","path":"images/theme/post-image/post (9).jpg","modified":0,"renderable":1},{"_id":"themes/zhaoo/source/images/theme/post-image/post (8).jpg","path":"images/theme/post-image/post (8).jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/local_images.json","hash":"8cccad00703c5278f9e2339426c7ead0f96ef4bf","modified":1636617548682},{"_id":"source/about/index.md","hash":"a31bb55c05a4350c5a7b70acb4c18ef28bee3cfd","modified":1636619496857},{"_id":"source/_data/galleries.json","hash":"5fb30c01a3892a3f7f628c4d9163403604dfb2d3","modified":1640917446280},{"_id":"source/categories/index.md","hash":"ac97d61802f6121730ef0df581df44f077b39825","modified":1635926416599},{"_id":"source/_posts/CS3手写新拟态vue3组件.md","hash":"a3a24205e733da689dae8d1df6619e10d74f0a90","modified":1636612291830},{"_id":"source/_posts/G6 对比 LogicFlow.md","hash":"3bf1c8420fad55382c30846027a1006070b8358d","modified":1636619717784},{"_id":"source/galleries/index.md","hash":"4479c6bc90e3a1d7b829f2f5df72984d26fe3fb3","modified":1636014655874},{"_id":"source/_posts/LogicFlow初上手.md","hash":"06df940ab66a5ea9f4d3a7c5473e60fb189352d0","modified":1636612777816},{"_id":"source/_posts/hello-world.md","hash":"44f9a577fad45d595efc884c9fc480b1bfb0bda0","modified":1636613324294},{"_id":"source/tags/index.md","hash":"ac6092f4765a6475992060e38742909f22799e4a","modified":1635926416606},{"_id":"source/galleries/colorful/index.md","hash":"1d62f01d2b06bdd51cbac17bb69b031a7205317b","modified":1635926416602},{"_id":"source/_posts/vue3 + G6 采坑笔记.md","hash":"b7a5e3f1354eef3dfd9c89e7f291ae49da70c56b","modified":1636612923304},{"_id":"source/_posts/vue3 + G6 采坑笔记 2.md","hash":"71f511a55613504b5f8845c8b804d1095297bfa2","modified":1636613020957},{"_id":"source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1635926416735},{"_id":"source/images/icons/favicon-16x16.png","hash":"0fae0f381039524c8bd8ec4e651599e155a7df65","modified":1636014040301},{"_id":"source/images/icons/apple-touch-icon.png","hash":"d58925a0fc8bdbeeb680b9b66c066d916dda5e6a","modified":1636014271794},{"_id":"source/images/icons/favicon-144x144.png","hash":"bddfa78e5b837af1d5455c7930d00a2955d60c82","modified":1636014143914},{"_id":"source/galleries/深圳日记/index.md","hash":"0cac4cff71e988970dce718b5c78e023f066dd52","modified":1635926416604},{"_id":"source/images/icons/favicon-32x32.png","hash":"368563d095779b40ded6fe571e9f9bbf38913e18","modified":1636014084263},{"_id":"source/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1635926416731},{"_id":"source/galleries/记事/index.md","hash":"a05ad767d8c9df2909a37f6dc35b71c431304721","modified":1635926416605},{"_id":"source/images/icons/logo.png","hash":"3e47a7708ee452bc0a6cc1de85e5a5bd5b62a319","modified":1636014204921},{"_id":"source/images/icons/favicon-128x128.png","hash":"0e837c7e03475343eb501ef3dfb64ff5d61439bf","modified":1636014111550},{"_id":"themes/zhaoo/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1635926416585},{"_id":"themes/zhaoo/_config.yml","hash":"e4f78fc083b0e6e6a9bddc19c152fb80543e066e","modified":1636960636197},{"_id":"themes/zhaoo/package.json","hash":"5a9f86bc835db5c98d651252866711f8cbd8e3c1","modified":1635928588036},{"_id":"themes/zhaoo/layout/archive.ejs","hash":"590b744d722437cfb0b077108a6af58ec18becd2","modified":1635926416645},{"_id":"themes/zhaoo/LICENSE","hash":"212211b73f97708e0e243f95eb5adbcdaa1e685d","modified":1635926416586},{"_id":"themes/zhaoo/README.md","hash":"80d8af3a0c9f58bf0670e4640fcf38c57913386b","modified":1635926416586},{"_id":"themes/zhaoo/layout/category.ejs","hash":"87000e62516e7750ab4f6d878e8231ef78dc4850","modified":1635926416647},{"_id":"themes/zhaoo/layout/gallery.ejs","hash":"14cadaa9e073fb6980ab0f99a65db421b1236939","modified":1635926416649},{"_id":"themes/zhaoo/layout/categories.ejs","hash":"89f358aa57ce6779c765fce13b42bc5851be8678","modified":1635926416646},{"_id":"themes/zhaoo/layout/galleries.ejs","hash":"ee5f1b972ecb1ad799f55c5210b9d7d2c7593573","modified":1635926416648},{"_id":"themes/zhaoo/layout/post.ejs","hash":"92a6e048482fe2b1e86c954ee11b0b2b4c2539f2","modified":1635926416651},{"_id":"themes/zhaoo/layout/index.ejs","hash":"2257045a7b6d593c4171f31152041c6ffd11c7a2","modified":1635926416650},{"_id":"themes/zhaoo/layout/layout.ejs","hash":"dfb36f81a780b516b4a97f6287162bfd0e1d5ae4","modified":1635926416650},{"_id":"themes/zhaoo/layout/pure.ejs","hash":"0c1a5ae68fd69bc8d19f5bb0af1afe3656d1cd5d","modified":1635926416652},{"_id":"themes/zhaoo/layout/tag.ejs","hash":"238c2e2077f01f4fe252ad99db4891a632904cee","modified":1635926416653},{"_id":"themes/zhaoo/layout/tags.ejs","hash":"40efc30cbc712282b560491ea537e443a10efa8e","modified":1635926416654},{"_id":"themes/zhaoo/README_EN.md","hash":"c08825bd0c9afdaa945c4d9c36dcdf8e9134b095","modified":1635926416587},{"_id":"themes/zhaoo/languages/default.yml","hash":"cb49d6c405ac17b25c8822bc0050fabdf03ae535","modified":1635926416607},{"_id":"themes/zhaoo/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1635926416611},{"_id":"themes/zhaoo/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1635926416610},{"_id":"themes/zhaoo/languages/it.yml","hash":"2b5323867169b25e52009696680a12811b226c1e","modified":1635926416609},{"_id":"themes/zhaoo/languages/zh-CN.yml","hash":"a10d783759847b5c2fc460f3e99000588e76d7ea","modified":1635926416613},{"_id":"themes/zhaoo/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1635926416608},{"_id":"themes/zhaoo/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1635926416614},{"_id":"themes/zhaoo/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1635926416612},{"_id":"themes/zhaoo/package-lock.json","hash":"c21053199f27d94e4a781c03a791642080bf3604","modified":1635928588054},{"_id":"themes/zhaoo/scripts/caption.js","hash":"ecd6bcdf43bcf2712dbf66956cb0d900bb381a27","modified":1635926416686},{"_id":"themes/zhaoo/scripts/carrier.js","hash":"f0297ca112ffdfed6147e869e4b37ca5d96f0e1b","modified":1635926416687},{"_id":"themes/zhaoo/scripts/entry.js","hash":"030235848bb787c48bf7078a7c79c9d4fd58722d","modified":1635926416687},{"_id":"themes/zhaoo/scripts/lazyload.js","hash":"2f6f0e3cfd29e676efe8dc76f062d8cef6569820","modified":1635926416688},{"_id":"themes/zhaoo/scripts/post-image.js","hash":"225f3f153d39f413cad75bb43bd3e2d85cc2d4d2","modified":1635926416690},{"_id":"themes/zhaoo/scripts/merge-config.js","hash":"c87ed49ddd95a900b4e105eafbe8b34cb36ab8d0","modified":1635926416689},{"_id":"themes/zhaoo/layout/_partial/head.ejs","hash":"f406d64a7398bce28c6e547e3237b09e83dcad0e","modified":1635926416627},{"_id":"themes/zhaoo/scripts/title.js","hash":"d19f444206ea11aff52b5f55756ba082f63b7e6a","modified":1635926416691},{"_id":"themes/zhaoo/layout/_partial/script.ejs","hash":"a1320304c4b09306644a03202959920a49f17210","modified":1635926416644},{"_id":"themes/zhaoo/source/css/style.styl","hash":"7fa02eac24fa73babaf01ed0a5a17412e9e4ed91","modified":1635926416720},{"_id":"themes/zhaoo/source/js/color-mode.js","hash":"cda2e5d23db3aa3c5dd3f26ce470e7743ba2ed41","modified":1635926416742},{"_id":"themes/zhaoo/source/js/script.js","hash":"1cc702b5e959b97be4d55726f7fc8a4e44710165","modified":1636941169236},{"_id":"themes/zhaoo/source/js/utils.js","hash":"3f698957840955e901613c1717e57d173ed9f6e8","modified":1635926416744},{"_id":"themes/zhaoo/layout/_partial/components/fab.ejs","hash":"429cfcae34204b2a35a8a78b2f1ce7a58fbd9a2d","modified":1635926416620},{"_id":"themes/zhaoo/layout/_partial/components/footer.ejs","hash":"1eaf1655bae68138d21e324a83028b635f24efdf","modified":1635926416621},{"_id":"themes/zhaoo/layout/_partial/components/paginator.ejs","hash":"b9810cd5ad253a4ce2050f571fc0bb8e8b0f2580","modified":1635926416625},{"_id":"themes/zhaoo/layout/_partial/components/header.ejs","hash":"79dc1dd669228f017f853acda4a8e51c6a631db4","modified":1635926416621},{"_id":"themes/zhaoo/layout/_partial/components/menu.ejs","hash":"8bfbdc6c78970b7c6fd946b9932cb0e961178169","modified":1635926416623},{"_id":"themes/zhaoo/layout/_partial/components/navbar.ejs","hash":"67c257328ed5ecc2e8131ca67d71b2b300009254","modified":1635926416624},{"_id":"themes/zhaoo/layout/_partial/components/scrollbar.ejs","hash":"5abc155f13e03bd1203d485a24658d73a27b246a","modified":1635926416626},{"_id":"themes/zhaoo/layout/_partial/index/item.ejs","hash":"20789c334ac19022560ed4e5bdef405714a3bd93","modified":1635926416629},{"_id":"themes/zhaoo/layout/_partial/components/loading.ejs","hash":"1e1d68be27d3120864daf2d7305ac7a62bca1d84","modified":1635926416622},{"_id":"themes/zhaoo/layout/_partial/components/search.ejs","hash":"bc270f445892aaea460b057107d8ba2fc89635ae","modified":1635926416626},{"_id":"themes/zhaoo/layout/_partial/index/post.ejs","hash":"83a715a96a0091aaf15919b7bc4df67b96827144","modified":1635926416630},{"_id":"themes/zhaoo/layout/_partial/comments/changyan.ejs","hash":"3452beb86058943cb711719a7651987807787487","modified":1635926416617},{"_id":"themes/zhaoo/layout/_partial/index/preview.ejs","hash":"a271191f768401206ca8a71b13d8e06e6f773538","modified":1635926416631},{"_id":"themes/zhaoo/layout/_partial/comments/valine.ejs","hash":"5e6287660dfb296cbe63c85713533939e4a2fdde","modified":1635926416618},{"_id":"themes/zhaoo/layout/_partial/comments/gitalk.ejs","hash":"a1845bca3f412dadcad072dfe60eb3911f833559","modified":1635926416617},{"_id":"themes/zhaoo/_example/source/_data/local_images.json","hash":"7cad1121b29282559694909570e4ec40d710ccf9","modified":1635926416592},{"_id":"themes/zhaoo/layout/_partial/post/article.ejs","hash":"d886a30975916d8f1555674f1b2441ed25579bbb","modified":1635926416636},{"_id":"themes/zhaoo/layout/_partial/plugins/daovoice.ejs","hash":"5f549e08701281dcbc215d8fcd727474c81e906b","modified":1635926416633},{"_id":"themes/zhaoo/layout/_partial/plugins/analytics.ejs","hash":"a512bca486f0a1b4dbcc19d50cb02f6e211055df","modified":1635926416632},{"_id":"themes/zhaoo/layout/_partial/post/comments.ejs","hash":"23ee3e0e52d4813d07a3fa1cf23b05195823a7cc","modified":1635926416637},{"_id":"themes/zhaoo/layout/_partial/post/copyright.ejs","hash":"4d2a20ef75c244a34456b40d47bdcdf9cc8abdc9","modified":1635926416638},{"_id":"themes/zhaoo/layout/_partial/plugins/leancloud.ejs","hash":"0f85ed8cf40287db120988993eba6c99447f8f82","modified":1635926416634},{"_id":"themes/zhaoo/layout/_partial/post/donate.ejs","hash":"5c3bc6f4aa594bae63a9c7a21b5e812292c6e63a","modified":1635926416639},{"_id":"themes/zhaoo/layout/_partial/post/head.ejs","hash":"b4d1009b5d007aadc15f50930033ff9c6452179a","modified":1635926416640},{"_id":"themes/zhaoo/_example/source/_data/galleries.json","hash":"b74e764d64c6a0f1fe88e6ff7387e679da3c2efb","modified":1635926416591},{"_id":"themes/zhaoo/layout/_partial/plugins/seo.ejs","hash":"f9522a8b323b97b3c224dbfab590a5fd1812dbcb","modified":1635926416635},{"_id":"themes/zhaoo/layout/_partial/post/nav.ejs","hash":"be8910cac98be268aa96f9f7f6c44aa2145d706f","modified":1635926416641},{"_id":"themes/zhaoo/_example/source/about/index.md","hash":"239dc6fa67a26de7aa9cac61cfc69fe967f94384","modified":1635926416598},{"_id":"themes/zhaoo/layout/_partial/post/tag.ejs","hash":"9a5276ffdccf9c808adeb31407cc7da0de5e62df","modified":1635926416642},{"_id":"themes/zhaoo/layout/_partial/post/toc.ejs","hash":"ab99befc8c22ea8c25dbaae606f0bd59f447637e","modified":1635926416643},{"_id":"themes/zhaoo/_example/source/galleries/index.md","hash":"e762f0065f939e26517997011351e861c1c892a5","modified":1635926416602},{"_id":"themes/zhaoo/_example/source/categories/index.md","hash":"ac97d61802f6121730ef0df581df44f077b39825","modified":1635926416599},{"_id":"themes/zhaoo/source/css/_base/color-mode.styl","hash":"052ce62c9e008968ea5275b55d86a72df93db418","modified":1635926416694},{"_id":"themes/zhaoo/_example/source/tags/index.md","hash":"ac6092f4765a6475992060e38742909f22799e4a","modified":1635926416606},{"_id":"themes/zhaoo/source/css/_base/zui.styl","hash":"407360c471a60b0732004e6bd4b34a21ec83ede0","modified":1635926416696},{"_id":"themes/zhaoo/source/css/_base/reset.styl","hash":"43e356911edcf4097a9023c349fb777a161601b3","modified":1635926416695},{"_id":"themes/zhaoo/source/css/_components/common.styl","hash":"a4e466d3dbf4863b4f243b5e67ae221971bfa989","modified":1635926416697},{"_id":"themes/zhaoo/source/css/_components/fab.styl","hash":"d2e395e03fe5e560a5a0ee6832a9212e621604d4","modified":1635926416698},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo.md","hash":"3c3023a7cee4702f56306c995048314e961cbabb","modified":1635926416596},{"_id":"themes/zhaoo/_example/source/_posts/hexo-theme-zhaoo-doc.md","hash":"e31c483de88963ebc7c4ef5f5e0c9e1c0446aa3b","modified":1635926416595},{"_id":"themes/zhaoo/source/css/_components/header.styl","hash":"c4f486ff965a21546b0e1497aad1ed1c75d5b089","modified":1635926416700},{"_id":"themes/zhaoo/source/css/_components/menu.styl","hash":"739b064df0921d113f269544b6144a425094c3ed","modified":1635926416701},{"_id":"themes/zhaoo/source/css/_components/footer.styl","hash":"ebd937d9bcc9942b3f59fcc330117be9909c3ae3","modified":1635926416699},{"_id":"themes/zhaoo/source/css/_components/navbar.styl","hash":"1b34e70cb0f958d08c7d31dbd5830ae89fb2d0bc","modified":1635926416702},{"_id":"themes/zhaoo/source/css/_components/preview.styl","hash":"3781fb0d8c9bbbee132dad555bacf804e9702960","modified":1635926416703},{"_id":"themes/zhaoo/source/css/_components/paginator.styl","hash":"579c1a6aec3c46b2733b1687161ffbdbaaec6b54","modified":1635926416703},{"_id":"themes/zhaoo/source/css/_components/search.styl","hash":"ac65010dda7d79e002f6702602a7de4b873aec4e","modified":1635926416705},{"_id":"themes/zhaoo/source/css/_components/scrollbar.styl","hash":"98df51db0c99897a4c58bbdcf8954c4cf148a607","modified":1635926416704},{"_id":"themes/zhaoo/source/css/_variables/variables.styl","hash":"967b2034a46e6bba2e9ba60e631917d49d739e5c","modified":1635926416719},{"_id":"themes/zhaoo/source/css/_pages/pages.styl","hash":"f561158053bd9f84e07737494626f141ae3a28b2","modified":1635926416718},{"_id":"themes/zhaoo/source/images/icons/favicon-144x144.png","hash":"bddfa78e5b837af1d5455c7930d00a2955d60c82","modified":1636014143914},{"_id":"themes/zhaoo/source/images/icons/favicon-16x16.png","hash":"0fae0f381039524c8bd8ec4e651599e155a7df65","modified":1636014040301},{"_id":"themes/zhaoo/source/images/icons/favicon-32x32.png","hash":"368563d095779b40ded6fe571e9f9bbf38913e18","modified":1636014084263},{"_id":"themes/zhaoo/source/images/icons/favicon-128x128.png","hash":"0e837c7e03475343eb501ef3dfb64ff5d61439bf","modified":1636014111550},{"_id":"themes/zhaoo/source/images/icons/apple-touch-icon.png","hash":"d58925a0fc8bdbeeb680b9b66c066d916dda5e6a","modified":1636014271794},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1635926416752},{"_id":"themes/zhaoo/source/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1635926416731},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.css","hash":"2300f2218690a06dce07fe7eeb31bcbf014907f7","modified":1635926416757},{"_id":"themes/zhaoo/source/images/icons/logo.png","hash":"3e47a7708ee452bc0a6cc1de85e5a5bd5b62a319","modified":1636014204921},{"_id":"themes/zhaoo/source/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1635926416735},{"_id":"themes/zhaoo/source/lib/gitalk/.DS_Store","hash":"d0c74f5f99535ad14eaec93484abb4ff8dbca277","modified":1635926416755},{"_id":"themes/zhaoo/source/lib/lazyload/lazyload.js","hash":"322b05c0beb539459214aab2d4cec386ccc2c294","modified":1635926416768},{"_id":"themes/zhaoo/source/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1635926416761},{"_id":"themes/zhaoo/source/lib/qrcode/qrcode.js","hash":"749139770957126aa0cd39a89e974f11d1dbba5d","modified":1635926416776},{"_id":"themes/zhaoo/_example/source/galleries/colorful/index.md","hash":"1d62f01d2b06bdd51cbac17bb69b031a7205317b","modified":1635926416602},{"_id":"themes/zhaoo/source/lib/pjax/pjax.js","hash":"a1e9fe6ad32e947451584531db3fcb0924354a96","modified":1635926416774},{"_id":"themes/zhaoo/_example/source/galleries/记事/index.md","hash":"a05ad767d8c9df2909a37f6dc35b71c431304721","modified":1635926416605},{"_id":"themes/zhaoo/source/css/_pages/_category/categories.styl","hash":"ce06edbffa932fe31b39f0aec6b07524fd084159","modified":1635926416708},{"_id":"themes/zhaoo/_example/source/galleries/深圳日记/index.md","hash":"0cac4cff71e988970dce718b5c78e023f066dd52","modified":1635926416604},{"_id":"themes/zhaoo/source/css/_pages/_index/index.styl","hash":"badc3fb0c0b959c3f3770ac1f0ecc1c813e6cad1","modified":1635926416713},{"_id":"themes/zhaoo/source/css/_pages/_archive/archive.styl","hash":"6f50017eb617c2b9eb400eef810405032955d496","modified":1635926416707},{"_id":"themes/zhaoo/source/css/_pages/_gallery/galleries.styl","hash":"f88f839474ec56a411f9c02dde20509f1c70f99f","modified":1635926416710},{"_id":"themes/zhaoo/source/css/_pages/_tag/tags.styl","hash":"09232e1a81af46cba6401cf0817e1d64c2f7cb8e","modified":1635926416717},{"_id":"themes/zhaoo/source/css/_pages/_post/article.styl","hash":"8775ee373a550cd1c079a3b03364e28cc0d359ec","modified":1635926416714},{"_id":"themes/zhaoo/source/lib/highlight/highlight.js","hash":"976504107e1449a98ede49e0b06480a6818ae39e","modified":1635926416763},{"_id":"themes/zhaoo/source/css/_pages/_post/toc.styl","hash":"c57a90d296185225ff21df30f0a4a361072a840b","modified":1635926416715},{"_id":"themes/zhaoo/source/css/_pages/_gallery/gallery.styl","hash":"78da3b485274d665f569d8412932446ce2867a28","modified":1635926416711},{"_id":"source/images/theme/post.jpg","hash":"7fb1947508a411177829cedac8d5922671cac2b0","modified":1636619905008},{"_id":"source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1635926416734},{"_id":"themes/zhaoo/source/lib/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1635926416753},{"_id":"themes/zhaoo/source/lib/jquery/jquery.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1635926416766},{"_id":"themes/zhaoo/source/images/theme/animation.gif","hash":"f029904debe90c06f747e0d1962903a8a8e8f8ed","modified":1636944295163},{"_id":"themes/zhaoo/source/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1635926416734},{"_id":"themes/zhaoo/source/lib/gitalk/gitalk.js","hash":"668a325f964a57aace92f46de8ee709768ccd251","modified":1635926416759},{"_id":"themes/zhaoo/screenshots/menu.png","hash":"0f4220734a52953636a5273d64a03c8b01ec6098","modified":1635926416677},{"_id":"themes/zhaoo/source/lib/lottie/lottie.js","hash":"6d312ec011c8c503442c595d6918f89093a0c2f0","modified":1635926416772},{"_id":"source/images/theme/welcome-image.jpg","hash":"79e9c9e83a6d8a0bb627e645b770dd2628cd546e","modified":1635926416740},{"_id":"themes/zhaoo/source/images/theme/welcome-image.jpg","hash":"79e9c9e83a6d8a0bb627e645b770dd2628cd546e","modified":1635926416740},{"_id":"themes/zhaoo/screenshots/galleries.png","hash":"8ba5a26c7932d5ef456cc799bbc00c5f468e54cc","modified":1635926416666},{"_id":"themes/zhaoo/source/images/theme/post-image/post (16).jpg","hash":"83c43c05fd6e7d5fc8eae65dc9cd94d8ba0c819d","modified":1636616745569},{"_id":"source/images/theme/post-image/post (16).jpg","hash":"83c43c05fd6e7d5fc8eae65dc9cd94d8ba0c819d","modified":1636616745569},{"_id":"themes/zhaoo/source/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1636613644012},{"_id":"themes/zhaoo/screenshots/article.png","hash":"74706d28c479a20f77c1bd4454879cabf8784ca6","modified":1635926416661},{"_id":"themes/zhaoo/screenshots/index.png","hash":"a95df16106c813b92f14071bac3d38bc53a1bc00","modified":1635926416674},{"_id":"themes/zhaoo/screenshots/preview.png","hash":"2b4271a275b9ff8318d00ab04504a109ec931fe7","modified":1635926416684},{"_id":"source/images/theme/post-image/post (15).jpg","hash":"25a95afd9d014e5f0b8eb3cd300f2f1bc7e295c2","modified":1636616878484},{"_id":"themes/zhaoo/source/images/theme/post-image/post (15).jpg","hash":"25a95afd9d014e5f0b8eb3cd300f2f1bc7e295c2","modified":1636616878484},{"_id":"themes/zhaoo/source/images/theme/post-image/post (2).jpg","hash":"2df5228ebe8398a7d970cbcdcf58c90a400ca120","modified":1636617095371},{"_id":"source/images/theme/post-image/post (2).jpg","hash":"2df5228ebe8398a7d970cbcdcf58c90a400ca120","modified":1636617095371},{"_id":"source/images/theme/post-image/post (13).jpg","hash":"c4ea48098757fd2aa8ecfa70be1d245139070afe","modified":1636616819714},{"_id":"themes/zhaoo/source/images/theme/post-image/post (13).jpg","hash":"c4ea48098757fd2aa8ecfa70be1d245139070afe","modified":1636616819714},{"_id":"source/images/theme/post-image/post (14).jpg","hash":"10c91118d01d39aaf011b5e7344a7ff19dc1bae8","modified":1636617093757},{"_id":"source/images/theme/post-image/post (5).jpg","hash":"ea15f71cd2feae91591d54461810bed65532b04f","modified":1636617086482},{"_id":"themes/zhaoo/source/images/theme/post-image/post (14).jpg","hash":"10c91118d01d39aaf011b5e7344a7ff19dc1bae8","modified":1636617093757},{"_id":"themes/zhaoo/source/images/theme/post-image/post (5).jpg","hash":"ea15f71cd2feae91591d54461810bed65532b04f","modified":1636617086482},{"_id":"source/images/theme/post-image/post (17).jpg","hash":"f989af40e129914703cd2430ab68f034ea6e9dd2","modified":1636616756406},{"_id":"source/images/theme/post-image/post (9).jpg","hash":"3a094fa1830a652a7b4dc931ffe1961f042230e4","modified":1636617033947},{"_id":"themes/zhaoo/source/images/theme/post-image/post (17).jpg","hash":"f989af40e129914703cd2430ab68f034ea6e9dd2","modified":1636616756406},{"_id":"themes/zhaoo/source/images/theme/post-image/post (9).jpg","hash":"3a094fa1830a652a7b4dc931ffe1961f042230e4","modified":1636617033947},{"_id":"source/images/theme/post-image/post (12).jpg","hash":"2fad2c48545c2983151fea849434779772f321b9","modified":1636616902859},{"_id":"themes/zhaoo/source/images/theme/post-image/post (12).jpg","hash":"2fad2c48545c2983151fea849434779772f321b9","modified":1636616902859},{"_id":"source/images/theme/post-image/post (19).jpg","hash":"de78ad42e04500ccd1383e7b6ffe663ce291e742","modified":1636616778609},{"_id":"themes/zhaoo/source/images/theme/post-image/post (19).jpg","hash":"de78ad42e04500ccd1383e7b6ffe663ce291e742","modified":1636616778609},{"_id":"source/images/theme/post-image/post (20).jpg","hash":"814b0a709184c451467d089abf84d2cd3e393bbe","modified":1636616786698},{"_id":"source/images/theme/welcome-dark.jpg","hash":"f577638ee308599aba05f4b7014812bf03a1588c","modified":1636356752700},{"_id":"themes/zhaoo/source/images/theme/post-image/post (20).jpg","hash":"814b0a709184c451467d089abf84d2cd3e393bbe","modified":1636616786698},{"_id":"themes/zhaoo/source/images/theme/welcome-dark.jpg","hash":"f577638ee308599aba05f4b7014812bf03a1588c","modified":1636356752700},{"_id":"source/images/theme/post-image/post (22).jpg","hash":"c1e0c83471d60ae970c51b59fc1205ba38cdc4c6","modified":1636616742749},{"_id":"themes/zhaoo/source/images/theme/post-image/post (22).jpg","hash":"c1e0c83471d60ae970c51b59fc1205ba38cdc4c6","modified":1636616742749},{"_id":"source/images/theme/post-image/post (3).jpg","hash":"e2e17ee6a3b28fc22b27b9ac576306a0e5b2bd8f","modified":1636616930029},{"_id":"themes/zhaoo/source/images/theme/post-image/post (3).jpg","hash":"e2e17ee6a3b28fc22b27b9ac576306a0e5b2bd8f","modified":1636616930029},{"_id":"themes/zhaoo/source/images/theme/post-image/post (18).jpg","hash":"657be9d93af7fc309b4499c0e604945b004370e3","modified":1636616771177},{"_id":"themes/zhaoo/source/images/theme/post-image/post (6).jpg","hash":"2b9824be3d4697264e55c3af3bb5eb7183dd6788","modified":1636616836475},{"_id":"source/images/theme/post-image/post (18).jpg","hash":"657be9d93af7fc309b4499c0e604945b004370e3","modified":1636616771177},{"_id":"source/images/theme/post-image/post (6).jpg","hash":"2b9824be3d4697264e55c3af3bb5eb7183dd6788","modified":1636616836475},{"_id":"source/images/theme/post-image/post (1).jpg","hash":"432d89b6923d08b6e66f958e1de7f0d32c5f8340","modified":1636617144963},{"_id":"themes/zhaoo/source/images/theme/post-image/post (1).jpg","hash":"432d89b6923d08b6e66f958e1de7f0d32c5f8340","modified":1636617144963},{"_id":"themes/zhaoo/source/images/theme/post-image/post (4).jpg","hash":"19b38ae43a1ad19e8d74cf8e756bc03e81846a37","modified":1636616918358},{"_id":"source/images/theme/post-image/post (4).jpg","hash":"19b38ae43a1ad19e8d74cf8e756bc03e81846a37","modified":1636616918358},{"_id":"themes/zhaoo/source/images/theme/post-image/post (7).jpg","hash":"565929da2582ec1dc0468db6ecb364fca91b2973","modified":1636617057710},{"_id":"source/images/theme/post-image/post (7).jpg","hash":"565929da2582ec1dc0468db6ecb364fca91b2973","modified":1636617057710},{"_id":"source/images/theme/welcome-light.jpg","hash":"05aee950799b6ac0e94d86baebcdeca540ece0c5","modified":1636357171877},{"_id":"source/images/theme/post-image/post (10).jpg","hash":"e3dc1293029edf20a45ac429cd9ac4010694800b","modified":1636616874750},{"_id":"themes/zhaoo/source/images/theme/post-image/post (10).jpg","hash":"e3dc1293029edf20a45ac429cd9ac4010694800b","modified":1636616874750},{"_id":"source/images/theme/post-image/post (11).jpg","hash":"eb3457f42946102fdc54dd6ce68f53724f4392ad","modified":1636617039085},{"_id":"themes/zhaoo/source/images/theme/post-image/post (11).jpg","hash":"eb3457f42946102fdc54dd6ce68f53724f4392ad","modified":1636617039085},{"_id":"themes/zhaoo/source/images/theme/welcome-light.jpg","hash":"05aee950799b6ac0e94d86baebcdeca540ece0c5","modified":1636357171877},{"_id":"themes/zhaoo/source/images/theme/post-image/post (21).jpg","hash":"df239110dd029b7bbb2e62339669eba3f787ac5d","modified":1636616816077},{"_id":"source/images/theme/post-image/post (21).jpg","hash":"df239110dd029b7bbb2e62339669eba3f787ac5d","modified":1636616816077},{"_id":"source/images/theme/post-image/post (8).jpg","hash":"51ca737341aa4419f48fc6486314e6002319145f","modified":1636616859147},{"_id":"themes/zhaoo/source/images/theme/post-image/post (8).jpg","hash":"51ca737341aa4419f48fc6486314e6002319145f","modified":1636616859147},{"_id":"public/search.xml","hash":"ab817ce9f91b5d3e60e36dc591831b8f8b16b08c","modified":1640917565076},{"_id":"public/categories/index.html","hash":"55530ab2585760381093648537f1c7cf78a6824f","modified":1640917176558},{"_id":"public/about/index.html","hash":"0294c77aa6b9cab6dc18cdd83b93e2973c3d7dea","modified":1636944889005},{"_id":"public/tags/index.html","hash":"c84263c15e01cdab583875407914b4666a105af2","modified":1636944889005},{"_id":"public/galleries/colorful/index.html","hash":"52fbca7e609ed02a47816f0192bfa2364ec6113b","modified":1640917454075},{"_id":"public/galleries/index.html","hash":"05eba714f001b416b452042645a5db71bb0c8563","modified":1640917454075},{"_id":"public/galleries/深圳日记/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1640916535306},{"_id":"public/galleries/记事/index.html","hash":"ad82ff97279c68d5df30a6ce7729a29041dc5bb2","modified":1640917454075},{"_id":"public/2021/11/11/vue3 + G6 采坑笔记 2/index.html","hash":"b0d96ca462b430477daa9ee534731b36f5f384e9","modified":1640917565076},{"_id":"public/2021/11/11/G6 对比 LogicFlow/index.html","hash":"8cf0202cf9d9ed22f1db1a7752f19b02a371f3cd","modified":1640917565076},{"_id":"public/2021/11/11/vue3 + G6 采坑笔记/index.html","hash":"48cf08a4f4c3c00f8edc01e69d210984619b4982","modified":1640917565076},{"_id":"public/2021/11/11/CS3手写新拟态vue3组件/index.html","hash":"d3cb1434f681188d8bbd03b6958e6a1805fdea7c","modified":1640917454075},{"_id":"public/archives/index.html","hash":"e75ffd7fefdff801d7521c0bc24f7d2f26b6a8f2","modified":1640917565076},{"_id":"public/2021/11/03/hello-world/index.html","hash":"d26e2d0d3b5f41814bd18741eb98db3bffce42a8","modified":1640917565076},{"_id":"public/2021/11/11/LogicFlow初上手/index.html","hash":"e40af88c9316e52a84c839f157a79989c56a1e8b","modified":1640917565076},{"_id":"public/archives/2021/index.html","hash":"d77f3f0886d59548493117ea53232bf184140592","modified":1640917565076},{"_id":"public/archives/2021/11/index.html","hash":"c356e95b271215bd45abb8f57c8ae711e4e30788","modified":1640917565076},{"_id":"public/categories/可视化/流程图/index.html","hash":"f7a84730c71a2802252f17e1717bd0eef74744fc","modified":1636944889005},{"_id":"public/categories/可视化/index.html","hash":"a34bb7c1bdb6b4976e5982ac3f43022c4d9f16ba","modified":1636944889005},{"_id":"public/index.html","hash":"8f93c93f19934365ba9a6a200803c4bf58d43f14","modified":1640917565076},{"_id":"public/images/theme/loading.gif","hash":"db91090dd60098086993953f88c37a332eea70d7","modified":1636944889005},{"_id":"public/images/icons/favicon-16x16.png","hash":"0fae0f381039524c8bd8ec4e651599e155a7df65","modified":1636944889005},{"_id":"public/images/icons/apple-touch-icon.png","hash":"d58925a0fc8bdbeeb680b9b66c066d916dda5e6a","modified":1636944889005},{"_id":"public/images/icons/favicon-144x144.png","hash":"bddfa78e5b837af1d5455c7930d00a2955d60c82","modified":1636944889005},{"_id":"public/images/icons/favicon-128x128.png","hash":"0e837c7e03475343eb501ef3dfb64ff5d61439bf","modified":1636944889005},{"_id":"public/images/icons/zhaoo-logo.png","hash":"50f9f5de4207847bba6aecc4c21d21d79f0001fb","modified":1636944889005},{"_id":"public/images/icons/favicon-32x32.png","hash":"368563d095779b40ded6fe571e9f9bbf38913e18","modified":1636944889005},{"_id":"public/images/icons/logo.png","hash":"3e47a7708ee452bc0a6cc1de85e5a5bd5b62a319","modified":1636944889005},{"_id":"public/images/theme/cloud.png","hash":"fdf44a91026ad999dca2f0a42213aabebd783c98","modified":1636944889005},{"_id":"public/images/theme/post.jpg","hash":"7fb1947508a411177829cedac8d5922671cac2b0","modified":1636944889005},{"_id":"public/images/theme/animation.gif","hash":"f029904debe90c06f747e0d1962903a8a8e8f8ed","modified":1636944889005},{"_id":"public/css/style.css","hash":"3b63f1c4b3eedd7c3209ffcef68324aff63022a9","modified":1636944889005},{"_id":"public/js/color-mode.js","hash":"33cd307624e32035ea4544c9a6a4676ef9f70beb","modified":1636944889005},{"_id":"public/js/utils.js","hash":"359461693c5a1c8f9fb159c2dfb78051d0b351e1","modified":1636944889005},{"_id":"public/lib/fancybox/fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1636944889005},{"_id":"public/lib/lazyload/lazyload.js","hash":"338318e930487b2791a7bcf53ad4601630cc41e2","modified":1636944889005},{"_id":"public/lib/pjax/pjax.js","hash":"0ced78e5c97127948f5bfbfbb80c4fce5c0f671e","modified":1636944889005},{"_id":"public/lib/highlight/a11y-dark.css","hash":"9f0c935216015dd88251a6c366bdd00abfe65982","modified":1636944889005},{"_id":"public/lib/qrcode/qrcode.js","hash":"f424bd339870510d1160d1c5da5d698aedbb452e","modified":1636944889005},{"_id":"public/js/script.js","hash":"7a701739738d1d781fc4e90be6a15aa51aeb636e","modified":1636944889005},{"_id":"public/lib/gitalk/gitalk.css","hash":"99f6725b386bdb0f52d15b0dd7877eaf1ad4c918","modified":1636944889005},{"_id":"public/lib/highlight/highlight.js","hash":"a52ef27b8a21963326b05ef06f6ee104b8b94e7e","modified":1636944889005},{"_id":"public/images/theme/welcome-image.jpg","hash":"79e9c9e83a6d8a0bb627e645b770dd2628cd546e","modified":1636944889005},{"_id":"public/lib/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1636944889005},{"_id":"public/lib/jquery/jquery.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1636944889005},{"_id":"public/images/theme/post-image/post (16).jpg","hash":"83c43c05fd6e7d5fc8eae65dc9cd94d8ba0c819d","modified":1636944889005},{"_id":"public/lib/gitalk/gitalk.js","hash":"266500948447c95aeea95ef6760f192afc96fd5e","modified":1636944889005},{"_id":"public/images/theme/post-image/post (15).jpg","hash":"25a95afd9d014e5f0b8eb3cd300f2f1bc7e295c2","modified":1636944889005},{"_id":"public/images/theme/post-image/post (2).jpg","hash":"2df5228ebe8398a7d970cbcdcf58c90a400ca120","modified":1636944889005},{"_id":"public/images/theme/post-image/post (13).jpg","hash":"c4ea48098757fd2aa8ecfa70be1d245139070afe","modified":1636944889005},{"_id":"public/lib/lottie/lottie.js","hash":"35a3798d0f059f95c5d790eec56798ac10e07319","modified":1636944889005},{"_id":"public/images/theme/post-image/post (14).jpg","hash":"10c91118d01d39aaf011b5e7344a7ff19dc1bae8","modified":1636944889005},{"_id":"public/images/theme/post-image/post (5).jpg","hash":"ea15f71cd2feae91591d54461810bed65532b04f","modified":1636944889005},{"_id":"public/images/theme/post-image/post (17).jpg","hash":"f989af40e129914703cd2430ab68f034ea6e9dd2","modified":1636944889005},{"_id":"public/images/theme/post-image/post (9).jpg","hash":"3a094fa1830a652a7b4dc931ffe1961f042230e4","modified":1636944889005},{"_id":"public/images/theme/post-image/post (12).jpg","hash":"2fad2c48545c2983151fea849434779772f321b9","modified":1636944889005},{"_id":"public/images/theme/post-image/post (19).jpg","hash":"de78ad42e04500ccd1383e7b6ffe663ce291e742","modified":1636944889005},{"_id":"public/images/theme/post-image/post (20).jpg","hash":"814b0a709184c451467d089abf84d2cd3e393bbe","modified":1636944889005},{"_id":"public/images/theme/welcome-dark.jpg","hash":"f577638ee308599aba05f4b7014812bf03a1588c","modified":1636944889005},{"_id":"public/images/theme/post-image/post (22).jpg","hash":"c1e0c83471d60ae970c51b59fc1205ba38cdc4c6","modified":1636944889005},{"_id":"public/images/theme/post-image/post (3).jpg","hash":"e2e17ee6a3b28fc22b27b9ac576306a0e5b2bd8f","modified":1636944889005},{"_id":"public/lib/daovoice/daovoice.js","hash":"180375e6fc5a5a71810b5e83109c0ce1533bbc5a","modified":1636944889005},{"_id":"public/images/theme/post-image/post (6).jpg","hash":"2b9824be3d4697264e55c3af3bb5eb7183dd6788","modified":1636944889005},{"_id":"public/images/theme/post-image/post (18).jpg","hash":"657be9d93af7fc309b4499c0e604945b004370e3","modified":1636944889005},{"_id":"public/images/theme/post-image/post (1).jpg","hash":"432d89b6923d08b6e66f958e1de7f0d32c5f8340","modified":1636944889005},{"_id":"public/images/theme/post-image/post (7).jpg","hash":"565929da2582ec1dc0468db6ecb364fca91b2973","modified":1636944889005},{"_id":"public/images/theme/post-image/post (4).jpg","hash":"19b38ae43a1ad19e8d74cf8e756bc03e81846a37","modified":1636944889005},{"_id":"public/images/theme/post-image/post (10).jpg","hash":"e3dc1293029edf20a45ac429cd9ac4010694800b","modified":1636944889005},{"_id":"public/images/theme/welcome-light.jpg","hash":"05aee950799b6ac0e94d86baebcdeca540ece0c5","modified":1636944889005},{"_id":"public/images/theme/post-image/post (11).jpg","hash":"eb3457f42946102fdc54dd6ce68f53724f4392ad","modified":1636944889005},{"_id":"public/images/theme/post-image/post (21).jpg","hash":"df239110dd029b7bbb2e62339669eba3f787ac5d","modified":1636944889005},{"_id":"public/images/theme/post-image/post (8).jpg","hash":"51ca737341aa4419f48fc6486314e6002319145f","modified":1636944889005},{"_id":"source/_posts/Typora快捷键.md","hash":"06c7e90553cec74cdfc796b66f88a5fdc7f4a8f9","modified":1640917220290},{"_id":"source/_posts/Quasar中添加TailwindCSS.md","hash":"4e5fddc33b655525040b7e1192bcde3f1be64818","modified":1640680693207},{"_id":"source/_posts/flex布局.md","hash":"a82c6715f07ad5d492256e1ed0b2d0c3b4518c5d","modified":1637117052771},{"_id":"public/2021/12/28/Quasar中添加TailwindCSS/index.html","hash":"a788591a8688995e198e2a3ce4cb97c1745a0183","modified":1640917565076},{"_id":"public/2021/11/15/Typora快捷键/index.html","hash":"5175b0d2f25223725cd90d720c0e4de1aa301cdd","modified":1640917565076},{"_id":"public/2021/11/17/flex布局/index.html","hash":"11a5314f6feba118836f645464495c0c1f10df71","modified":1640917565076},{"_id":"public/archives/2021/12/index.html","hash":"d0bf43b237f7fc74e7cae8882c31f9015bf469f7","modified":1640917565076},{"_id":"source/_posts/CSS3  transition过渡.md","hash":"0ff71681972e6f5fc5a27f267c9d85c67d0a0262","modified":1640916347450},{"_id":"source/_posts/CSS教程技巧.md","hash":"6f8a84ee93f9f5c947ec2d0c3d49487531990731","modified":1640916280061},{"_id":"source/_posts/CSS3之animation动画.md","hash":"0ef4576370bf0a7f66f96718b58818386254ba2a","modified":1640916370462},{"_id":"source/_posts/「布局技巧」图片未加载前自动撑开元素高度.md","hash":"a813dd18110333051ce633060585f547ecbf9b1e","modified":1640916409201},{"_id":"source/_posts/文字在一行或两行时超出显示省略号.md","hash":"d51f15be4078126e00bffed34080c0c2a1623cb8","modified":1640916147950},{"_id":"source/_posts/根据系统主题自动响应CSS深色模式.md","hash":"d2e7c7a1701871bd9d7b3781bd8ce29ab93bdb7a","modified":1640916097178},{"_id":"source/_posts/水平垂直居中的几种方式-案例.md","hash":"486afbf44152ad9064a53a83d8e21752d92af856","modified":1640916236842},{"_id":"public/2021/12/31/「布局技巧」图片未加载前自动撑开元素高度/index.html","hash":"3d40281b2581da1e02dbd662c6b12406ce7088fc","modified":1640917565076},{"_id":"public/2021/12/31/CSS教程技巧/index.html","hash":"83133cc90899d85cd115efe6797e113aa4bca175","modified":1640917565076},{"_id":"public/2021/12/31/CSS3  transition过渡/index.html","hash":"040ebd5a72c9963b9fd152ca7ee5b53034dd92a7","modified":1640917565076},{"_id":"public/2021/12/31/CSS3之animation动画/index.html","hash":"63c8a830906347de7e56ea40b57607cf4f9354d3","modified":1640917565076},{"_id":"public/2021/12/31/文字在一行或两行时超出显示省略号/index.html","hash":"9208c1c13995c22b5d0bd15ff9e42e8a544a878e","modified":1640917565076},{"_id":"public/2021/12/31/水平垂直居中的几种方式-案例/index.html","hash":"655524db76d9b6b13933c42846220b62a944f4f9","modified":1640917565076},{"_id":"public/2021/12/31/根据系统主题自动响应CSS深色模式/index.html","hash":"e0b6a08db85b875185c432d528635455b6658373","modified":1640917454075},{"_id":"public/archives/page/2/index.html","hash":"a23e6ae3ab95383d7ddbd38c45badb9537832c4f","modified":1640917565076},{"_id":"public/archives/2021/page/2/index.html","hash":"d77f3f0886d59548493117ea53232bf184140592","modified":1640917565076},{"_id":"public/categories/css/index.html","hash":"0ebbbb518c7b8269b39851567f4ada8690b05ca5","modified":1640916535306},{"_id":"public/categories/css/布局/index.html","hash":"25820a3458492846f2aeb87a8c328b0891bbcc6e","modified":1640916535306},{"_id":"public/page/2/index.html","hash":"06dd6a232fd320b448e5bc704a19f1f655374886","modified":1640917565076},{"_id":"source/_posts/ES6（阮一峰）学习总结.md","hash":"eb9b79a67325c63c8360e7bd9c78eb218987e994","modified":1640916695507},{"_id":"source/_posts/数据挖掘课程设计相关笔记.md","hash":"1e568bdbee4a01e42ce2c7af99cd3cbbb67a8487","modified":1640916889623},{"_id":"source/_posts/随笔记.md","hash":"fc4e663334c33e1b08c239a3959393c8446b0609","modified":1640917077899},{"_id":"source/_posts/小程序开发学习笔记.md","hash":"30703adeafbd2614fac12c1cba4d02ad16d5c8bf","modified":1640916846460},{"_id":"public/2021/12/31/随笔记/index.html","hash":"12567dff6864855de3f63165b9cb15e138ed114b","modified":1640917565076},{"_id":"public/2021/12/31/数据挖掘课程设计相关笔记/index.html","hash":"0894353903241add02d087771320ec90a0d4fd4e","modified":1640917565076},{"_id":"public/2021/12/31/小程序开发学习笔记/index.html","hash":"024a7a00a03dc7dea172dbb3dd3db18d428bb7f9","modified":1640917565076},{"_id":"public/archives/2021/12/page/2/index.html","hash":"d0bf43b237f7fc74e7cae8882c31f9015bf469f7","modified":1640917565076},{"_id":"public/categories/技巧/index.html","hash":"d6fad6627a85ab78696031fad30f502204350f92","modified":1640917176558},{"_id":"public/categories/数据挖掘/index.html","hash":"7293661ffd44e7da9e17ceeebfcd20e6691e6ab0","modified":1640917176558},{"_id":"public/categories/随笔/index.html","hash":"9c1cd48209c8ef183912dde5ae38d54d9c212238","modified":1640917176558},{"_id":"public/categories/小程序/index.html","hash":"ebd1c2e2941e68f3a13afaa98e15efd28ecdf6ab","modified":1640917176558},{"_id":"public/page/3/index.html","hash":"eada59d419c108caa6aa5118df935be5c3b18367","modified":1640917565076},{"_id":"source/galleries/济南日记/index.md","hash":"b2bdff5e9326a2a388d1918891e3aab72a1e2e56","modified":1640917352462},{"_id":"public/galleries/济南日记/index.html","hash":"769dea91cc2aa5c9f6cddf760d49e2adbd587eee","modified":1640917454075},{"_id":"source/_posts/CSS3 手写新拟态vue3组件.md","hash":"eed1b229ef7d497aeb46377ba0cf402ce62f1b17","modified":1640917559155},{"_id":"public/2021/11/11/CSS3 手写新拟态vue3组件/index.html","hash":"9f33ec3f5ccc38a3856ccabe2ee28f43b575bb53","modified":1640917565076}],"Category":[{"name":"可视化","_id":"ckw02q18g00061g8id3hkeagt"},{"name":"流程图","parent":"ckw02q18g00061g8id3hkeagt","_id":"ckw02q18l000d1g8i3vr68gcm"},{"name":"css","_id":"ckxtrc6zj0002ow8i3x0o53es"},{"name":"布局","parent":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc701000cow8i9sxvgqlv"},{"name":"技巧","_id":"ckxtrpxr80001mc8ibuot3imb"},{"name":"数据挖掘","_id":"ckxtrpxrg0003mc8if0ima54h"},{"name":"随笔","_id":"ckxtrpxrh0005mc8ihr4q56aa"},{"name":"小程序","_id":"ckxtrpxsm0009mc8id6w35z9h"}],"Data":[{"_id":"galleries","data":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"济南日记","cover":"/images/theme/post.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]}]},{"_id":"local_images","data":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}],"Page":[{"title":"关于","date":"2021-11-11T04:54:27.000Z","image":"/images/theme/post-image.jpg","_content":"\n# **张星宇**\n\n年龄：21岁\n\n地址：山东济南\n\n邮箱：1846730600@qq.com\n\n个人页：[https://zhangxingyu618.github.io](https://zhangxingyu618.github.io/)\n\nGitHub：[https://github.com/zhangxingyu618](https://github.com/zhangxingyu618)\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-11-11 12:54:27\nimage: /images/theme/post-image.jpg\n---\n\n# **张星宇**\n\n年龄：21岁\n\n地址：山东济南\n\n邮箱：1846730600@qq.com\n\n个人页：[https://zhangxingyu618.github.io](https://zhangxingyu618.github.io/)\n\nGitHub：[https://github.com/zhangxingyu618](https://github.com/zhangxingyu618)\n\n","updated":"2021-11-11T08:31:36.857Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckw02q18600001g8i485be5am","content":"<h1 id=\"张星宇\"><a href=\"#张星宇\" class=\"headerlink\" title=\"张星宇\"></a><strong>张星宇</strong></h1><p>年龄：21岁</p>\n<p>地址：山东济南</p>\n<p>邮箱：<a href=\"mailto:&#49;&#x38;&#52;&#54;&#55;&#x33;&#48;&#x36;&#x30;&#48;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;\">&#49;&#x38;&#52;&#54;&#55;&#x33;&#48;&#x36;&#x30;&#48;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p>\n<p>个人页：<a href=\"https://zhangxingyu618.github.io/\">https://zhangxingyu618.github.io</a></p>\n<p>GitHub：<a href=\"https://github.com/zhangxingyu618\">https://github.com/zhangxingyu618</a></p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"张星宇\"><a href=\"#张星宇\" class=\"headerlink\" title=\"张星宇\"></a><strong>张星宇</strong></h1><p>年龄：21岁</p>\n<p>地址：山东济南</p>\n<p>邮箱：<a href=\"mailto:&#49;&#x38;&#52;&#54;&#55;&#x33;&#48;&#x36;&#x30;&#48;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;\">&#49;&#x38;&#52;&#54;&#55;&#x33;&#48;&#x36;&#x30;&#48;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#x6d;</a></p>\n<p>个人页：<a href=\"https://zhangxingyu618.github.io/\">https://zhangxingyu618.github.io</a></p>\n<p>GitHub：<a href=\"https://github.com/zhangxingyu618\">https://github.com/zhangxingyu618</a></p>\n"},{"title":"分类","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-11-03T08:00:16.599Z","updated":"2021-11-03T08:00:16.599Z","path":"categories/index.html","comments":1,"_id":"ckw02q18d00021g8iapz31goh","content":"","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":""},{"title":"摄影","layout":"galleries","_content":"\n<!-- ---\ntitle: galleries\ndate: 2021-11-04 16:29:39\n--- -->\n","source":"galleries/index.md","raw":"---\ntitle: 摄影\nlayout: \"galleries\"\n---\n\n<!-- ---\ntitle: galleries\ndate: 2021-11-04 16:29:39\n--- -->\n","date":"2021-11-04T08:30:55.874Z","updated":"2021-11-04T08:30:55.874Z","path":"galleries/index.html","comments":1,"_id":"ckw02q18f00041g8i2ubea8q7","content":"<!-- ---\ntitle: galleries\ndate: 2021-11-04 16:29:39\n--- -->\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<!-- ---\ntitle: galleries\ndate: 2021-11-04 16:29:39\n--- -->\n"},{"title":"标签","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2021-11-03T08:00:16.606Z","updated":"2021-11-03T08:00:16.606Z","path":"tags/index.html","comments":1,"_id":"ckw02q18h00071g8ihk1sbden","content":"","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":""},{"title":"colorful","layout":"gallery","_content":"","source":"galleries/colorful/index.md","raw":"---\ntitle: colorful\nlayout: \"gallery\"\n---","date":"2021-11-03T08:00:16.602Z","updated":"2021-11-03T08:00:16.602Z","path":"galleries/colorful/index.html","comments":1,"_id":"ckw02q18j00091g8i24qx8tic","content":"","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":""},{"title":"记事","layout":"gallery","_content":"","source":"galleries/记事/index.md","raw":"---\ntitle: 记事\nlayout: \"gallery\"\n---","date":"2021-11-03T08:00:16.605Z","updated":"2021-11-03T08:00:16.605Z","path":"galleries/记事/index.html","comments":1,"_id":"ckw02q18l000c1g8i15hy51os","content":"","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":""},{"title":"济南日记","layout":"gallery","_content":"","source":"galleries/济南日记/index.md","raw":"---\ntitle: 济南日记\nlayout: \"gallery\"\n---\n","date":"2021-12-31T02:22:32.462Z","updated":"2021-12-31T02:22:32.462Z","path":"galleries/济南日记/index.html","comments":1,"_id":"ckxtrvvqx0000z08i44n1cbf7","content":"","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"济南日记","cover":"/images/theme/post.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":""}],"Post":[{"title":"G6 对比 LogicFlow","_content":"\n# G6 对比 LogicFlow\n\n\n\n## G6\n\nG6更像是一种展示型的框架，对图编辑操作并不擅长。\n\n> 但是G6有相应的图编辑框架 **G6-Editor** 是可以交互的流程图编辑框架，我搜集到的资料显示这个框架不是开源的，仅供学习交流不可商用。\n>\n> 它目前在网上搜不到完善的文档以及接口详细配置信息。只有一部分demo可以搜索得到。\n\n## LogicFlow\n\nLogicFlow 相比G6好用很多，开源，并且有完善的文档以及demo，对vue和ts的支持应该也很高。\n\n相关的添加节点、删除节点、改名、以及对画布的调整，甚至拖拽都有相关api，几乎要用到的功能都有相应的api，使用比较简单。可以比较少的代码开发一个简单的可拖拽的流程图。\n","source":"_posts/G6 对比 LogicFlow.md","raw":"---\ntitle: G6 对比 LogicFlow\ncategories:  #设置分类\n- 可视化\n- 流程图\n---\n\n# G6 对比 LogicFlow\n\n\n\n## G6\n\nG6更像是一种展示型的框架，对图编辑操作并不擅长。\n\n> 但是G6有相应的图编辑框架 **G6-Editor** 是可以交互的流程图编辑框架，我搜集到的资料显示这个框架不是开源的，仅供学习交流不可商用。\n>\n> 它目前在网上搜不到完善的文档以及接口详细配置信息。只有一部分demo可以搜索得到。\n\n## LogicFlow\n\nLogicFlow 相比G6好用很多，开源，并且有完善的文档以及demo，对vue和ts的支持应该也很高。\n\n相关的添加节点、删除节点、改名、以及对画布的调整，甚至拖拽都有相关api，几乎要用到的功能都有相应的api，使用比较简单。可以比较少的代码开发一个简单的可拖拽的流程图。\n","slug":"G6 对比 LogicFlow","published":1,"date":"2021-11-11T06:43:48.921Z","updated":"2021-11-11T08:35:17.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw02q18e00031g8i4a489zb6","content":"<h1 id=\"G6-对比-LogicFlow\"><a href=\"#G6-对比-LogicFlow\" class=\"headerlink\" title=\"G6 对比 LogicFlow\"></a>G6 对比 LogicFlow</h1><h2 id=\"G6\"><a href=\"#G6\" class=\"headerlink\" title=\"G6\"></a>G6</h2><p>G6更像是一种展示型的框架，对图编辑操作并不擅长。</p>\n<blockquote>\n<p>但是G6有相应的图编辑框架 <strong>G6-Editor</strong> 是可以交互的流程图编辑框架，我搜集到的资料显示这个框架不是开源的，仅供学习交流不可商用。</p>\n<p>它目前在网上搜不到完善的文档以及接口详细配置信息。只有一部分demo可以搜索得到。</p>\n</blockquote>\n<h2 id=\"LogicFlow\"><a href=\"#LogicFlow\" class=\"headerlink\" title=\"LogicFlow\"></a>LogicFlow</h2><p>LogicFlow 相比G6好用很多，开源，并且有完善的文档以及demo，对vue和ts的支持应该也很高。</p>\n<p>相关的添加节点、删除节点、改名、以及对画布的调整，甚至拖拽都有相关api，几乎要用到的功能都有相应的api，使用比较简单。可以比较少的代码开发一个简单的可拖拽的流程图。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"G6-对比-LogicFlow\"><a href=\"#G6-对比-LogicFlow\" class=\"headerlink\" title=\"G6 对比 LogicFlow\"></a>G6 对比 LogicFlow</h1><h2 id=\"G6\"><a href=\"#G6\" class=\"headerlink\" title=\"G6\"></a>G6</h2><p>G6更像是一种展示型的框架，对图编辑操作并不擅长。</p>\n<blockquote>\n<p>但是G6有相应的图编辑框架 <strong>G6-Editor</strong> 是可以交互的流程图编辑框架，我搜集到的资料显示这个框架不是开源的，仅供学习交流不可商用。</p>\n<p>它目前在网上搜不到完善的文档以及接口详细配置信息。只有一部分demo可以搜索得到。</p>\n</blockquote>\n<h2 id=\"LogicFlow\"><a href=\"#LogicFlow\" class=\"headerlink\" title=\"LogicFlow\"></a>LogicFlow</h2><p>LogicFlow 相比G6好用很多，开源，并且有完善的文档以及demo，对vue和ts的支持应该也很高。</p>\n<p>相关的添加节点、删除节点、改名、以及对画布的调整，甚至拖拽都有相关api，几乎要用到的功能都有相应的api，使用比较简单。可以比较少的代码开发一个简单的可拖拽的流程图。</p>\n"},{"title":"LogicFlow初上手","_content":"\n#  LogicFlow初上手\n\n>因为之前用的G6-edit，转过来之后好用了太多，方便了太多，主要是G6-edit没有完整详细的文档，好像也没开源不能商用。\n\n### logicflow 有非常好的流程图编辑功能\n\n通过 `npm` 或 `yarn` 来安装 `LogicFlow`。\n\n```sh\n# npm\n$ npm install @logicflow/core --save\n\n# yarn\n$ yarn add @logicflow/core\n```\n\n安装完成之后，使用 `import` 或 `require` 进行引用。\n\n```js\nimport LogicFlow from '@logicflow/core';\nimport '@logicflow/core/dist/style/index.css';\n```\n\n### 用法非常简单\n\n1.通过 `JSON` 的数据格式，来让 `LogicFlow` 渲染。该数据中需要有 `nodes`（节点） 和 `edges`（边） 字段，分别用数组表示：\n\n```js\nconst data = {\n  // 节点\n  nodes: [\n    {\n      id: 50,\n      type: 'rect',\n      x: 100,\n      y: 150,\n      text: '你好',\n    },\n    {\n      id: 21,\n      type: 'circle',\n      x: 300,\n      y: 150,\n    },\n  ],\n  // 边\n  edges: [\n    {\n      type: 'polyline',\n      sourceNodeId: 50,\n      targetNodeId: 21,\n    },\n  ],\n};\n```\n\n2.创建一个 `LogicFlow` 的实例，此时可以传入一些参数来控制画布，比如画布的大小。\n\n```js\nconst lf = new LogicFlow({\n  container: document.querySelector('#container'),\n  stopScrollGraph: true,\n  stopZoomGraph: true,\n  width: 500,\n  height: 500,\n  grid: {\n    type: 'dot',\n    size: 20,\n  },\n});\n```\n\n3.通过刚才创建的实例，来渲染画布。\n\n```js\nlf.render(data);\n```\n\n到此，我们就创建好了一个最简单的示例。\n\n![image-20210624165630709](https://i.loli.net/2021/11/11/3dUANH95Rl4P2iO.png)\n\n>logicflow的节点你可以任意拖拽，两个节点之间的连线也可以自由连接，可编辑性非常强大。\n\n### logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\n\n#### 控制面板\n\n```ts\nimport LogicFlow from '@logicflow/core';\nimport { Control } from '@logicflow/extension';\nimport '@logicflow/extension/lib/style/index.css'\n\nLogicFlow.use(Control);\n```\n\n![image-20210624165536045](https://i.loli.net/2021/11/11/srAMShNTxOFvQ3Z.png)\n\n#### 拖拽面板\n\n```ts\nimport LogicFlow from '@logicflow/core';\nimport { DndPanel } from '@logicflow/extension';\nimport '@logicflow/extension/lib/style/index.css'\n\nLogicFlow.use(DndPanel);\n```\n\n![image-20210624165558372](https://i.loli.net/2021/11/11/JiTazKtM5FR2dDm.png)\n\n等等功能都可以调用API快速在实现。包括节点的各种API真的是功能非常强大又非常贴心的框架，简单滴代码开发一个可拖拽的流程图编辑器。\n\n还有他的自定义程度也非常高，如果API自带模板不能满足也可以高度自定义组件以及相关方法。","source":"_posts/LogicFlow初上手.md","raw":"---\ntitle: LogicFlow初上手\n---\n\n#  LogicFlow初上手\n\n>因为之前用的G6-edit，转过来之后好用了太多，方便了太多，主要是G6-edit没有完整详细的文档，好像也没开源不能商用。\n\n### logicflow 有非常好的流程图编辑功能\n\n通过 `npm` 或 `yarn` 来安装 `LogicFlow`。\n\n```sh\n# npm\n$ npm install @logicflow/core --save\n\n# yarn\n$ yarn add @logicflow/core\n```\n\n安装完成之后，使用 `import` 或 `require` 进行引用。\n\n```js\nimport LogicFlow from '@logicflow/core';\nimport '@logicflow/core/dist/style/index.css';\n```\n\n### 用法非常简单\n\n1.通过 `JSON` 的数据格式，来让 `LogicFlow` 渲染。该数据中需要有 `nodes`（节点） 和 `edges`（边） 字段，分别用数组表示：\n\n```js\nconst data = {\n  // 节点\n  nodes: [\n    {\n      id: 50,\n      type: 'rect',\n      x: 100,\n      y: 150,\n      text: '你好',\n    },\n    {\n      id: 21,\n      type: 'circle',\n      x: 300,\n      y: 150,\n    },\n  ],\n  // 边\n  edges: [\n    {\n      type: 'polyline',\n      sourceNodeId: 50,\n      targetNodeId: 21,\n    },\n  ],\n};\n```\n\n2.创建一个 `LogicFlow` 的实例，此时可以传入一些参数来控制画布，比如画布的大小。\n\n```js\nconst lf = new LogicFlow({\n  container: document.querySelector('#container'),\n  stopScrollGraph: true,\n  stopZoomGraph: true,\n  width: 500,\n  height: 500,\n  grid: {\n    type: 'dot',\n    size: 20,\n  },\n});\n```\n\n3.通过刚才创建的实例，来渲染画布。\n\n```js\nlf.render(data);\n```\n\n到此，我们就创建好了一个最简单的示例。\n\n![image-20210624165630709](https://i.loli.net/2021/11/11/3dUANH95Rl4P2iO.png)\n\n>logicflow的节点你可以任意拖拽，两个节点之间的连线也可以自由连接，可编辑性非常强大。\n\n### logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\n\n#### 控制面板\n\n```ts\nimport LogicFlow from '@logicflow/core';\nimport { Control } from '@logicflow/extension';\nimport '@logicflow/extension/lib/style/index.css'\n\nLogicFlow.use(Control);\n```\n\n![image-20210624165536045](https://i.loli.net/2021/11/11/srAMShNTxOFvQ3Z.png)\n\n#### 拖拽面板\n\n```ts\nimport LogicFlow from '@logicflow/core';\nimport { DndPanel } from '@logicflow/extension';\nimport '@logicflow/extension/lib/style/index.css'\n\nLogicFlow.use(DndPanel);\n```\n\n![image-20210624165558372](https://i.loli.net/2021/11/11/JiTazKtM5FR2dDm.png)\n\n等等功能都可以调用API快速在实现。包括节点的各种API真的是功能非常强大又非常贴心的框架，简单滴代码开发一个可拖拽的流程图编辑器。\n\n还有他的自定义程度也非常高，如果API自带模板不能满足也可以高度自定义组件以及相关方法。","slug":"LogicFlow初上手","published":1,"date":"2021-11-11T06:43:48.933Z","updated":"2021-11-11T06:39:37.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw02q18f00051g8ig1ghg02j","content":"<h1 id=\"LogicFlow初上手\"><a href=\"#LogicFlow初上手\" class=\"headerlink\" title=\"LogicFlow初上手\"></a>LogicFlow初上手</h1><blockquote>\n<p>因为之前用的G6-edit，转过来之后好用了太多，方便了太多，主要是G6-edit没有完整详细的文档，好像也没开源不能商用。</p>\n</blockquote>\n<h3 id=\"logicflow-有非常好的流程图编辑功能\"><a href=\"#logicflow-有非常好的流程图编辑功能\" class=\"headerlink\" title=\"logicflow 有非常好的流程图编辑功能\"></a>logicflow 有非常好的流程图编辑功能</h3><p>通过 <code>npm</code> 或 <code>yarn</code> 来安装 <code>LogicFlow</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># npm</span><br>$ npm install @logicflow/core --save<br><br><span class=\"hljs-comment\"># yarn</span><br>$ yarn add @logicflow/core<br></code></pre></td></tr></table></figure>\n\n<p>安装完成之后，使用 <code>import</code> 或 <code>require</code> 进行引用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/core/dist/style/index.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用法非常简单\"><a href=\"#用法非常简单\" class=\"headerlink\" title=\"用法非常简单\"></a>用法非常简单</h3><p>1.通过 <code>JSON</code> 的数据格式，来让 <code>LogicFlow</code> 渲染。该数据中需要有 <code>nodes</code>（节点） 和 <code>edges</code>（边） 字段，分别用数组表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> data = &#123;<br>  <span class=\"hljs-comment\">// 节点</span><br>  <span class=\"hljs-attr\">nodes</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">50</span>,<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;rect&#x27;</span>,<br>      <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">100</span>,<br>      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span>,<br>      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;你好&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">21</span>,<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;circle&#x27;</span>,<br>      <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">300</span>,<br>      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span>,<br>    &#125;,<br>  ],<br>  <span class=\"hljs-comment\">// 边</span><br>  <span class=\"hljs-attr\">edges</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;polyline&#x27;</span>,<br>      <span class=\"hljs-attr\">sourceNodeId</span>: <span class=\"hljs-number\">50</span>,<br>      <span class=\"hljs-attr\">targetNodeId</span>: <span class=\"hljs-number\">21</span>,<br>    &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>2.创建一个 <code>LogicFlow</code> 的实例，此时可以传入一些参数来控制画布，比如画布的大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> lf = <span class=\"hljs-keyword\">new</span> LogicFlow(&#123;<br>  <span class=\"hljs-attr\">container</span>: <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#container&#x27;</span>),<br>  <span class=\"hljs-attr\">stopScrollGraph</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">stopZoomGraph</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">500</span>,<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">500</span>,<br>  <span class=\"hljs-attr\">grid</span>: &#123;<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;dot&#x27;</span>,<br>    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">20</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>3.通过刚才创建的实例，来渲染画布。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">lf.render(data);<br></code></pre></td></tr></table></figure>\n\n<p>到此，我们就创建好了一个最简单的示例。</p>\n<p><img  src=\"https://i.loli.net/2021/11/11/3dUANH95Rl4P2iO.png\"  ><span class=\"image-caption\">image-20210624165630709</span></p>\n<blockquote>\n<p>logicflow的节点你可以任意拖拽，两个节点之间的连线也可以自由连接，可编辑性非常强大。</p>\n</blockquote>\n<h3 id=\"logicflow-的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\"><a href=\"#logicflow-的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\" class=\"headerlink\" title=\"logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\"></a>logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现</h3><h4 id=\"控制面板\"><a href=\"#控制面板\" class=\"headerlink\" title=\"控制面板\"></a>控制面板</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Control &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/extension&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/extension/lib/style/index.css&#x27;</span><br><br>LogicFlow.use(Control);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://i.loli.net/2021/11/11/srAMShNTxOFvQ3Z.png\"  ><span class=\"image-caption\">image-20210624165536045</span></p>\n<h4 id=\"拖拽面板\"><a href=\"#拖拽面板\" class=\"headerlink\" title=\"拖拽面板\"></a>拖拽面板</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; DndPanel &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/extension&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/extension/lib/style/index.css&#x27;</span><br><br>LogicFlow.use(DndPanel);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://i.loli.net/2021/11/11/JiTazKtM5FR2dDm.png\"  ><span class=\"image-caption\">image-20210624165558372</span></p>\n<p>等等功能都可以调用API快速在实现。包括节点的各种API真的是功能非常强大又非常贴心的框架，简单滴代码开发一个可拖拽的流程图编辑器。</p>\n<p>还有他的自定义程度也非常高，如果API自带模板不能满足也可以高度自定义组件以及相关方法。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"LogicFlow初上手\"><a href=\"#LogicFlow初上手\" class=\"headerlink\" title=\"LogicFlow初上手\"></a>LogicFlow初上手</h1><blockquote>\n<p>因为之前用的G6-edit，转过来之后好用了太多，方便了太多，主要是G6-edit没有完整详细的文档，好像也没开源不能商用。</p>\n</blockquote>\n<h3 id=\"logicflow-有非常好的流程图编辑功能\"><a href=\"#logicflow-有非常好的流程图编辑功能\" class=\"headerlink\" title=\"logicflow 有非常好的流程图编辑功能\"></a>logicflow 有非常好的流程图编辑功能</h3><p>通过 <code>npm</code> 或 <code>yarn</code> 来安装 <code>LogicFlow</code>。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># npm</span><br>$ npm install @logicflow/core --save<br><br><span class=\"hljs-comment\"># yarn</span><br>$ yarn add @logicflow/core<br></code></pre></td></tr></table></figure>\n\n<p>安装完成之后，使用 <code>import</code> 或 <code>require</code> 进行引用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/core/dist/style/index.css&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"用法非常简单\"><a href=\"#用法非常简单\" class=\"headerlink\" title=\"用法非常简单\"></a>用法非常简单</h3><p>1.通过 <code>JSON</code> 的数据格式，来让 <code>LogicFlow</code> 渲染。该数据中需要有 <code>nodes</code>（节点） 和 <code>edges</code>（边） 字段，分别用数组表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> data = &#123;<br>  <span class=\"hljs-comment\">// 节点</span><br>  <span class=\"hljs-attr\">nodes</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">50</span>,<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;rect&#x27;</span>,<br>      <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">100</span>,<br>      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span>,<br>      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;你好&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">21</span>,<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;circle&#x27;</span>,<br>      <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">300</span>,<br>      <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">150</span>,<br>    &#125;,<br>  ],<br>  <span class=\"hljs-comment\">// 边</span><br>  <span class=\"hljs-attr\">edges</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;polyline&#x27;</span>,<br>      <span class=\"hljs-attr\">sourceNodeId</span>: <span class=\"hljs-number\">50</span>,<br>      <span class=\"hljs-attr\">targetNodeId</span>: <span class=\"hljs-number\">21</span>,<br>    &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p>2.创建一个 <code>LogicFlow</code> 的实例，此时可以传入一些参数来控制画布，比如画布的大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> lf = <span class=\"hljs-keyword\">new</span> LogicFlow(&#123;<br>  <span class=\"hljs-attr\">container</span>: <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&#x27;#container&#x27;</span>),<br>  <span class=\"hljs-attr\">stopScrollGraph</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">stopZoomGraph</span>: <span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">500</span>,<br>  <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">500</span>,<br>  <span class=\"hljs-attr\">grid</span>: &#123;<br>    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;dot&#x27;</span>,<br>    <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">20</span>,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p>3.通过刚才创建的实例，来渲染画布。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">lf.render(data);<br></code></pre></td></tr></table></figure>\n\n<p>到此，我们就创建好了一个最简单的示例。</p>\n<p><img  src=\"https://i.loli.net/2021/11/11/3dUANH95Rl4P2iO.png\"  ><span class=\"image-caption\">image-20210624165630709</span></p>\n<blockquote>\n<p>logicflow的节点你可以任意拖拽，两个节点之间的连线也可以自由连接，可编辑性非常强大。</p>\n</blockquote>\n<h3 id=\"logicflow-的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\"><a href=\"#logicflow-的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\" class=\"headerlink\" title=\"logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现\"></a>logicflow 的相关API非常强大，包括控制栏还有拖拽栏都可以利用API非常简单的实现</h3><h4 id=\"控制面板\"><a href=\"#控制面板\" class=\"headerlink\" title=\"控制面板\"></a>控制面板</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; Control &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/extension&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/extension/lib/style/index.css&#x27;</span><br><br>LogicFlow.use(Control);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://i.loli.net/2021/11/11/srAMShNTxOFvQ3Z.png\"  ><span class=\"image-caption\">image-20210624165536045</span></p>\n<h4 id=\"拖拽面板\"><a href=\"#拖拽面板\" class=\"headerlink\" title=\"拖拽面板\"></a>拖拽面板</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ts\"><span class=\"hljs-keyword\">import</span> LogicFlow <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/core&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> &#123; DndPanel &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@logicflow/extension&#x27;</span>;<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@logicflow/extension/lib/style/index.css&#x27;</span><br><br>LogicFlow.use(DndPanel);<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://i.loli.net/2021/11/11/JiTazKtM5FR2dDm.png\"  ><span class=\"image-caption\">image-20210624165558372</span></p>\n<p>等等功能都可以调用API快速在实现。包括节点的各种API真的是功能非常强大又非常贴心的框架，简单滴代码开发一个可拖拽的流程图编辑器。</p>\n<p>还有他的自定义程度也非常高，如果API自带模板不能满足也可以高度自定义组件以及相关方法。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","slug":"hello-world","published":1,"date":"2021-11-03T07:39:47.178Z","updated":"2021-11-11T06:48:44.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw02q18i00081g8i9zvee4kl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"vue3 + G6 采坑笔记","_content":"\n# vue3 + G6 采坑笔记\n\n### 1.axios 获取数据异步问题\n\n![image-20210622164011097](https://i.loli.net/2021/11/11/ZMkrPVI7ztXBfub.png)\n\n原本想 getData 方法在 onBeforeMount 生命周期运行，draw 绘制的方法在 onMounted生命周期中进行。但是在数据还没有获取得到的时候，onMounted就已经运行了，这才意识到不对，直接把draw写在 axios.get之后就可。\n\n### 2.reactive的数据存取问题\n\n```javascript\nconst data: any = reactive({ nodes: [], edges: [] });\n\n data.nodes = [...res.data.nodes];\n data.edges = [...res.data.edges];\n```\n\n如果res.data.nodes里面有包裹 [ ] ，则需要用到扩展运算符 ... \n\n#### 3.G6的数据更换之后的图形再次渲染问题\n\n需要将G6生成的实例化对象设置为全局对象\n\n```javascript\nlet graph:any = reactive(Object)\n\n graph = new G6.Graph({ \n ...\n })\n```\n\n只要实例化对象不是同一个，后面再次渲染就会出现两个图形，导致不是更新数据，而是再次绘制一个新的图像。\n\n### 4.添加节点的相关代码\n\n```js\nfunction add(this: any) {\n      let newNode = reactive({\n        id: num.value.toString(),\n        label: (num.value+1).toString(),\n      });\n      let newEdges = reactive({\n        source: (num.value-1).toString(), \n        target: num.value.toString(), \n        label: \"测试\"\n      });\n      data.nodes.push(newNode);\n      data.edges.push(newEdges);\n      console.log(data, \"更新数据\");\n      num.value = num.value + 1;\n\t//再次渲染\n      graph.render();\n     \n    }\n```\n\n","source":"_posts/vue3 + G6 采坑笔记.md","raw":"---\ntitle: vue3 + G6 采坑笔记\n---\n\n# vue3 + G6 采坑笔记\n\n### 1.axios 获取数据异步问题\n\n![image-20210622164011097](https://i.loli.net/2021/11/11/ZMkrPVI7ztXBfub.png)\n\n原本想 getData 方法在 onBeforeMount 生命周期运行，draw 绘制的方法在 onMounted生命周期中进行。但是在数据还没有获取得到的时候，onMounted就已经运行了，这才意识到不对，直接把draw写在 axios.get之后就可。\n\n### 2.reactive的数据存取问题\n\n```javascript\nconst data: any = reactive({ nodes: [], edges: [] });\n\n data.nodes = [...res.data.nodes];\n data.edges = [...res.data.edges];\n```\n\n如果res.data.nodes里面有包裹 [ ] ，则需要用到扩展运算符 ... \n\n#### 3.G6的数据更换之后的图形再次渲染问题\n\n需要将G6生成的实例化对象设置为全局对象\n\n```javascript\nlet graph:any = reactive(Object)\n\n graph = new G6.Graph({ \n ...\n })\n```\n\n只要实例化对象不是同一个，后面再次渲染就会出现两个图形，导致不是更新数据，而是再次绘制一个新的图像。\n\n### 4.添加节点的相关代码\n\n```js\nfunction add(this: any) {\n      let newNode = reactive({\n        id: num.value.toString(),\n        label: (num.value+1).toString(),\n      });\n      let newEdges = reactive({\n        source: (num.value-1).toString(), \n        target: num.value.toString(), \n        label: \"测试\"\n      });\n      data.nodes.push(newNode);\n      data.edges.push(newEdges);\n      console.log(data, \"更新数据\");\n      num.value = num.value + 1;\n\t//再次渲染\n      graph.render();\n     \n    }\n```\n\n","slug":"vue3 + G6 采坑笔记","published":1,"date":"2021-11-11T06:43:48.902Z","updated":"2021-11-11T06:42:03.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw02q18j000a1g8ia8px1pmn","content":"<h1 id=\"vue3-G6-采坑笔记\"><a href=\"#vue3-G6-采坑笔记\" class=\"headerlink\" title=\"vue3 + G6 采坑笔记\"></a>vue3 + G6 采坑笔记</h1><h3 id=\"1-axios-获取数据异步问题\"><a href=\"#1-axios-获取数据异步问题\" class=\"headerlink\" title=\"1.axios 获取数据异步问题\"></a>1.axios 获取数据异步问题</h3><p><img  src=\"https://i.loli.net/2021/11/11/ZMkrPVI7ztXBfub.png\"  ><span class=\"image-caption\">image-20210622164011097</span></p>\n<p>原本想 getData 方法在 onBeforeMount 生命周期运行，draw 绘制的方法在 onMounted生命周期中进行。但是在数据还没有获取得到的时候，onMounted就已经运行了，这才意识到不对，直接把draw写在 axios.get之后就可。</p>\n<h3 id=\"2-reactive的数据存取问题\"><a href=\"#2-reactive的数据存取问题\" class=\"headerlink\" title=\"2.reactive的数据存取问题\"></a>2.reactive的数据存取问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> data: any = reactive(&#123; <span class=\"hljs-attr\">nodes</span>: [], <span class=\"hljs-attr\">edges</span>: [] &#125;);<br><br> data.nodes = [...res.data.nodes];<br> data.edges = [...res.data.edges];<br></code></pre></td></tr></table></figure>\n\n<p>如果res.data.nodes里面有包裹 [ ] ，则需要用到扩展运算符 … </p>\n<h4 id=\"3-G6的数据更换之后的图形再次渲染问题\"><a href=\"#3-G6的数据更换之后的图形再次渲染问题\" class=\"headerlink\" title=\"3.G6的数据更换之后的图形再次渲染问题\"></a>3.G6的数据更换之后的图形再次渲染问题</h4><p>需要将G6生成的实例化对象设置为全局对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> graph:any = reactive(<span class=\"hljs-built_in\">Object</span>)<br><br> graph = <span class=\"hljs-keyword\">new</span> G6.Graph(&#123; <br> ...<br> &#125;)<br></code></pre></td></tr></table></figure>\n\n<p>只要实例化对象不是同一个，后面再次渲染就会出现两个图形，导致不是更新数据，而是再次绘制一个新的图像。</p>\n<h3 id=\"4-添加节点的相关代码\"><a href=\"#4-添加节点的相关代码\" class=\"headerlink\" title=\"4.添加节点的相关代码\"></a>4.添加节点的相关代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: any</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">let</span> newNode = reactive(&#123;<br>        <span class=\"hljs-attr\">id</span>: num.value.toString(),<br>        <span class=\"hljs-attr\">label</span>: (num.value+<span class=\"hljs-number\">1</span>).toString(),<br>      &#125;);<br>      <span class=\"hljs-keyword\">let</span> newEdges = reactive(&#123;<br>        <span class=\"hljs-attr\">source</span>: (num.value-<span class=\"hljs-number\">1</span>).toString(), <br>        <span class=\"hljs-attr\">target</span>: num.value.toString(), <br>        <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;测试&quot;</span><br>      &#125;);<br>      data.nodes.push(newNode);<br>      data.edges.push(newEdges);<br>      <span class=\"hljs-built_in\">console</span>.log(data, <span class=\"hljs-string\">&quot;更新数据&quot;</span>);<br>      num.value = num.value + <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-comment\">//再次渲染</span><br>      graph.render();<br>     <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"vue3-G6-采坑笔记\"><a href=\"#vue3-G6-采坑笔记\" class=\"headerlink\" title=\"vue3 + G6 采坑笔记\"></a>vue3 + G6 采坑笔记</h1><h3 id=\"1-axios-获取数据异步问题\"><a href=\"#1-axios-获取数据异步问题\" class=\"headerlink\" title=\"1.axios 获取数据异步问题\"></a>1.axios 获取数据异步问题</h3><p><img  src=\"https://i.loli.net/2021/11/11/ZMkrPVI7ztXBfub.png\"  ><span class=\"image-caption\">image-20210622164011097</span></p>\n<p>原本想 getData 方法在 onBeforeMount 生命周期运行，draw 绘制的方法在 onMounted生命周期中进行。但是在数据还没有获取得到的时候，onMounted就已经运行了，这才意识到不对，直接把draw写在 axios.get之后就可。</p>\n<h3 id=\"2-reactive的数据存取问题\"><a href=\"#2-reactive的数据存取问题\" class=\"headerlink\" title=\"2.reactive的数据存取问题\"></a>2.reactive的数据存取问题</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> data: any = reactive(&#123; <span class=\"hljs-attr\">nodes</span>: [], <span class=\"hljs-attr\">edges</span>: [] &#125;);<br><br> data.nodes = [...res.data.nodes];<br> data.edges = [...res.data.edges];<br></code></pre></td></tr></table></figure>\n\n<p>如果res.data.nodes里面有包裹 [ ] ，则需要用到扩展运算符 … </p>\n<h4 id=\"3-G6的数据更换之后的图形再次渲染问题\"><a href=\"#3-G6的数据更换之后的图形再次渲染问题\" class=\"headerlink\" title=\"3.G6的数据更换之后的图形再次渲染问题\"></a>3.G6的数据更换之后的图形再次渲染问题</h4><p>需要将G6生成的实例化对象设置为全局对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> graph:any = reactive(<span class=\"hljs-built_in\">Object</span>)<br><br> graph = <span class=\"hljs-keyword\">new</span> G6.Graph(&#123; <br> ...<br> &#125;)<br></code></pre></td></tr></table></figure>\n\n<p>只要实例化对象不是同一个，后面再次渲染就会出现两个图形，导致不是更新数据，而是再次绘制一个新的图像。</p>\n<h3 id=\"4-添加节点的相关代码\"><a href=\"#4-添加节点的相关代码\" class=\"headerlink\" title=\"4.添加节点的相关代码\"></a>4.添加节点的相关代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: any</span>) </span>&#123;<br>      <span class=\"hljs-keyword\">let</span> newNode = reactive(&#123;<br>        <span class=\"hljs-attr\">id</span>: num.value.toString(),<br>        <span class=\"hljs-attr\">label</span>: (num.value+<span class=\"hljs-number\">1</span>).toString(),<br>      &#125;);<br>      <span class=\"hljs-keyword\">let</span> newEdges = reactive(&#123;<br>        <span class=\"hljs-attr\">source</span>: (num.value-<span class=\"hljs-number\">1</span>).toString(), <br>        <span class=\"hljs-attr\">target</span>: num.value.toString(), <br>        <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&quot;测试&quot;</span><br>      &#125;);<br>      data.nodes.push(newNode);<br>      data.edges.push(newEdges);<br>      <span class=\"hljs-built_in\">console</span>.log(data, <span class=\"hljs-string\">&quot;更新数据&quot;</span>);<br>      num.value = num.value + <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-comment\">//再次渲染</span><br>      graph.render();<br>     <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"vue3 + G6 采坑笔记 2","_content":"\n# vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）\n\n今天了解了一下g6-editor流程图编辑框架导包的时候\n\n```js\nimport G6Editor from \"@antv/g6-editor\";\n```\n\n出现这样的错误\n\n```\n无法找到模块“@antv/g6-editor”的声明文件。“c:/Users/Lenovo/Desktop/vue/myvue3/node_modules/@antv/g6-editor/build/g6Editor.js”隐式拥有 \"any\" 类型。\n  尝试使用 `npm i --save-dev @types/antv__g6-editor` (如果存在)，或者添加一个包含 `declare module '@antv/g6-editor';` 的新声明(.d.ts)文件ts(7016)\n```\n\n> 尝试使用 `npm i --save-dev @types/antv__g6-editor` 也不行\n\n后面发现 是因为在使用 Typescript 的过程中， 第三方类库并没有ts的.d.ts 类型的声明文件，所以无法在目前的项目中正常使用。如果要顺利使用这些库， 可能需要我们添加声明文件。\n\n## 解决方法\n\n在src目录下新建一个types目录,然后在types 目录下新建一个 index.d.ts文件然后在文件中添加代码 declare module \"第三方类库名\"。\n\n```js\ndeclare module '@antv/g6-editor';\n```\n\n就可以运行了。\n\n","source":"_posts/vue3 + G6 采坑笔记 2.md","raw":"---\ntitle: vue3 + G6 采坑笔记 2\n---\n\n# vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）\n\n今天了解了一下g6-editor流程图编辑框架导包的时候\n\n```js\nimport G6Editor from \"@antv/g6-editor\";\n```\n\n出现这样的错误\n\n```\n无法找到模块“@antv/g6-editor”的声明文件。“c:/Users/Lenovo/Desktop/vue/myvue3/node_modules/@antv/g6-editor/build/g6Editor.js”隐式拥有 \"any\" 类型。\n  尝试使用 `npm i --save-dev @types/antv__g6-editor` (如果存在)，或者添加一个包含 `declare module '@antv/g6-editor';` 的新声明(.d.ts)文件ts(7016)\n```\n\n> 尝试使用 `npm i --save-dev @types/antv__g6-editor` 也不行\n\n后面发现 是因为在使用 Typescript 的过程中， 第三方类库并没有ts的.d.ts 类型的声明文件，所以无法在目前的项目中正常使用。如果要顺利使用这些库， 可能需要我们添加声明文件。\n\n## 解决方法\n\n在src目录下新建一个types目录,然后在types 目录下新建一个 index.d.ts文件然后在文件中添加代码 declare module \"第三方类库名\"。\n\n```js\ndeclare module '@antv/g6-editor';\n```\n\n就可以运行了。\n\n","slug":"vue3 + G6 采坑笔记 2","published":1,"date":"2021-11-11T06:43:48.942Z","updated":"2021-11-11T06:43:40.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw02q18p000g1g8i3kkh5mxg","content":"<h1 id=\"vue3-G6-采坑笔记-2（-d-ts-类型声明文件）\"><a href=\"#vue3-G6-采坑笔记-2（-d-ts-类型声明文件）\" class=\"headerlink\" title=\"vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）\"></a>vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）</h1><p>今天了解了一下g6-editor流程图编辑框架导包的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> G6Editor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@antv/g6-editor&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>出现这样的错误</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">无法找到模块“<span class=\"hljs-variable\">@antv</span>/g6-editor”的声明文件。“<span class=\"hljs-attribute\">c</span>:/Users/Lenovo/Desktop/vue/myvue3/node_modules/<span class=\"hljs-variable\">@antv</span>/g6-editor/build/g6Editor.js”隐式拥有 <span class=\"hljs-string\">&quot;any&quot;</span> 类型。<br>  尝试使用 <span class=\"hljs-built_in\">`npm i --save-dev @types/antv__g6-editor`</span> (如果存在)，或者添加一个包含 <span class=\"hljs-built_in\">`declare module &#x27;@antv/g6-editor&#x27;;`</span> 的新声明(.d.ts)文件ts(<span class=\"hljs-number\">7016</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>尝试使用 <code>npm i --save-dev @types/antv__g6-editor</code> 也不行</p>\n</blockquote>\n<p>后面发现 是因为在使用 Typescript 的过程中， 第三方类库并没有ts的.d.ts 类型的声明文件，所以无法在目前的项目中正常使用。如果要顺利使用这些库， 可能需要我们添加声明文件。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在src目录下新建一个types目录,然后在types 目录下新建一个 index.d.ts文件然后在文件中添加代码 declare module “第三方类库名”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">declare <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;@antv/g6-editor&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>就可以运行了。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"vue3-G6-采坑笔记-2（-d-ts-类型声明文件）\"><a href=\"#vue3-G6-采坑笔记-2（-d-ts-类型声明文件）\" class=\"headerlink\" title=\"vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）\"></a>vue3 + G6 采坑笔记 2（.d.ts 类型声明文件）</h1><p>今天了解了一下g6-editor流程图编辑框架导包的时候</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> G6Editor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@antv/g6-editor&quot;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>出现这样的错误</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\">无法找到模块“<span class=\"hljs-variable\">@antv</span>/g6-editor”的声明文件。“<span class=\"hljs-attribute\">c</span>:/Users/Lenovo/Desktop/vue/myvue3/node_modules/<span class=\"hljs-variable\">@antv</span>/g6-editor/build/g6Editor.js”隐式拥有 <span class=\"hljs-string\">&quot;any&quot;</span> 类型。<br>  尝试使用 <span class=\"hljs-built_in\">`npm i --save-dev @types/antv__g6-editor`</span> (如果存在)，或者添加一个包含 <span class=\"hljs-built_in\">`declare module &#x27;@antv/g6-editor&#x27;;`</span> 的新声明(.d.ts)文件ts(<span class=\"hljs-number\">7016</span>)<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>尝试使用 <code>npm i --save-dev @types/antv__g6-editor</code> 也不行</p>\n</blockquote>\n<p>后面发现 是因为在使用 Typescript 的过程中， 第三方类库并没有ts的.d.ts 类型的声明文件，所以无法在目前的项目中正常使用。如果要顺利使用这些库， 可能需要我们添加声明文件。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>在src目录下新建一个types目录,然后在types 目录下新建一个 index.d.ts文件然后在文件中添加代码 declare module “第三方类库名”。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">declare <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;@antv/g6-editor&#x27;</span>;<br></code></pre></td></tr></table></figure>\n\n<p>就可以运行了。</p>\n"},{"title":"Typora 快捷键","top":5,"_content":"\n---\n\n# Typora快捷键\n\n## windows快捷键：\n\n- 无序列表：输入-之后输入空格\n\n- 有序列表：输入数字+“.”之后输入空格\n\n- 任务列表：-[空格]空格 文字\n\n- 标题：ctrl+数字\n\n- 表格：ctrl+t\n\n- 生成目录：`[TOC]`按回车\n\n- 选中一整行：ctrl+l\n\n- 选中单词：ctrl+d\n\n- 选中相同格式的文字：ctrl+e\n\n- 跳转到文章开头：ctrl+home\n\n- 跳转到文章结尾：ctrl+end\n\n- 搜索：ctrl+f\n\n- 替换：ctrl+h\n\n- 引用：输入>之后输入空格\n\n- 代码块：ctrl+alt+f\n\n- 加粗：ctrl+b\n\n- 倾斜：ctrl+i\n\n- 下划线：ctrl+u\n\n- 删除线：alt+shift+5\n\n- 插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n\n- 插入链接：ctrl + k\n\n  ## 给代码块设置快捷键:\n\n偏好设置->打开高级设置->conf.user.json文件\n\n```\n  \"keyBinding\": {\n    // for example: \n    // \"Always on Top\": \"Ctrl+Shift+P\"\n\t\"Always on Top\": \"Ctrl+Shift+P\",  \n    \"Code Fences\": \"Ctrl+Shift+F\",  \n    \"Ordered List\":\"Ctrl+Alt+o\",  \n    \"Unordered List\": \"Ctrl+Alt+u\"  \n  },\n```\n\nCode Fences 代码块\n\nOrdered List 数字有序列表\n\nUnordered List 无序列表\n\n## Mac中的快捷键：\n\n1. 最大标题：command + 1 或者：#\n2. 大标题：command + 2 或者：##\n3. 标准标题：command + 3 或者：###\n4. 中标题：command + 4 或者：####\n5. 小标题：command + 5 或者：#####\n6. 插入表格：command + T\n7. 插入代码：command + alt +c\n8. 行间公式 command + Alt + b\n9. 段落：command + 0\n10. 竖线 ： command + Alt +q\n11. 有序列表（1. 2.） ：输入数字+“.”之后输入空格 或者：command + Alt + o\n12. 黑点标记：command + Alt + u\n13. 隔离线shift + command + -\n14. 超链接：command + Alt + l\n15. 插入链接：command +k\n16. 下划线：command +u\n17. 加粗：command +b\n18. 搜索：command +f\n\n## 图片：\n\n[![img](https://i.loli.net/2021/11/17/sGma1XBr7C9cfMk.png)](https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170159282-378811511.png)\n[![img](https://i.loli.net/2021/11/17/d6LROAUbgl92Q1s.png)](https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170211920-1988294604.png)\n\n## 表情\n\n输出表情需要借助 `：`符号。\n\n栗子：`:smile` 显示为 😄,记住是左右两边都要冒号。\n\n使用者可以通过使用`ESC`键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏`Edit` -> `Emoji & Symbols`插入UTF8表情符号也是可以的。\n\n或者使用下面的方法\n\n访问网站 https://emojikeyboard.org/，找到需要的符号，鼠标左键单击，然后粘贴到需要的地方就行了！🆗\n\n## 数学公式\n\n你可以通过使用**MathJax**来实现*LaTeX*的数学符号的表达。\n\n输入`$$`，然后按下`Enter`键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：\n$$\nV1×V2=∣∣ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 ∣∣V1×V2=|ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 |\n$$\n在Markdown源文件中，数学的公式块是通过利用`$$`标记借用*LaTeX*语言来实现的：\n\n```text\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n```\n\n## HTML\n\nTypora不能使用HTML元素，但是Typora可以解析和编译非常有限的HTML元素，作为Markdown功能的补充，这些有限的功能包括：\n\n- 下划线： `<u>underline</u>`\n- 图片：`<img src=\"http://www.w3.org/html/logo/img/mark-word-icon.png\" width=\"200px\" />`（HTML标签中的`width`, `height` 以及属于样式的`width`, `height`, `zoom`样式可以被识别和应用。）\n- 评论：`<!-- This is some comments -->`\n- 超链接： `<a href=\"http://typora.io\" target=\"_blank\">link</a>` 。\n\n大多数这些属性、样式或分类会被忽略。对其他的标签，Typora会将它们以HTML片段的形式表达。\n\n## 行内嵌数学符号\n\n想要使用这个功能，需要在设置面板的 `Markdown`栏启用它。然后使用`$`来启动TeX命令，栗如：`$\\lim_{x \\to \\infty} \\exp(-x) = 0$` 会以LaTeX的命令形式表达出来。\n\n为了触发行内内嵌数学符号的实时编译你需要：输入`$`然后按下`ESC`键之后输入TeX命令，之后就会弹出一个如图所示的工具提示栏：\n\n[![img](https://i.loli.net/2021/11/17/XzrdUwhJGiu689s.gif)](https://pic3.zhimg.com/v2-4033508b043cad96c59ec4edbca92f36_b.gif)\n\n## 下标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`~`来修饰下标文本。栗如：\n\n`H~2~O` 和`X~long\\ text~` 显示为 H2O 和Xlong text 。\n\n\\#### 13.上标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`^`来修饰下标文本。栗如：\n\n`X^2^` 显示为 X2 。\n\n## 高亮\n\n想要使用这个功能，需要在设置面板的`Markdown` 栏启动它，之后使用`==`来修饰高亮文本，栗如：\n\n`==highlight==` 显示为 highlight 。\n\n","source":"_posts/Typora快捷键.md","raw":"---\ntitle: Typora 快捷键\ntop: 5\ncategories:  #设置分类\n- 技巧\n---\n\n---\n\n# Typora快捷键\n\n## windows快捷键：\n\n- 无序列表：输入-之后输入空格\n\n- 有序列表：输入数字+“.”之后输入空格\n\n- 任务列表：-[空格]空格 文字\n\n- 标题：ctrl+数字\n\n- 表格：ctrl+t\n\n- 生成目录：`[TOC]`按回车\n\n- 选中一整行：ctrl+l\n\n- 选中单词：ctrl+d\n\n- 选中相同格式的文字：ctrl+e\n\n- 跳转到文章开头：ctrl+home\n\n- 跳转到文章结尾：ctrl+end\n\n- 搜索：ctrl+f\n\n- 替换：ctrl+h\n\n- 引用：输入>之后输入空格\n\n- 代码块：ctrl+alt+f\n\n- 加粗：ctrl+b\n\n- 倾斜：ctrl+i\n\n- 下划线：ctrl+u\n\n- 删除线：alt+shift+5\n\n- 插入图片：直接拖动到指定位置即可或者ctrl+shift+i\n\n- 插入链接：ctrl + k\n\n  ## 给代码块设置快捷键:\n\n偏好设置->打开高级设置->conf.user.json文件\n\n```\n  \"keyBinding\": {\n    // for example: \n    // \"Always on Top\": \"Ctrl+Shift+P\"\n\t\"Always on Top\": \"Ctrl+Shift+P\",  \n    \"Code Fences\": \"Ctrl+Shift+F\",  \n    \"Ordered List\":\"Ctrl+Alt+o\",  \n    \"Unordered List\": \"Ctrl+Alt+u\"  \n  },\n```\n\nCode Fences 代码块\n\nOrdered List 数字有序列表\n\nUnordered List 无序列表\n\n## Mac中的快捷键：\n\n1. 最大标题：command + 1 或者：#\n2. 大标题：command + 2 或者：##\n3. 标准标题：command + 3 或者：###\n4. 中标题：command + 4 或者：####\n5. 小标题：command + 5 或者：#####\n6. 插入表格：command + T\n7. 插入代码：command + alt +c\n8. 行间公式 command + Alt + b\n9. 段落：command + 0\n10. 竖线 ： command + Alt +q\n11. 有序列表（1. 2.） ：输入数字+“.”之后输入空格 或者：command + Alt + o\n12. 黑点标记：command + Alt + u\n13. 隔离线shift + command + -\n14. 超链接：command + Alt + l\n15. 插入链接：command +k\n16. 下划线：command +u\n17. 加粗：command +b\n18. 搜索：command +f\n\n## 图片：\n\n[![img](https://i.loli.net/2021/11/17/sGma1XBr7C9cfMk.png)](https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170159282-378811511.png)\n[![img](https://i.loli.net/2021/11/17/d6LROAUbgl92Q1s.png)](https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170211920-1988294604.png)\n\n## 表情\n\n输出表情需要借助 `：`符号。\n\n栗子：`:smile` 显示为 😄,记住是左右两边都要冒号。\n\n使用者可以通过使用`ESC`键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏`Edit` -> `Emoji & Symbols`插入UTF8表情符号也是可以的。\n\n或者使用下面的方法\n\n访问网站 https://emojikeyboard.org/，找到需要的符号，鼠标左键单击，然后粘贴到需要的地方就行了！🆗\n\n## 数学公式\n\n你可以通过使用**MathJax**来实现*LaTeX*的数学符号的表达。\n\n输入`$$`，然后按下`Enter`键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：\n$$\nV1×V2=∣∣ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 ∣∣V1×V2=|ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 |\n$$\n在Markdown源文件中，数学的公式块是通过利用`$$`标记借用*LaTeX*语言来实现的：\n\n```text\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \n\\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\n\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\n\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\n\\end{vmatrix}\n$$\n```\n\n## HTML\n\nTypora不能使用HTML元素，但是Typora可以解析和编译非常有限的HTML元素，作为Markdown功能的补充，这些有限的功能包括：\n\n- 下划线： `<u>underline</u>`\n- 图片：`<img src=\"http://www.w3.org/html/logo/img/mark-word-icon.png\" width=\"200px\" />`（HTML标签中的`width`, `height` 以及属于样式的`width`, `height`, `zoom`样式可以被识别和应用。）\n- 评论：`<!-- This is some comments -->`\n- 超链接： `<a href=\"http://typora.io\" target=\"_blank\">link</a>` 。\n\n大多数这些属性、样式或分类会被忽略。对其他的标签，Typora会将它们以HTML片段的形式表达。\n\n## 行内嵌数学符号\n\n想要使用这个功能，需要在设置面板的 `Markdown`栏启用它。然后使用`$`来启动TeX命令，栗如：`$\\lim_{x \\to \\infty} \\exp(-x) = 0$` 会以LaTeX的命令形式表达出来。\n\n为了触发行内内嵌数学符号的实时编译你需要：输入`$`然后按下`ESC`键之后输入TeX命令，之后就会弹出一个如图所示的工具提示栏：\n\n[![img](https://i.loli.net/2021/11/17/XzrdUwhJGiu689s.gif)](https://pic3.zhimg.com/v2-4033508b043cad96c59ec4edbca92f36_b.gif)\n\n## 下标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`~`来修饰下标文本。栗如：\n\n`H~2~O` 和`X~long\\ text~` 显示为 H2O 和Xlong text 。\n\n\\#### 13.上标\n\n想要使用这个功能，需要在设置面板的 `Markdown` 栏启动它，之后使用`^`来修饰下标文本。栗如：\n\n`X^2^` 显示为 X2 。\n\n## 高亮\n\n想要使用这个功能，需要在设置面板的`Markdown` 栏启动它，之后使用`==`来修饰高亮文本，栗如：\n\n`==highlight==` 显示为 highlight 。\n\n","slug":"Typora快捷键","published":1,"date":"2021-11-15T07:14:17.824Z","updated":"2021-12-31T02:20:20.290Z","_id":"ckw2tlnf100001w8i0fl0dqo2","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h1 id=\"Typora快捷键\"><a href=\"#Typora快捷键\" class=\"headerlink\" title=\"Typora快捷键\"></a>Typora快捷键</h1><h2 id=\"windows快捷键：\"><a href=\"#windows快捷键：\" class=\"headerlink\" title=\"windows快捷键：\"></a>windows快捷键：</h2><ul>\n<li><p>无序列表：输入-之后输入空格</p>\n</li>\n<li><p>有序列表：输入数字+“.”之后输入空格</p>\n</li>\n<li><p>任务列表：-[空格]空格 文字</p>\n</li>\n<li><p>标题：ctrl+数字</p>\n</li>\n<li><p>表格：ctrl+t</p>\n</li>\n<li><p>生成目录：<code>[TOC]</code>按回车</p>\n</li>\n<li><p>选中一整行：ctrl+l</p>\n</li>\n<li><p>选中单词：ctrl+d</p>\n</li>\n<li><p>选中相同格式的文字：ctrl+e</p>\n</li>\n<li><p>跳转到文章开头：ctrl+home</p>\n</li>\n<li><p>跳转到文章结尾：ctrl+end</p>\n</li>\n<li><p>搜索：ctrl+f</p>\n</li>\n<li><p>替换：ctrl+h</p>\n</li>\n<li><p>引用：输入&gt;之后输入空格</p>\n</li>\n<li><p>代码块：ctrl+alt+f</p>\n</li>\n<li><p>加粗：ctrl+b</p>\n</li>\n<li><p>倾斜：ctrl+i</p>\n</li>\n<li><p>下划线：ctrl+u</p>\n</li>\n<li><p>删除线：alt+shift+5</p>\n</li>\n<li><p>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</p>\n</li>\n<li><p>插入链接：ctrl + k</p>\n<h2 id=\"给代码块设置快捷键\"><a href=\"#给代码块设置快捷键\" class=\"headerlink\" title=\"给代码块设置快捷键:\"></a>给代码块设置快捷键:</h2></li>\n</ul>\n<p>偏好设置-&gt;打开高级设置-&gt;conf.user.json文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"> <span class=\"hljs-string\">&quot;keyBinding&quot;</span>: &#123;<br>   <span class=\"hljs-regexp\">//</span> <span class=\"hljs-keyword\">for</span> example: <br>   <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">&quot;Always on Top&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+P&quot;</span><br><span class=\"hljs-string\">&quot;Always on Top&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+P&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Code Fences&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+F&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Ordered List&quot;</span>:<span class=\"hljs-string\">&quot;Ctrl+Alt+o&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Unordered List&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Alt+u&quot;</span>  <br> &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>Code Fences 代码块</p>\n<p>Ordered List 数字有序列表</p>\n<p>Unordered List 无序列表</p>\n<h2 id=\"Mac中的快捷键：\"><a href=\"#Mac中的快捷键：\" class=\"headerlink\" title=\"Mac中的快捷键：\"></a>Mac中的快捷键：</h2><ol>\n<li>最大标题：command + 1 或者：#</li>\n<li>大标题：command + 2 或者：##</li>\n<li>标准标题：command + 3 或者：###</li>\n<li>中标题：command + 4 或者：####</li>\n<li>小标题：command + 5 或者：#####</li>\n<li>插入表格：command + T</li>\n<li>插入代码：command + alt +c</li>\n<li>行间公式 command + Alt + b</li>\n<li>段落：command + 0</li>\n<li>竖线 ： command + Alt +q</li>\n<li>有序列表（1. 2.） ：输入数字+“.”之后输入空格 或者：command + Alt + o</li>\n<li>黑点标记：command + Alt + u</li>\n<li>隔离线shift + command + -</li>\n<li>超链接：command + Alt + l</li>\n<li>插入链接：command +k</li>\n<li>下划线：command +u</li>\n<li>加粗：command +b</li>\n<li>搜索：command +f</li>\n</ol>\n<h2 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h2><p><a href=\"https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170159282-378811511.png\"><img  src=\"https://i.loli.net/2021/11/17/sGma1XBr7C9cfMk.png\"  ><span class=\"image-caption\">img</span></a><br><a href=\"https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170211920-1988294604.png\"><img  src=\"https://i.loli.net/2021/11/17/d6LROAUbgl92Q1s.png\"  ><span class=\"image-caption\">img</span></a></p>\n<h2 id=\"表情\"><a href=\"#表情\" class=\"headerlink\" title=\"表情\"></a>表情</h2><p>输出表情需要借助 <code>：</code>符号。</p>\n<p>栗子：<code>:smile</code> 显示为 😄,记住是左右两边都要冒号。</p>\n<p>使用者可以通过使用<code>ESC</code>键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏<code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code>插入UTF8表情符号也是可以的。</p>\n<p>或者使用下面的方法</p>\n<p>访问网站 <a href=\"https://emojikeyboard.org/%EF%BC%8C%E6%89%BE%E5%88%B0%E9%9C%80%E8%A6%81%E7%9A%84%E7%AC%A6%E5%8F%B7%EF%BC%8C%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE%E5%8D%95%E5%87%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E7%B2%98%E8%B4%B4%E5%88%B0%E9%9C%80%E8%A6%81%E7%9A%84%E5%9C%B0%E6%96%B9%E5%B0%B1%E8%A1%8C%E4%BA%86%EF%BC%81%F0%9F%86%97\">https://emojikeyboard.org/，找到需要的符号，鼠标左键单击，然后粘贴到需要的地方就行了！🆗</a></p>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><p>你可以通过使用<strong>MathJax</strong>来实现<em>LaTeX</em>的数学符号的表达。</p>\n<p>输入<code>$$</code>，然后按下<code>Enter</code>键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：<br>$$<br>V1×V2=∣∣ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 ∣∣V1×V2=|ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 |<br>$$<br>在Markdown源文件中，数学的公式块是通过利用<code>$$</code>标记借用<em>LaTeX</em>语言来实现的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">$$<br>\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125; <br>\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\<br>\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\<br>\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\<br>\\end&#123;vmatrix&#125;<br>$$<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>Typora不能使用HTML元素，但是Typora可以解析和编译非常有限的HTML元素，作为Markdown功能的补充，这些有限的功能包括：</p>\n<ul>\n<li>下划线： <code>&lt;u&gt;underline&lt;/u&gt;</code></li>\n<li>图片：<code>&lt;img src=&quot;http://www.w3.org/html/logo/img/mark-word-icon.png&quot; width=&quot;200px&quot; /&gt;</code>（HTML标签中的<code>width</code>, <code>height</code> 以及属于样式的<code>width</code>, <code>height</code>, <code>zoom</code>样式可以被识别和应用。）</li>\n<li>评论：<code>&lt;!-- This is some comments --&gt;</code></li>\n<li>超链接： <code>&lt;a href=&quot;http://typora.io&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;</code> 。</li>\n</ul>\n<p>大多数这些属性、样式或分类会被忽略。对其他的标签，Typora会将它们以HTML片段的形式表达。</p>\n<h2 id=\"行内嵌数学符号\"><a href=\"#行内嵌数学符号\" class=\"headerlink\" title=\"行内嵌数学符号\"></a>行内嵌数学符号</h2><p>想要使用这个功能，需要在设置面板的 <code>Markdown</code>栏启用它。然后使用<code>$</code>来启动TeX命令，栗如：<code>$\\lim_&#123;x \\to \\infty&#125; \\exp(-x) = 0$</code> 会以LaTeX的命令形式表达出来。</p>\n<p>为了触发行内内嵌数学符号的实时编译你需要：输入<code>$</code>然后按下<code>ESC</code>键之后输入TeX命令，之后就会弹出一个如图所示的工具提示栏：</p>\n<p><a href=\"https://pic3.zhimg.com/v2-4033508b043cad96c59ec4edbca92f36_b.gif\"><img  src=\"https://i.loli.net/2021/11/17/XzrdUwhJGiu689s.gif\"  ><span class=\"image-caption\">img</span></a></p>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>想要使用这个功能，需要在设置面板的 <code>Markdown</code> 栏启动它，之后使用<code>~</code>来修饰下标文本。栗如：</p>\n<p><code>H~2~O</code> 和<code>X~long\\ text~</code> 显示为 H2O 和Xlong text 。</p>\n<p>#### 13.上标</p>\n<p>想要使用这个功能，需要在设置面板的 <code>Markdown</code> 栏启动它，之后使用<code>^</code>来修饰下标文本。栗如：</p>\n<p><code>X^2^</code> 显示为 X2 。</p>\n<h2 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h2><p>想要使用这个功能，需要在设置面板的<code>Markdown</code> 栏启动它，之后使用<code>==</code>来修饰高亮文本，栗如：</p>\n<p><code>==highlight==</code> 显示为 highlight 。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<hr>\n<h1 id=\"Typora快捷键\"><a href=\"#Typora快捷键\" class=\"headerlink\" title=\"Typora快捷键\"></a>Typora快捷键</h1><h2 id=\"windows快捷键：\"><a href=\"#windows快捷键：\" class=\"headerlink\" title=\"windows快捷键：\"></a>windows快捷键：</h2><ul>\n<li><p>无序列表：输入-之后输入空格</p>\n</li>\n<li><p>有序列表：输入数字+“.”之后输入空格</p>\n</li>\n<li><p>任务列表：-[空格]空格 文字</p>\n</li>\n<li><p>标题：ctrl+数字</p>\n</li>\n<li><p>表格：ctrl+t</p>\n</li>\n<li><p>生成目录：<code>[TOC]</code>按回车</p>\n</li>\n<li><p>选中一整行：ctrl+l</p>\n</li>\n<li><p>选中单词：ctrl+d</p>\n</li>\n<li><p>选中相同格式的文字：ctrl+e</p>\n</li>\n<li><p>跳转到文章开头：ctrl+home</p>\n</li>\n<li><p>跳转到文章结尾：ctrl+end</p>\n</li>\n<li><p>搜索：ctrl+f</p>\n</li>\n<li><p>替换：ctrl+h</p>\n</li>\n<li><p>引用：输入&gt;之后输入空格</p>\n</li>\n<li><p>代码块：ctrl+alt+f</p>\n</li>\n<li><p>加粗：ctrl+b</p>\n</li>\n<li><p>倾斜：ctrl+i</p>\n</li>\n<li><p>下划线：ctrl+u</p>\n</li>\n<li><p>删除线：alt+shift+5</p>\n</li>\n<li><p>插入图片：直接拖动到指定位置即可或者ctrl+shift+i</p>\n</li>\n<li><p>插入链接：ctrl + k</p>\n<h2 id=\"给代码块设置快捷键\"><a href=\"#给代码块设置快捷键\" class=\"headerlink\" title=\"给代码块设置快捷键:\"></a>给代码块设置快捷键:</h2></li>\n</ul>\n<p>偏好设置-&gt;打开高级设置-&gt;conf.user.json文件</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"> <span class=\"hljs-string\">&quot;keyBinding&quot;</span>: &#123;<br>   <span class=\"hljs-regexp\">//</span> <span class=\"hljs-keyword\">for</span> example: <br>   <span class=\"hljs-regexp\">//</span> <span class=\"hljs-string\">&quot;Always on Top&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+P&quot;</span><br><span class=\"hljs-string\">&quot;Always on Top&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+P&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Code Fences&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Shift+F&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Ordered List&quot;</span>:<span class=\"hljs-string\">&quot;Ctrl+Alt+o&quot;</span>,  <br>   <span class=\"hljs-string\">&quot;Unordered List&quot;</span>: <span class=\"hljs-string\">&quot;Ctrl+Alt+u&quot;</span>  <br> &#125;,<br></code></pre></td></tr></table></figure>\n\n<p>Code Fences 代码块</p>\n<p>Ordered List 数字有序列表</p>\n<p>Unordered List 无序列表</p>\n<h2 id=\"Mac中的快捷键：\"><a href=\"#Mac中的快捷键：\" class=\"headerlink\" title=\"Mac中的快捷键：\"></a>Mac中的快捷键：</h2><ol>\n<li>最大标题：command + 1 或者：#</li>\n<li>大标题：command + 2 或者：##</li>\n<li>标准标题：command + 3 或者：###</li>\n<li>中标题：command + 4 或者：####</li>\n<li>小标题：command + 5 或者：#####</li>\n<li>插入表格：command + T</li>\n<li>插入代码：command + alt +c</li>\n<li>行间公式 command + Alt + b</li>\n<li>段落：command + 0</li>\n<li>竖线 ： command + Alt +q</li>\n<li>有序列表（1. 2.） ：输入数字+“.”之后输入空格 或者：command + Alt + o</li>\n<li>黑点标记：command + Alt + u</li>\n<li>隔离线shift + command + -</li>\n<li>超链接：command + Alt + l</li>\n<li>插入链接：command +k</li>\n<li>下划线：command +u</li>\n<li>加粗：command +b</li>\n<li>搜索：command +f</li>\n</ol>\n<h2 id=\"图片：\"><a href=\"#图片：\" class=\"headerlink\" title=\"图片：\"></a>图片：</h2><p><a href=\"https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170159282-378811511.png\"><img  src=\"https://i.loli.net/2021/11/17/sGma1XBr7C9cfMk.png\"  ><span class=\"image-caption\">img</span></a><br><a href=\"https://img2018.cnblogs.com/blog/443934/201810/443934-20181012170211920-1988294604.png\"><img  src=\"https://i.loli.net/2021/11/17/d6LROAUbgl92Q1s.png\"  ><span class=\"image-caption\">img</span></a></p>\n<h2 id=\"表情\"><a href=\"#表情\" class=\"headerlink\" title=\"表情\"></a>表情</h2><p>输出表情需要借助 <code>：</code>符号。</p>\n<p>栗子：<code>:smile</code> 显示为 😄,记住是左右两边都要冒号。</p>\n<p>使用者可以通过使用<code>ESC</code>键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏<code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code>插入UTF8表情符号也是可以的。</p>\n<p>或者使用下面的方法</p>\n<p>访问网站 <a href=\"https://emojikeyboard.org/%EF%BC%8C%E6%89%BE%E5%88%B0%E9%9C%80%E8%A6%81%E7%9A%84%E7%AC%A6%E5%8F%B7%EF%BC%8C%E9%BC%A0%E6%A0%87%E5%B7%A6%E9%94%AE%E5%8D%95%E5%87%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E7%B2%98%E8%B4%B4%E5%88%B0%E9%9C%80%E8%A6%81%E7%9A%84%E5%9C%B0%E6%96%B9%E5%B0%B1%E8%A1%8C%E4%BA%86%EF%BC%81%F0%9F%86%97\">https://emojikeyboard.org/，找到需要的符号，鼠标左键单击，然后粘贴到需要的地方就行了！🆗</a></p>\n<h2 id=\"数学公式\"><a href=\"#数学公式\" class=\"headerlink\" title=\"数学公式\"></a>数学公式</h2><p>你可以通过使用<strong>MathJax</strong>来实现<em>LaTeX</em>的数学符号的表达。</p>\n<p>输入<code>$$</code>，然后按下<code>Enter</code>键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：<br>$$<br>V1×V2=∣∣ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 ∣∣V1×V2=|ijk ∂X∂u∂Y∂u0 ∂X∂v∂Y∂v0 |<br>$$<br>在Markdown源文件中，数学的公式块是通过利用<code>$$</code>标记借用<em>LaTeX</em>语言来实现的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">$$<br>\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 =  \\begin&#123;vmatrix&#125; <br>\\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\<br>\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\<br>\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp;  \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\<br>\\end&#123;vmatrix&#125;<br>$$<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>Typora不能使用HTML元素，但是Typora可以解析和编译非常有限的HTML元素，作为Markdown功能的补充，这些有限的功能包括：</p>\n<ul>\n<li>下划线： <code>&lt;u&gt;underline&lt;/u&gt;</code></li>\n<li>图片：<code>&lt;img src=&quot;http://www.w3.org/html/logo/img/mark-word-icon.png&quot; width=&quot;200px&quot; /&gt;</code>（HTML标签中的<code>width</code>, <code>height</code> 以及属于样式的<code>width</code>, <code>height</code>, <code>zoom</code>样式可以被识别和应用。）</li>\n<li>评论：<code>&lt;!-- This is some comments --&gt;</code></li>\n<li>超链接： <code>&lt;a href=&quot;http://typora.io&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;</code> 。</li>\n</ul>\n<p>大多数这些属性、样式或分类会被忽略。对其他的标签，Typora会将它们以HTML片段的形式表达。</p>\n<h2 id=\"行内嵌数学符号\"><a href=\"#行内嵌数学符号\" class=\"headerlink\" title=\"行内嵌数学符号\"></a>行内嵌数学符号</h2><p>想要使用这个功能，需要在设置面板的 <code>Markdown</code>栏启用它。然后使用<code>$</code>来启动TeX命令，栗如：<code>$\\lim_&#123;x \\to \\infty&#125; \\exp(-x) = 0$</code> 会以LaTeX的命令形式表达出来。</p>\n<p>为了触发行内内嵌数学符号的实时编译你需要：输入<code>$</code>然后按下<code>ESC</code>键之后输入TeX命令，之后就会弹出一个如图所示的工具提示栏：</p>\n<p><a href=\"https://pic3.zhimg.com/v2-4033508b043cad96c59ec4edbca92f36_b.gif\"><img  src=\"https://i.loli.net/2021/11/17/XzrdUwhJGiu689s.gif\"  ><span class=\"image-caption\">img</span></a></p>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>想要使用这个功能，需要在设置面板的 <code>Markdown</code> 栏启动它，之后使用<code>~</code>来修饰下标文本。栗如：</p>\n<p><code>H~2~O</code> 和<code>X~long\\ text~</code> 显示为 H2O 和Xlong text 。</p>\n<p>#### 13.上标</p>\n<p>想要使用这个功能，需要在设置面板的 <code>Markdown</code> 栏启动它，之后使用<code>^</code>来修饰下标文本。栗如：</p>\n<p><code>X^2^</code> 显示为 X2 。</p>\n<h2 id=\"高亮\"><a href=\"#高亮\" class=\"headerlink\" title=\"高亮\"></a>高亮</h2><p>想要使用这个功能，需要在设置面板的<code>Markdown</code> 栏启动它，之后使用<code>==</code>来修饰高亮文本，栗如：</p>\n<p><code>==highlight==</code> 显示为 highlight 。</p>\n"},{"title":"Quasar 中添加 tailwindcss","_content":"\n## Quasar 中添加 tailwindcss \n\n> 踩大坑了，搞了整整一天才研究明白\n\n结果操作是非常简单，但是我把tailwindcss安装文档从vite到next到nuxt都研究了一遍。把tailwind文档研究后，发现是quasar的问题。单纯的引入并不能引入成功。\n\n从quasar的文档从入门开始看仔细研究，一开始以为可以用quasar的启动文件boot，在启动文件引入tailwind的css文件，照样是没有任何作用，我都已经开始怀疑引入的这个**@tailwind**是不是有毛病，quasar识别不了？\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n接着试验用vite去引入tailwind，很容易 直接成功，然后我尝试用quasar引入elementui+，因为elemenui+需要使用app.use()调用，用quasar的boot启动文件是可以调用VUEapp的。但是，tailwind没有默认导出文件！只能import引入css。到底是quasar的问题还是tailwind的问题？\n\n#### 结果来了\n\n在通篇阅读quasar的文档后，在文档的最下角发现了 **应用扩展**\n\n> 应用扩展是一种轻松注入具有各种依赖项、启动文件、模板和自定义逻辑的复杂（或简单）库的方法。 他们可以扩展webpack、`quasar.conf.js`，将外部UI组件紧密耦合到核心，甚至可以通过Quasar CLI注册新命令。 它们可以与`quasar dev`一起运行，并且可以完全访问当前的实时`ctx`（上下文）。\n\n所有应用扩展必须在其名称前加上`quasar-app-extension-`。 该前缀之后的所有内容均被视为其简短别名。 在整个文档中，我们将其称为`ext-id`。\n\n附查找应用扩展网址\n\n[quasar-app-extension - npm search (npmjs.com)](https://www.npmjs.com/search?q=quasar-app-extension)\n\n##### 安装应用扩展\n\n```bash\n$ quasar ext add <ext-id>\n```\n\n##### 查看已安装的应用拓展\n\n```bash\n$ quasar ext\n$ quasar info\n$ cat quasar.extensions.json\n```\n\n##### 更新应用扩展\n\n```bash\n$ quasar ext add <ext-id>\n```\n\n##### 删除应用扩展\n\n```bash\n$ quasar ext remove <ext-id>\n```\n\n#### 然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\n\n[quasar-app-extension-tailwindcss2 - npm (npmjs.com)](https://www.npmjs.com/package/quasar-app-extension-tailwindcss2)\n\n```bash\n$ quasar ext add tailwindcss2\n```\n\n安装完成后会在src目录下创建extensions文件夹\n\n安装的时候会让选择一个前缀，因为quasar里面的类也有很多相似的，怕引起冲突，需要选择一个前缀以保证css样式的类名不会发生冲突\n\n如扩展前缀为 **qa-**\n\n后面的所有tailwind的样式类都需要在前面添加 **qa-**    例:\n\n```html\n<div class=\"qa-p-6 qa-max-w-sm qa-mx-auto qa-bg-white qa-rounded-xl qa-shadow-md qa-flex qa-items-center qa-space-x-4\">\n    <div class=\"qa-flex-shrink-0\">\n      <img class=\"qa-h-12 qa-w-12\" src=\"/favicon.ico\" alt=\"ChitChat Logo\" />\n    </div>\n    <div>\n      <div class=\"qa-text-xl qa-font-medium qa-text-black\">ChitChat</div>\n      <p class=\"qa-text-gray-500\">You have a new message!</p>\n    </div>\n</div>\n```\n\n","source":"_posts/Quasar中添加TailwindCSS.md","raw":"---\ntitle: Quasar 中添加 tailwindcss\n---\n\n## Quasar 中添加 tailwindcss \n\n> 踩大坑了，搞了整整一天才研究明白\n\n结果操作是非常简单，但是我把tailwindcss安装文档从vite到next到nuxt都研究了一遍。把tailwind文档研究后，发现是quasar的问题。单纯的引入并不能引入成功。\n\n从quasar的文档从入门开始看仔细研究，一开始以为可以用quasar的启动文件boot，在启动文件引入tailwind的css文件，照样是没有任何作用，我都已经开始怀疑引入的这个**@tailwind**是不是有毛病，quasar识别不了？\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n接着试验用vite去引入tailwind，很容易 直接成功，然后我尝试用quasar引入elementui+，因为elemenui+需要使用app.use()调用，用quasar的boot启动文件是可以调用VUEapp的。但是，tailwind没有默认导出文件！只能import引入css。到底是quasar的问题还是tailwind的问题？\n\n#### 结果来了\n\n在通篇阅读quasar的文档后，在文档的最下角发现了 **应用扩展**\n\n> 应用扩展是一种轻松注入具有各种依赖项、启动文件、模板和自定义逻辑的复杂（或简单）库的方法。 他们可以扩展webpack、`quasar.conf.js`，将外部UI组件紧密耦合到核心，甚至可以通过Quasar CLI注册新命令。 它们可以与`quasar dev`一起运行，并且可以完全访问当前的实时`ctx`（上下文）。\n\n所有应用扩展必须在其名称前加上`quasar-app-extension-`。 该前缀之后的所有内容均被视为其简短别名。 在整个文档中，我们将其称为`ext-id`。\n\n附查找应用扩展网址\n\n[quasar-app-extension - npm search (npmjs.com)](https://www.npmjs.com/search?q=quasar-app-extension)\n\n##### 安装应用扩展\n\n```bash\n$ quasar ext add <ext-id>\n```\n\n##### 查看已安装的应用拓展\n\n```bash\n$ quasar ext\n$ quasar info\n$ cat quasar.extensions.json\n```\n\n##### 更新应用扩展\n\n```bash\n$ quasar ext add <ext-id>\n```\n\n##### 删除应用扩展\n\n```bash\n$ quasar ext remove <ext-id>\n```\n\n#### 然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\n\n[quasar-app-extension-tailwindcss2 - npm (npmjs.com)](https://www.npmjs.com/package/quasar-app-extension-tailwindcss2)\n\n```bash\n$ quasar ext add tailwindcss2\n```\n\n安装完成后会在src目录下创建extensions文件夹\n\n安装的时候会让选择一个前缀，因为quasar里面的类也有很多相似的，怕引起冲突，需要选择一个前缀以保证css样式的类名不会发生冲突\n\n如扩展前缀为 **qa-**\n\n后面的所有tailwind的样式类都需要在前面添加 **qa-**    例:\n\n```html\n<div class=\"qa-p-6 qa-max-w-sm qa-mx-auto qa-bg-white qa-rounded-xl qa-shadow-md qa-flex qa-items-center qa-space-x-4\">\n    <div class=\"qa-flex-shrink-0\">\n      <img class=\"qa-h-12 qa-w-12\" src=\"/favicon.ico\" alt=\"ChitChat Logo\" />\n    </div>\n    <div>\n      <div class=\"qa-text-xl qa-font-medium qa-text-black\">ChitChat</div>\n      <p class=\"qa-text-gray-500\">You have a new message!</p>\n    </div>\n</div>\n```\n\n","slug":"Quasar中添加TailwindCSS","published":1,"date":"2021-12-28T08:57:35.397Z","updated":"2021-12-28T08:38:13.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxpvna8n0000248i0a45bqiq","content":"<h2 id=\"Quasar-中添加-tailwindcss\"><a href=\"#Quasar-中添加-tailwindcss\" class=\"headerlink\" title=\"Quasar 中添加 tailwindcss\"></a>Quasar 中添加 tailwindcss</h2><blockquote>\n<p>踩大坑了，搞了整整一天才研究明白</p>\n</blockquote>\n<p>结果操作是非常简单，但是我把tailwindcss安装文档从vite到next到nuxt都研究了一遍。把tailwind文档研究后，发现是quasar的问题。单纯的引入并不能引入成功。</p>\n<p>从quasar的文档从入门开始看仔细研究，一开始以为可以用quasar的启动文件boot，在启动文件引入tailwind的css文件，照样是没有任何作用，我都已经开始怀疑引入的这个**@tailwind**是不是有毛病，quasar识别不了？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@tailwind</span> base;<br><span class=\"hljs-keyword\">@tailwind</span> components;<br><span class=\"hljs-keyword\">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure>\n\n<p>接着试验用vite去引入tailwind，很容易 直接成功，然后我尝试用quasar引入elementui+，因为elemenui+需要使用app.use()调用，用quasar的boot启动文件是可以调用VUEapp的。但是，tailwind没有默认导出文件！只能import引入css。到底是quasar的问题还是tailwind的问题？</p>\n<h4 id=\"结果来了\"><a href=\"#结果来了\" class=\"headerlink\" title=\"结果来了\"></a>结果来了</h4><p>在通篇阅读quasar的文档后，在文档的最下角发现了 <strong>应用扩展</strong></p>\n<blockquote>\n<p>应用扩展是一种轻松注入具有各种依赖项、启动文件、模板和自定义逻辑的复杂（或简单）库的方法。 他们可以扩展webpack、<code>quasar.conf.js</code>，将外部UI组件紧密耦合到核心，甚至可以通过Quasar CLI注册新命令。 它们可以与<code>quasar dev</code>一起运行，并且可以完全访问当前的实时<code>ctx</code>（上下文）。</p>\n</blockquote>\n<p>所有应用扩展必须在其名称前加上<code>quasar-app-extension-</code>。 该前缀之后的所有内容均被视为其简短别名。 在整个文档中，我们将其称为<code>ext-id</code>。</p>\n<p>附查找应用扩展网址</p>\n<p><a href=\"https://www.npmjs.com/search?q=quasar-app-extension\">quasar-app-extension - npm search (npmjs.com)</a></p>\n<h5 id=\"安装应用扩展\"><a href=\"#安装应用扩展\" class=\"headerlink\" title=\"安装应用扩展\"></a>安装应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"查看已安装的应用拓展\"><a href=\"#查看已安装的应用拓展\" class=\"headerlink\" title=\"查看已安装的应用拓展\"></a>查看已安装的应用拓展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext<br>$ quasar info<br>$ cat quasar.extensions.json<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"更新应用扩展\"><a href=\"#更新应用扩展\" class=\"headerlink\" title=\"更新应用扩展\"></a>更新应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"删除应用扩展\"><a href=\"#删除应用扩展\" class=\"headerlink\" title=\"删除应用扩展\"></a>删除应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext remove &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\"><a href=\"#然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\" class=\"headerlink\" title=\"然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\"></a>然而这个tailwind就用quasar的扩展，但文档怎么不说？？？</h4><p><a href=\"https://www.npmjs.com/package/quasar-app-extension-tailwindcss2\">quasar-app-extension-tailwindcss2 - npm (npmjs.com)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add tailwindcss2<br></code></pre></td></tr></table></figure>\n\n<p>安装完成后会在src目录下创建extensions文件夹</p>\n<p>安装的时候会让选择一个前缀，因为quasar里面的类也有很多相似的，怕引起冲突，需要选择一个前缀以保证css样式的类名不会发生冲突</p>\n<p>如扩展前缀为 <strong>qa-</strong></p>\n<p>后面的所有tailwind的样式类都需要在前面添加 <strong>qa-</strong>    例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-p-6 qa-max-w-sm qa-mx-auto qa-bg-white qa-rounded-xl qa-shadow-md qa-flex qa-items-center qa-space-x-4&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-flex-shrink-0&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-h-12 qa-w-12&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/favicon.ico&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;ChitChat Logo&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-text-xl qa-font-medium qa-text-black&quot;</span>&gt;</span>ChitChat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-text-gray-500&quot;</span>&gt;</span>You have a new message!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h2 id=\"Quasar-中添加-tailwindcss\"><a href=\"#Quasar-中添加-tailwindcss\" class=\"headerlink\" title=\"Quasar 中添加 tailwindcss\"></a>Quasar 中添加 tailwindcss</h2><blockquote>\n<p>踩大坑了，搞了整整一天才研究明白</p>\n</blockquote>\n<p>结果操作是非常简单，但是我把tailwindcss安装文档从vite到next到nuxt都研究了一遍。把tailwind文档研究后，发现是quasar的问题。单纯的引入并不能引入成功。</p>\n<p>从quasar的文档从入门开始看仔细研究，一开始以为可以用quasar的启动文件boot，在启动文件引入tailwind的css文件，照样是没有任何作用，我都已经开始怀疑引入的这个**@tailwind**是不是有毛病，quasar识别不了？</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-keyword\">@tailwind</span> base;<br><span class=\"hljs-keyword\">@tailwind</span> components;<br><span class=\"hljs-keyword\">@tailwind</span> utilities;<br></code></pre></td></tr></table></figure>\n\n<p>接着试验用vite去引入tailwind，很容易 直接成功，然后我尝试用quasar引入elementui+，因为elemenui+需要使用app.use()调用，用quasar的boot启动文件是可以调用VUEapp的。但是，tailwind没有默认导出文件！只能import引入css。到底是quasar的问题还是tailwind的问题？</p>\n<h4 id=\"结果来了\"><a href=\"#结果来了\" class=\"headerlink\" title=\"结果来了\"></a>结果来了</h4><p>在通篇阅读quasar的文档后，在文档的最下角发现了 <strong>应用扩展</strong></p>\n<blockquote>\n<p>应用扩展是一种轻松注入具有各种依赖项、启动文件、模板和自定义逻辑的复杂（或简单）库的方法。 他们可以扩展webpack、<code>quasar.conf.js</code>，将外部UI组件紧密耦合到核心，甚至可以通过Quasar CLI注册新命令。 它们可以与<code>quasar dev</code>一起运行，并且可以完全访问当前的实时<code>ctx</code>（上下文）。</p>\n</blockquote>\n<p>所有应用扩展必须在其名称前加上<code>quasar-app-extension-</code>。 该前缀之后的所有内容均被视为其简短别名。 在整个文档中，我们将其称为<code>ext-id</code>。</p>\n<p>附查找应用扩展网址</p>\n<p><a href=\"https://www.npmjs.com/search?q=quasar-app-extension\">quasar-app-extension - npm search (npmjs.com)</a></p>\n<h5 id=\"安装应用扩展\"><a href=\"#安装应用扩展\" class=\"headerlink\" title=\"安装应用扩展\"></a>安装应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"查看已安装的应用拓展\"><a href=\"#查看已安装的应用拓展\" class=\"headerlink\" title=\"查看已安装的应用拓展\"></a>查看已安装的应用拓展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext<br>$ quasar info<br>$ cat quasar.extensions.json<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"更新应用扩展\"><a href=\"#更新应用扩展\" class=\"headerlink\" title=\"更新应用扩展\"></a>更新应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"删除应用扩展\"><a href=\"#删除应用扩展\" class=\"headerlink\" title=\"删除应用扩展\"></a>删除应用扩展</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext remove &lt;ext-id&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\"><a href=\"#然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\" class=\"headerlink\" title=\"然而这个tailwind就用quasar的扩展，但文档怎么不说？？？\"></a>然而这个tailwind就用quasar的扩展，但文档怎么不说？？？</h4><p><a href=\"https://www.npmjs.com/package/quasar-app-extension-tailwindcss2\">quasar-app-extension-tailwindcss2 - npm (npmjs.com)</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ quasar ext add tailwindcss2<br></code></pre></td></tr></table></figure>\n\n<p>安装完成后会在src目录下创建extensions文件夹</p>\n<p>安装的时候会让选择一个前缀，因为quasar里面的类也有很多相似的，怕引起冲突，需要选择一个前缀以保证css样式的类名不会发生冲突</p>\n<p>如扩展前缀为 <strong>qa-</strong></p>\n<p>后面的所有tailwind的样式类都需要在前面添加 <strong>qa-</strong>    例:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-p-6 qa-max-w-sm qa-mx-auto qa-bg-white qa-rounded-xl qa-shadow-md qa-flex qa-items-center qa-space-x-4&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-flex-shrink-0&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-h-12 qa-w-12&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;/favicon.ico&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;ChitChat Logo&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-text-xl qa-font-medium qa-text-black&quot;</span>&gt;</span>ChitChat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;qa-text-gray-500&quot;</span>&gt;</span>You have a new message!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"flex布局语法","_content":"# flex布局语法\n\n## 一、flex 布局是什么？\n\nFlex是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n\n**任何一个容器** 都可以指定为 Flex 布局。\n\n```css\n.box{\n  display: flex;\n}\n```\n\n**行内元素** 也可以使用 Flex 布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\nWebkit 内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n**注意**，设为 Flex 布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 二、基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-b1144007e4830a72.png?imageMogr2/auto-orient/strip|imageView2/2/w/563/format/webp)\n\n容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n## 三、容器的属性\n\n以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)\n\n> - flex-direction 方向 决定项目的排列方向\n> - flex-wrap 换行\n> - flex-flow 方向和换行的简写\n> - justify-content 主轴对齐方式\n> - align-items 交叉轴对齐方式\n> - align-content 多轴线的对齐方式\n\n### 3.1 flex-direction属性\n\n`flex-direction`属性决定主轴的方向（即项目的排列方向）。\n\n> ```css\n> .box {\n>   flex-direction: row | row-reverse | column | column-reverse;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-c2f97bb8a47d139c.png?imageMogr2/auto-orient/strip|imageView2/2/w/796/format/webp)\n\n它可能有4个值。\n\n> - `row`（默认值）：主轴为水平方向，起点在左端。\n> - `row-reverse`：主轴为水平方向，起点在右端。\n> - `column`：主轴为垂直方向，起点在上沿。\n> - `column-reverse`：主轴为垂直方向，起点在下沿。\n\n### 3.2 flex-wrap属性\n\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-262f5854ece5b1fd.png?imageMogr2/auto-orient/strip|imageView2/2/w/798/format/webp)\n\n> ```css\n> .box{\n>   flex-wrap: nowrap | wrap | wrap-reverse;\n> }\n> ```\n>\n> \n\n它可能取三个值。\n\n（1）`nowrap`（默认）：不换行。会压缩项目的宽度\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-ce8c6f815b5bfc0a.png?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n（2）`wrap`：换行，第一行在上方。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-0701b857c3588b37.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n（3）`wrap-reverse`：换行，第一行在下方。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-0ae21f2bd8af65f8.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n### 3.3 flex-flow\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n> ```css\n> .box {\n>   flex-flow: <flex-direction> || <flex-wrap>;\n> }\n> ```\n>\n> \n\n### 3.4 justify-content属性\n\n`justify-content`属性定义了项目在主轴上的对齐方式。\n\n> ```css\n> .box {\n>   justify-content: flex-start | flex-end | center | space-between | space-around;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-3e78d500eb78a34b.png?imageMogr2/auto-orient/strip|imageView2/2/w/637/format/webp)\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n> - `flex-start`（默认值）：左对齐\n> - `flex-end`：右对齐\n> - `center`： 居中\n> - `space-between`：两端对齐，项目之间的间隔都相等。\n> - `space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n### 3.5 align-items属性\n\n`align-items`属性定义项目在交叉轴上如何对齐。\n\n> ```css\n> .box {\n>   align-items: flex-start | flex-end | center | baseline | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-96b4662bd1da272a.png?imageMogr2/auto-orient/strip|imageView2/2/w/617/format/webp)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n> - `flex-start`：交叉轴的起点对齐。\n> - `flex-end`：交叉轴的终点对齐。\n> - `center`：交叉轴的中点对齐。\n> - `baseline`: 项目的第一行文字的基线对齐。\n> - `stretch`（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n### 3.6 align-content属性\n\n`align-content`属性定义了多根轴线的对齐方式（**一排项目为一根轴线**）。如果项目只有一根轴线，该属性不起作用。\n\n> ```css\n> .box {\n>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-1ca06439bf8f102c.png?imageMogr2/auto-orient/strip|imageView2/2/w/620/format/webp)\n\n该属性可能取6个值。\n\n> - `flex-start`：与交叉轴的起点对齐。\n> - `flex-end`：与交叉轴的终点对齐。\n> - `center`：与交叉轴的中点对齐。\n> - `space-between`：与交叉轴两端对齐，轴线之间的间隔平均分布。\n> - `space-around`：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n> - `stretch`（默认值）：轴线占满整个交叉轴。\n\n## 四、项目的属性\n\n以下6个属性设置在项目上。\n\n> - `order`\n> - `flex-grow`\n> - `flex-shrink`\n> - `flex-basis`\n> - `flex` `flex-grow`, `flex-shrink` 和 `flex-basis`的简写\n> - `align-self`\n\n### 4.1 order属性\n\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n> ```css\n> .item {\n>   order: <integer>;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-034cbd418547ec54.png?imageMogr2/auto-orient/strip|imageView2/2/w/751/format/webp)\n\n### 4.2 flex-grow属性\n\n`flex-grow`属性定义项目的放大比例，默认为`0`，即如果存在剩余空间，也不放大。\n\n> ```css\n> .item {\n>   flex-grow: <number>; /* default 0 */\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-af1be60c6e332220.png?imageMogr2/auto-orient/strip|imageView2/2/w/802/format/webp)\n\n如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n### 4.3 flex-shrink属性\n\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n> ```css\n> .item {\n>   flex-shrink: <number>; /* default 1 */\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-782c37762df70627.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n### 4.4 flex-basis属性\n\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n> ```css\n> .item {\n>   flex-basis: <length> | auto; /* default auto */\n> }\n> ```\n>\n> \n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间。\n\n### 4.5 flex属性\n\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n\n> ```css\n> .item {\n>   flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n> }\n> ```\n>\n> \n\n该属性有两个快捷值：`auto` (`1 1 auto`) 和 none (`0 0 auto`)。\n\n**建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。**\n\n### 4.6 align-self属性\n\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n> ```css\n> .item {\n>   align-self: auto | flex-start | flex-end | center | baseline | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-8bc809b9bbb4d3ef.png?imageMogr2/auto-orient/strip|imageView2/2/w/743/format/webp)\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。","source":"_posts/flex布局.md","raw":"---\ntitle: flex布局语法\n---\n# flex布局语法\n\n## 一、flex 布局是什么？\n\nFlex是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n\n**任何一个容器** 都可以指定为 Flex 布局。\n\n```css\n.box{\n  display: flex;\n}\n```\n\n**行内元素** 也可以使用 Flex 布局。\n\n```css\n.box{\n  display: inline-flex;\n}\n```\n\nWebkit 内核的浏览器，必须加上`-webkit`前缀。\n\n```css\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n```\n\n**注意**，设为 Flex 布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n## 二、基本概念\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-b1144007e4830a72.png?imageMogr2/auto-orient/strip|imageView2/2/w/563/format/webp)\n\n容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n## 三、容器的属性\n\n以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)\n\n> - flex-direction 方向 决定项目的排列方向\n> - flex-wrap 换行\n> - flex-flow 方向和换行的简写\n> - justify-content 主轴对齐方式\n> - align-items 交叉轴对齐方式\n> - align-content 多轴线的对齐方式\n\n### 3.1 flex-direction属性\n\n`flex-direction`属性决定主轴的方向（即项目的排列方向）。\n\n> ```css\n> .box {\n>   flex-direction: row | row-reverse | column | column-reverse;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-c2f97bb8a47d139c.png?imageMogr2/auto-orient/strip|imageView2/2/w/796/format/webp)\n\n它可能有4个值。\n\n> - `row`（默认值）：主轴为水平方向，起点在左端。\n> - `row-reverse`：主轴为水平方向，起点在右端。\n> - `column`：主轴为垂直方向，起点在上沿。\n> - `column-reverse`：主轴为垂直方向，起点在下沿。\n\n### 3.2 flex-wrap属性\n\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-262f5854ece5b1fd.png?imageMogr2/auto-orient/strip|imageView2/2/w/798/format/webp)\n\n> ```css\n> .box{\n>   flex-wrap: nowrap | wrap | wrap-reverse;\n> }\n> ```\n>\n> \n\n它可能取三个值。\n\n（1）`nowrap`（默认）：不换行。会压缩项目的宽度\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-ce8c6f815b5bfc0a.png?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n（2）`wrap`：换行，第一行在上方。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-0701b857c3588b37.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n（3）`wrap-reverse`：换行，第一行在下方。\n\n![img](https://upload-images.jianshu.io/upload_images/13944531-0ae21f2bd8af65f8.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n### 3.3 flex-flow\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n> ```css\n> .box {\n>   flex-flow: <flex-direction> || <flex-wrap>;\n> }\n> ```\n>\n> \n\n### 3.4 justify-content属性\n\n`justify-content`属性定义了项目在主轴上的对齐方式。\n\n> ```css\n> .box {\n>   justify-content: flex-start | flex-end | center | space-between | space-around;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-3e78d500eb78a34b.png?imageMogr2/auto-orient/strip|imageView2/2/w/637/format/webp)\n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。\n\n> - `flex-start`（默认值）：左对齐\n> - `flex-end`：右对齐\n> - `center`： 居中\n> - `space-between`：两端对齐，项目之间的间隔都相等。\n> - `space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n### 3.5 align-items属性\n\n`align-items`属性定义项目在交叉轴上如何对齐。\n\n> ```css\n> .box {\n>   align-items: flex-start | flex-end | center | baseline | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-96b4662bd1da272a.png?imageMogr2/auto-orient/strip|imageView2/2/w/617/format/webp)\n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。\n\n> - `flex-start`：交叉轴的起点对齐。\n> - `flex-end`：交叉轴的终点对齐。\n> - `center`：交叉轴的中点对齐。\n> - `baseline`: 项目的第一行文字的基线对齐。\n> - `stretch`（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n### 3.6 align-content属性\n\n`align-content`属性定义了多根轴线的对齐方式（**一排项目为一根轴线**）。如果项目只有一根轴线，该属性不起作用。\n\n> ```css\n> .box {\n>   align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-1ca06439bf8f102c.png?imageMogr2/auto-orient/strip|imageView2/2/w/620/format/webp)\n\n该属性可能取6个值。\n\n> - `flex-start`：与交叉轴的起点对齐。\n> - `flex-end`：与交叉轴的终点对齐。\n> - `center`：与交叉轴的中点对齐。\n> - `space-between`：与交叉轴两端对齐，轴线之间的间隔平均分布。\n> - `space-around`：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n> - `stretch`（默认值）：轴线占满整个交叉轴。\n\n## 四、项目的属性\n\n以下6个属性设置在项目上。\n\n> - `order`\n> - `flex-grow`\n> - `flex-shrink`\n> - `flex-basis`\n> - `flex` `flex-grow`, `flex-shrink` 和 `flex-basis`的简写\n> - `align-self`\n\n### 4.1 order属性\n\n`order`属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n\n> ```css\n> .item {\n>   order: <integer>;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-034cbd418547ec54.png?imageMogr2/auto-orient/strip|imageView2/2/w/751/format/webp)\n\n### 4.2 flex-grow属性\n\n`flex-grow`属性定义项目的放大比例，默认为`0`，即如果存在剩余空间，也不放大。\n\n> ```css\n> .item {\n>   flex-grow: <number>; /* default 0 */\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-af1be60c6e332220.png?imageMogr2/auto-orient/strip|imageView2/2/w/802/format/webp)\n\n如果所有项目的`flex-grow`属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。\n\n### 4.3 flex-shrink属性\n\n`flex-shrink`属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n\n> ```css\n> .item {\n>   flex-shrink: <number>; /* default 1 */\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-782c37762df70627.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/700/format/webp)\n\n如果所有项目的`flex-shrink`属性都为1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为0，其他项目都为1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n### 4.4 flex-basis属性\n\n`flex-basis`属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n> ```css\n> .item {\n>   flex-basis: <length> | auto; /* default auto */\n> }\n> ```\n>\n> \n\n它可以设为跟`width`或`height`属性一样的值（比如350px），则项目将占据固定空间。\n\n### 4.5 flex属性\n\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n\n> ```css\n> .item {\n>   flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n> }\n> ```\n>\n> \n\n该属性有两个快捷值：`auto` (`1 1 auto`) 和 none (`0 0 auto`)。\n\n**建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。**\n\n### 4.6 align-self属性\n\n`align-self`属性允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n> ```css\n> .item {\n>   align-self: auto | flex-start | flex-end | center | baseline | stretch;\n> }\n> ```\n>\n> \n\n![img](https://upload-images.jianshu.io/upload_images/13944531-8bc809b9bbb4d3ef.png?imageMogr2/auto-orient/strip|imageView2/2/w/743/format/webp)\n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。","slug":"flex布局","published":1,"date":"2021-11-17T02:38:00.156Z","updated":"2021-11-17T02:44:12.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxpvna8u0001248ia1yub1um","content":"<h1 id=\"flex布局语法\"><a href=\"#flex布局语法\" class=\"headerlink\" title=\"flex布局语法\"></a>flex布局语法</h1><h2 id=\"一、flex-布局是什么？\"><a href=\"#一、flex-布局是什么？\" class=\"headerlink\" title=\"一、flex 布局是什么？\"></a>一、flex 布局是什么？</h2><p>Flex是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p><strong>任何一个容器</strong> 都可以指定为 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>行内元素</strong> 也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: inline-flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: -webkit-flex; <span class=\"hljs-comment\">/* Safari */</span><br>  <span class=\"hljs-attribute\">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2 id=\"二、基本概念\"><a href=\"#二、基本概念\" class=\"headerlink\" title=\"二、基本概念\"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-b1144007e4830a72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/563/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h2 id=\"三、容器的属性\"><a href=\"#三、容器的属性\" class=\"headerlink\" title=\"三、容器的属性\"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)</p>\n<blockquote>\n<ul>\n<li>flex-direction 方向 决定项目的排列方向</li>\n<li>flex-wrap 换行</li>\n<li>flex-flow 方向和换行的简写</li>\n<li>justify-content 主轴对齐方式</li>\n<li>align-items 交叉轴对齐方式</li>\n<li>align-content 多轴线的对齐方式</li>\n</ul>\n</blockquote>\n<h3 id=\"3-1-flex-direction属性\"><a href=\"#3-1-flex-direction属性\" class=\"headerlink\" title=\"3.1 flex-direction属性\"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-c2f97bb8a47d139c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能有4个值。</p>\n<blockquote>\n<ul>\n<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>\n<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>\n<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>\n<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-2-flex-wrap属性\"><a href=\"#3-2-flex-wrap属性\" class=\"headerlink\" title=\"3.2 flex-wrap属性\"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-262f5854ece5b1fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>它可能取三个值。</p>\n<p>（1）<code>nowrap</code>（默认）：不换行。会压缩项目的宽度</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-ce8c6f815b5bfc0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>（2）<code>wrap</code>：换行，第一行在上方。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-0701b857c3588b37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-0ae21f2bd8af65f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<h3 id=\"3-3-flex-flow\"><a href=\"#3-3-flex-flow\" class=\"headerlink\" title=\"3.3 flex-flow\"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"3-4-justify-content属性\"><a href=\"#3-4-justify-content属性\" class=\"headerlink\" title=\"3.4 justify-content属性\"></a>3.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-3e78d500eb78a34b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>（默认值）：左对齐</li>\n<li><code>flex-end</code>：右对齐</li>\n<li><code>center</code>： 居中</li>\n<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>\n<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-5-align-items属性\"><a href=\"#3-5-align-items属性\" class=\"headerlink\" title=\"3.5 align-items属性\"></a>3.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-96b4662bd1da272a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/617/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：交叉轴的终点对齐。</li>\n<li><code>center</code>：交叉轴的中点对齐。</li>\n<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>\n<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-6-align-content属性\"><a href=\"#3-6-align-content属性\" class=\"headerlink\" title=\"3.6 align-content属性\"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式（<strong>一排项目为一根轴线</strong>）。如果项目只有一根轴线，该属性不起作用。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-1ca06439bf8f102c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>该属性可能取6个值。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：与交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：与交叉轴的终点对齐。</li>\n<li><code>center</code>：与交叉轴的中点对齐。</li>\n<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n</blockquote>\n<h2 id=\"四、项目的属性\"><a href=\"#四、项目的属性\" class=\"headerlink\" title=\"四、项目的属性\"></a>四、项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<blockquote>\n<ul>\n<li><code>order</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex</code> <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写</li>\n<li><code>align-self</code></li>\n</ul>\n</blockquote>\n<h3 id=\"4-1-order属性\"><a href=\"#4-1-order属性\" class=\"headerlink\" title=\"4.1 order属性\"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">order</span>: &lt;integer&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-034cbd418547ec54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<h3 id=\"4-2-flex-grow属性\"><a href=\"#4-2-flex-grow属性\" class=\"headerlink\" title=\"4.2 flex-grow属性\"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 0 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-af1be60c6e332220.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/802/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"4-3-flex-shrink属性\"><a href=\"#4-3-flex-shrink属性\" class=\"headerlink\" title=\"4.3 flex-shrink属性\"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-782c37762df70627.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"4-4-flex-basis属性\"><a href=\"#4-4-flex-basis属性\" class=\"headerlink\" title=\"4.4 flex-basis属性\"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"hljs-comment\">/* default auto */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"4-5-flex属性\"><a href=\"#4-5-flex属性\" class=\"headerlink\" title=\"4.5 flex属性\"></a>4.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex</span>: none | [ &lt;<span class=\"hljs-string\">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class=\"hljs-string\">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class=\"hljs-string\">&#x27;flex-basis&#x27;</span>&gt; ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>\n<p><strong>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</strong></p>\n<h3 id=\"4-6-align-self属性\"><a href=\"#4-6-align-self属性\" class=\"headerlink\" title=\"4.6 align-self属性\"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-8bc809b9bbb4d3ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/743/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"深圳日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"flex布局语法\"><a href=\"#flex布局语法\" class=\"headerlink\" title=\"flex布局语法\"></a>flex布局语法</h1><h2 id=\"一、flex-布局是什么？\"><a href=\"#一、flex-布局是什么？\" class=\"headerlink\" title=\"一、flex 布局是什么？\"></a>一、flex 布局是什么？</h2><p>Flex是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p><strong>任何一个容器</strong> 都可以指定为 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>行内元素</strong> 也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: inline-flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">display</span>: -webkit-flex; <span class=\"hljs-comment\">/* Safari */</span><br>  <span class=\"hljs-attribute\">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h2 id=\"二、基本概念\"><a href=\"#二、基本概念\" class=\"headerlink\" title=\"二、基本概念\"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-b1144007e4830a72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/563/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>容器默认存在两根轴：水平的主轴（或x轴）（main axis）和垂直的交叉轴（或y轴）（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h2 id=\"三、容器的属性\"><a href=\"#三、容器的属性\" class=\"headerlink\" title=\"三、容器的属性\"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。(即设置在 display: flex; 的元素上)</p>\n<blockquote>\n<ul>\n<li>flex-direction 方向 决定项目的排列方向</li>\n<li>flex-wrap 换行</li>\n<li>flex-flow 方向和换行的简写</li>\n<li>justify-content 主轴对齐方式</li>\n<li>align-items 交叉轴对齐方式</li>\n<li>align-content 多轴线的对齐方式</li>\n</ul>\n</blockquote>\n<h3 id=\"3-1-flex-direction属性\"><a href=\"#3-1-flex-direction属性\" class=\"headerlink\" title=\"3.1 flex-direction属性\"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-c2f97bb8a47d139c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能有4个值。</p>\n<blockquote>\n<ul>\n<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>\n<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>\n<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>\n<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-2-flex-wrap属性\"><a href=\"#3-2-flex-wrap属性\" class=\"headerlink\" title=\"3.2 flex-wrap属性\"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-262f5854ece5b1fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/798/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;<br>  <span class=\"hljs-attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>它可能取三个值。</p>\n<p>（1）<code>nowrap</code>（默认）：不换行。会压缩项目的宽度</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-ce8c6f815b5bfc0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>（2）<code>wrap</code>：换行，第一行在上方。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-0701b857c3588b37.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-0ae21f2bd8af65f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<h3 id=\"3-3-flex-flow\"><a href=\"#3-3-flex-flow\" class=\"headerlink\" title=\"3.3 flex-flow\"></a>3.3 flex-flow</h3><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"3-4-justify-content属性\"><a href=\"#3-4-justify-content属性\" class=\"headerlink\" title=\"3.4 justify-content属性\"></a>3.4 justify-content属性</h3><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-3e78d500eb78a34b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>（默认值）：左对齐</li>\n<li><code>flex-end</code>：右对齐</li>\n<li><code>center</code>： 居中</li>\n<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>\n<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-5-align-items属性\"><a href=\"#3-5-align-items属性\" class=\"headerlink\" title=\"3.5 align-items属性\"></a>3.5 align-items属性</h3><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-96b4662bd1da272a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/617/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：交叉轴的终点对齐。</li>\n<li><code>center</code>：交叉轴的中点对齐。</li>\n<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>\n<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n</blockquote>\n<h3 id=\"3-6-align-content属性\"><a href=\"#3-6-align-content属性\" class=\"headerlink\" title=\"3.6 align-content属性\"></a>3.6 align-content属性</h3><p><code>align-content</code>属性定义了多根轴线的对齐方式（<strong>一排项目为一根轴线</strong>）。如果项目只有一根轴线，该属性不起作用。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span> &#123;<br>  <span class=\"hljs-attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-1ca06439bf8f102c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>该属性可能取6个值。</p>\n<blockquote>\n<ul>\n<li><code>flex-start</code>：与交叉轴的起点对齐。</li>\n<li><code>flex-end</code>：与交叉轴的终点对齐。</li>\n<li><code>center</code>：与交叉轴的中点对齐。</li>\n<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n</blockquote>\n<h2 id=\"四、项目的属性\"><a href=\"#四、项目的属性\" class=\"headerlink\" title=\"四、项目的属性\"></a>四、项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<blockquote>\n<ul>\n<li><code>order</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex</code> <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写</li>\n<li><code>align-self</code></li>\n</ul>\n</blockquote>\n<h3 id=\"4-1-order属性\"><a href=\"#4-1-order属性\" class=\"headerlink\" title=\"4.1 order属性\"></a>4.1 order属性</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">order</span>: &lt;integer&gt;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-034cbd418547ec54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/751/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<h3 id=\"4-2-flex-grow属性\"><a href=\"#4-2-flex-grow属性\" class=\"headerlink\" title=\"4.2 flex-grow属性\"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 0 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-af1be60c6e332220.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/802/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"4-3-flex-shrink属性\"><a href=\"#4-3-flex-shrink属性\" class=\"headerlink\" title=\"4.3 flex-shrink属性\"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 1 */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-782c37762df70627.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"4-4-flex-basis属性\"><a href=\"#4-4-flex-basis属性\" class=\"headerlink\" title=\"4.4 flex-basis属性\"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"hljs-comment\">/* default auto */</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"4-5-flex属性\"><a href=\"#4-5-flex属性\" class=\"headerlink\" title=\"4.5 flex属性\"></a>4.5 flex属性</h3><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">flex</span>: none | [ &lt;<span class=\"hljs-string\">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class=\"hljs-string\">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class=\"hljs-string\">&#x27;flex-basis&#x27;</span>&gt; ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>\n<p><strong>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</strong></p>\n<h3 id=\"4-6-align-self属性\"><a href=\"#4-6-align-self属性\" class=\"headerlink\" title=\"4.6 align-self属性\"></a>4.6 align-self属性</h3><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>\n<blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;<br>  <span class=\"hljs-attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p><img  src=\"https://upload-images.jianshu.io/upload_images/13944531-8bc809b9bbb4d3ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/743/format/webp\"  ><span class=\"image-caption\">img</span></p>\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n"},{"title":"CSS教程技巧","_content":"\n# CSS教程技巧\n\n## Flex 布局教程：语法篇\n\n[http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html(opens new window)](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n## CSS Grid 网格布局教程\n\n[http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html(opens new window)](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)\n\n## 只要一行代码，实现五种 CSS 经典布局\n\n[http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html(opens new window)](http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html)\n\n- 空间居中布局\n\n  > 不管容器的大小，项目总是占据中心点\n\n- 并列式布局\n\n  > 多个项目并列，如果宽度不够，放不下的项目就自动折行\n\n- 两栏式布局\n\n  > 一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄\n\n- 三明治布局\n\n  > 页面在垂直方向上，分成三部分：页眉、内容区、页脚。\n\n- 圣杯布局\n\n  > 最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。","source":"_posts/CSS教程技巧.md","raw":"---\ntitle: CSS教程技巧\ncategories:  #设置分类\n- css\n---\n\n# CSS教程技巧\n\n## Flex 布局教程：语法篇\n\n[http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html(opens new window)](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n## CSS Grid 网格布局教程\n\n[http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html(opens new window)](http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html)\n\n## 只要一行代码，实现五种 CSS 经典布局\n\n[http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html(opens new window)](http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html)\n\n- 空间居中布局\n\n  > 不管容器的大小，项目总是占据中心点\n\n- 并列式布局\n\n  > 多个项目并列，如果宽度不够，放不下的项目就自动折行\n\n- 两栏式布局\n\n  > 一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄\n\n- 三明治布局\n\n  > 页面在垂直方向上，分成三部分：页眉、内容区、页脚。\n\n- 圣杯布局\n\n  > 最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。","slug":"CSS教程技巧","published":1,"date":"2021-12-31T02:07:16.900Z","updated":"2021-12-31T02:04:40.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6yt0000ow8ic6xf68bl","content":"<h1 id=\"CSS教程技巧\"><a href=\"#CSS教程技巧\" class=\"headerlink\" title=\"CSS教程技巧\"></a>CSS教程技巧</h1><h2 id=\"Flex-布局教程：语法篇\"><a href=\"#Flex-布局教程：语法篇\" class=\"headerlink\" title=\"Flex 布局教程：语法篇\"></a>Flex 布局教程：语法篇</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html(opens new window)</a></p>\n<h2 id=\"CSS-Grid-网格布局教程\"><a href=\"#CSS-Grid-网格布局教程\" class=\"headerlink\" title=\"CSS Grid 网格布局教程\"></a>CSS Grid 网格布局教程</h2><p><a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html(opens new window)</a></p>\n<h2 id=\"只要一行代码，实现五种-CSS-经典布局\"><a href=\"#只要一行代码，实现五种-CSS-经典布局\" class=\"headerlink\" title=\"只要一行代码，实现五种 CSS 经典布局\"></a>只要一行代码，实现五种 CSS 经典布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html\">http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html(opens new window)</a></p>\n<ul>\n<li><p>空间居中布局</p>\n<blockquote>\n<p>不管容器的大小，项目总是占据中心点</p>\n</blockquote>\n</li>\n<li><p>并列式布局</p>\n<blockquote>\n<p>多个项目并列，如果宽度不够，放不下的项目就自动折行</p>\n</blockquote>\n</li>\n<li><p>两栏式布局</p>\n<blockquote>\n<p>一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄</p>\n</blockquote>\n</li>\n<li><p>三明治布局</p>\n<blockquote>\n<p>页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>\n</blockquote>\n</li>\n<li><p>圣杯布局</p>\n<blockquote>\n<p>最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"CSS教程技巧\"><a href=\"#CSS教程技巧\" class=\"headerlink\" title=\"CSS教程技巧\"></a>CSS教程技巧</h1><h2 id=\"Flex-布局教程：语法篇\"><a href=\"#Flex-布局教程：语法篇\" class=\"headerlink\" title=\"Flex 布局教程：语法篇\"></a>Flex 布局教程：语法篇</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html(opens new window)</a></p>\n<h2 id=\"CSS-Grid-网格布局教程\"><a href=\"#CSS-Grid-网格布局教程\" class=\"headerlink\" title=\"CSS Grid 网格布局教程\"></a>CSS Grid 网格布局教程</h2><p><a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html(opens new window)</a></p>\n<h2 id=\"只要一行代码，实现五种-CSS-经典布局\"><a href=\"#只要一行代码，实现五种-CSS-经典布局\" class=\"headerlink\" title=\"只要一行代码，实现五种 CSS 经典布局\"></a>只要一行代码，实现五种 CSS 经典布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html\">http://www.ruanyifeng.com/blog/2020/08/five-css-layouts-in-one-line.html(opens new window)</a></p>\n<ul>\n<li><p>空间居中布局</p>\n<blockquote>\n<p>不管容器的大小，项目总是占据中心点</p>\n</blockquote>\n</li>\n<li><p>并列式布局</p>\n<blockquote>\n<p>多个项目并列，如果宽度不够，放不下的项目就自动折行</p>\n</blockquote>\n</li>\n<li><p>两栏式布局</p>\n<blockquote>\n<p>一个边栏，一个主栏。边栏始终存在，主栏根据设备宽度，变宽或者变窄</p>\n</blockquote>\n</li>\n<li><p>三明治布局</p>\n<blockquote>\n<p>页面在垂直方向上，分成三部分：页眉、内容区、页脚。</p>\n</blockquote>\n</li>\n<li><p>圣杯布局</p>\n<blockquote>\n<p>最常用的布局，所以被比喻为圣杯。它将页面分成五个部分，除了页眉和页脚，内容区分成左边栏、主栏、右边栏。</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"CSS3 animation动画","_content":"\n# CSS3之animation动画\n\n```html\n<html>\n  <div class=\"animationBox\">\n    <div class=\"rotate\">旋转动画1</div>\n    <div class=\"play\">\n      <div class=\"img\">旋转动画2</div>\n      <span><p class=\"p2\"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class=\"p2\"></p></span>\n    </div>\n    <div class=\"elasticity\">弹性动画</div>\n    <div class=\"elasticity2\">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationBox{overflow: hidden;}\n  .animationBox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationBox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s; \n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n  \n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    /* 参数说明\n      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画\n    */\n    animation: elasticity 1s linear 2s infinite\n  }\n  \n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n  \n\n  .elasticity2{\n    /**\n    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等\n    X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大\n    直线：linear，即cubic-bezier(0,0,1,1)\n\n    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n      */\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n```\n\n### 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：[https://cubic-bezier.com/#.17,.67,.83,.67(opens new window)](https://cubic-bezier.com/#.17,.67,.83,.67)\n\n> 参考：https://www.w3school.com.cn/css3/index.asp","source":"_posts/CSS3之animation动画.md","raw":"---\ntitle: CSS3 animation动画\ncategories:  #设置分类\n- css\n---\n\n# CSS3之animation动画\n\n```html\n<html>\n  <div class=\"animationBox\">\n    <div class=\"rotate\">旋转动画1</div>\n    <div class=\"play\">\n      <div class=\"img\">旋转动画2</div>\n      <span><p class=\"p2\"></p></span>\n      <span><p></p></span>\n      <span><p></p></span>\n      <span><p class=\"p2\"></p></span>\n    </div>\n    <div class=\"elasticity\">弹性动画</div>\n    <div class=\"elasticity2\">曲线弹性</div>\n  </div>\n</html>\n\n<style>\n  .animationBox{overflow: hidden;}\n  .animationBox>div{\n    width: 100px;height: 100px;background: #eee;border-radius: 50%;text-align: center;line-height: 100px;margin: 30px;float:left;\n  }\n  .rotate{\n    animation: rotate 5s linear infinite\n  }\n  .rotate:hover{ animation-play-state: paused}\n  @keyframes rotate {\n    0%{transform: rotate(0);}\n  100%{transform: rotate(360deg);}\n  }\n  .animationBox>.play {\n    position: relative;\n    margin: 50px 30px;\n    background:none;\n  }\n  .play .img{\n    position: absolute;\n    top: 0;\n    left:0;\n    z-index: 1;\n    width: 100px;height: 100px; background: #eee;\n    border-radius: 50%;\n\n    animation: rotate 5s linear infinite\n  }\n  .play span {\n    position: absolute;\n    top: 1px;\n    left:1px;\n    z-index: 0;\n    display: block;\n    width: 96px;\n    height: 96px;\n    border: 1px solid #999;\n    border-radius: 50%;\n  }\n  .play span p{display: block;width: 4px;height: 4px;background: #000;margin: -2px 0 0 50%;border-radius: 50%;opacity: 0.5;}\n  .play span .p2{margin: 50% 0 0 -2px;}\n  .play span{\n    animation: wave 5s linear infinite\n  }\n  .play>span:nth-child(3){\n    /* 延迟时间 */\n    animation-delay:1s; \n  }\n  .play>span:nth-child(4){\n    animation-delay:2.2s;\n  }\n  .play>span:nth-child(5){\n    animation-delay:3.8s;\n  }\n  \n  @keyframes wave {\n    0%\n    {\n      transform:scale(1) rotate(360deg);\n      opacity: 0.8;\n    }\n  100%\n    {\n      transform:scale(1.8) rotate(0deg);\n      opacity: 0;\n    }\n  }\n\n\n  .elasticity{\n    /* 参数说明\n      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画\n    */\n    animation: elasticity 1s linear 2s infinite\n  }\n  \n  @keyframes elasticity{\n    0%{\n      transform: scale(0);\n    }\n    60%{\n      transform: scale(1.1);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n  \n\n  .elasticity2{\n    /**\n    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等\n    X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大\n    直线：linear，即cubic-bezier(0,0,1,1)\n\n    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n      */\n    animation: elasticity2 1s cubic-bezier(.39,.62,.74,1.39) 2s infinite\n  }\n  @keyframes elasticity2{\n    0%{\n      transform: scale(0);\n    }\n    90%{\n      transform: scale(1);\n    }\n  }\n</style>\n\n```\n\n### 贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：[https://cubic-bezier.com/#.17,.67,.83,.67(opens new window)](https://cubic-bezier.com/#.17,.67,.83,.67)\n\n> 参考：https://www.w3school.com.cn/css3/index.asp","slug":"CSS3之animation动画","published":1,"date":"2021-12-31T02:07:16.893Z","updated":"2021-12-31T02:06:10.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zg0001ow8icbhk6b4c","content":"<h1 id=\"CSS3之animation动画\"><a href=\"#CSS3之animation动画\" class=\"headerlink\" title=\"CSS3之animation动画\"></a>CSS3之animation动画</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;animationBox&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rotate&quot;</span>&gt;</span>旋转动画1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;play&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span>旋转动画2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;elasticity&quot;</span>&gt;</span>弹性动画<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;elasticity2&quot;</span>&gt;</span>曲线弹性<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&#123;<span class=\"hljs-attribute\">overflow</span>: hidden;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&gt;<span class=\"hljs-selector-tag\">div</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eee</span>;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">text-align</span>: center;<span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span>;<span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.rotate</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: rotate <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.rotate</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123; <span class=\"hljs-attribute\">animation-play-state</span>: paused&#125;</span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> rotate &#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0</span>);&#125;</span><br><span class=\"css\">  <span class=\"hljs-number\">100%</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">360deg</span>);&#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&gt;<span class=\"hljs-selector-class\">.play</span> &#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">background</span>:none;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-class\">.img</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eee</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: rotate <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> &#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">1px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">1px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">96px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">96px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#999</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> <span class=\"hljs-selector-tag\">p</span>&#123;<span class=\"hljs-attribute\">display</span>: block;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">4px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">4px</span>;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;<span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.5</span>;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> <span class=\"hljs-selector-class\">.p2</span>&#123;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">2px</span>;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: wave <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">3</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/* 延迟时间 */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">1s</span>; </span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">4</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">2.2s</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">5</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">3.8s</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> wave &#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span></span><br><span class=\"css\">    &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>:<span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">360deg</span>);</span><br><span class=\"css\">      <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.8</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  <span class=\"hljs-number\">100%</span></span><br><span class=\"css\">    &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>:<span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.8</span>) <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0deg</span>);</span><br><span class=\"css\">      <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\"></span><br><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.elasticity</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/* 参数说明</span></span><br><span class=\"hljs-comment\"><span class=\"css\">      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: elasticity <span class=\"hljs-number\">1s</span> linear <span class=\"hljs-number\">2s</span> infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> elasticity&#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">60%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">90%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.elasticity2</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/**</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</span></span><br><span class=\"hljs-comment\"><span class=\"css\"></span></span><br><span class=\"hljs-comment\"><span class=\"css\">    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    直线：linear，即cubic-bezier(0,0,1,1)</span></span><br><span class=\"hljs-comment\"><span class=\"css\"></span></span><br><span class=\"hljs-comment\"><span class=\"css\">    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67</span></span><br><span class=\"hljs-comment\"><span class=\"css\">      */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: elasticity2 <span class=\"hljs-number\">1s</span> <span class=\"hljs-built_in\">cubic-bezier</span>(.<span class=\"hljs-number\">39</span>,.<span class=\"hljs-number\">62</span>,.<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">1.39</span>) <span class=\"hljs-number\">2s</span> infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> elasticity2&#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">90%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\"><a href=\"#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\" class=\"headerlink\" title=\"贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\"></a>贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>\n<p>贝塞尔曲线在线工具：<a href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67(opens new window)</a></p>\n<blockquote>\n<p>参考：<a href=\"https://www.w3school.com.cn/css3/index.asp\">https://www.w3school.com.cn/css3/index.asp</a></p>\n</blockquote>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"CSS3之animation动画\"><a href=\"#CSS3之animation动画\" class=\"headerlink\" title=\"CSS3之animation动画\"></a>CSS3之animation动画</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;animationBox&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;rotate&quot;</span>&gt;</span>旋转动画1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;play&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span>旋转动画2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;elasticity&quot;</span>&gt;</span>弹性动画<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;elasticity2&quot;</span>&gt;</span>曲线弹性<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&#123;<span class=\"hljs-attribute\">overflow</span>: hidden;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&gt;<span class=\"hljs-selector-tag\">div</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eee</span>;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">text-align</span>: center;<span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span>;<span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.rotate</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: rotate <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.rotate</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123; <span class=\"hljs-attribute\">animation-play-state</span>: paused&#125;</span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> rotate &#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0</span>);&#125;</span><br><span class=\"css\">  <span class=\"hljs-number\">100%</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">360deg</span>);&#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.animationBox</span>&gt;<span class=\"hljs-selector-class\">.play</span> &#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">30px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">background</span>:none;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-class\">.img</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eee</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"css\"></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: rotate <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> &#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">position</span>: absolute;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">1px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">1px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">96px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">96px</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#999</span>;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> <span class=\"hljs-selector-tag\">p</span>&#123;<span class=\"hljs-attribute\">display</span>: block;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">4px</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">4px</span>;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;<span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;<span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.5</span>;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span> <span class=\"hljs-selector-class\">.p2</span>&#123;<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">2px</span>;&#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span> <span class=\"hljs-selector-tag\">span</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: wave <span class=\"hljs-number\">5s</span> linear infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">3</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/* 延迟时间 */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">1s</span>; </span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">4</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">2.2s</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.play</span>&gt;<span class=\"hljs-selector-tag\">span</span><span class=\"hljs-selector-pseudo\">:nth-child</span>(<span class=\"hljs-number\">5</span>)&#123;</span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation-delay</span>:<span class=\"hljs-number\">3.8s</span>;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> wave &#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span></span><br><span class=\"css\">    &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>:<span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">360deg</span>);</span><br><span class=\"css\">      <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.8</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  <span class=\"hljs-number\">100%</span></span><br><span class=\"css\">    &#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>:<span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.8</span>) <span class=\"hljs-built_in\">rotate</span>(<span class=\"hljs-number\">0deg</span>);</span><br><span class=\"css\">      <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\"></span><br><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.elasticity</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/* 参数说明</span></span><br><span class=\"hljs-comment\"><span class=\"css\">      动画名称 花费时间 贝塞尔曲线 延迟开始时间 播放次数n|infinite  是否反向播放动画</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: elasticity <span class=\"hljs-number\">1s</span> linear <span class=\"hljs-number\">2s</span> infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> elasticity&#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">60%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">90%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  </span><br><span class=\"css\"></span><br><span class=\"css\">  <span class=\"hljs-selector-class\">.elasticity2</span>&#123;</span><br><span class=\"css\">    <span class=\"hljs-comment\">/**</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</span></span><br><span class=\"hljs-comment\"><span class=\"css\"></span></span><br><span class=\"hljs-comment\"><span class=\"css\">    通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大</span></span><br><span class=\"hljs-comment\"><span class=\"css\">    直线：linear，即cubic-bezier(0,0,1,1)</span></span><br><span class=\"hljs-comment\"><span class=\"css\"></span></span><br><span class=\"hljs-comment\"><span class=\"css\">    贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67</span></span><br><span class=\"hljs-comment\"><span class=\"css\">      */</span></span><br><span class=\"css\">    <span class=\"hljs-attribute\">animation</span>: elasticity2 <span class=\"hljs-number\">1s</span> <span class=\"hljs-built_in\">cubic-bezier</span>(.<span class=\"hljs-number\">39</span>,.<span class=\"hljs-number\">62</span>,.<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">1.39</span>) <span class=\"hljs-number\">2s</span> infinite</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\">  <span class=\"hljs-keyword\">@keyframes</span> elasticity2&#123;</span><br><span class=\"css\">    <span class=\"hljs-number\">0%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">    <span class=\"hljs-number\">90%</span>&#123;</span><br><span class=\"css\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);</span><br><span class=\"css\">    &#125;</span><br><span class=\"css\">  &#125;</span><br><span class=\"css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\"><a href=\"#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\" class=\"headerlink\" title=\"贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\"></a>贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>\n<p>贝塞尔曲线在线工具：<a href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67(opens new window)</a></p>\n<blockquote>\n<p>参考：<a href=\"https://www.w3school.com.cn/css3/index.asp\">https://www.w3school.com.cn/css3/index.asp</a></p>\n</blockquote>\n"},{"title":"CSS3 transition过渡","_content":"\n# CSS3  transition过渡\n\nhtml结构\n\n```html\n<div class=\"box1\">  \n  <div class=\"div1\"></div>\n  <div class=\"div2\"></div>\n  <div class=\"div3\"></div>\n</div>\n```\n\n先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡\n\n```css\n.box1>div{\n  /* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/\n  transition: all .3s;\n}\n```\n\n**宽度过渡**\n\n```css\n.div1:hover{width: 150px;}\n```\n\n**背景色过渡**\n\n```css\n.div2:hover{background: #999;}\n```\n\n**按贝塞尔曲线设置的过渡**\n\n```css\n/贝塞尔曲线过渡/\n.div3{transition-timing-function: cubic-bezier(.39,.62,.74,1.39)}\n.div3:hover{transform: translate3d(-25px, -25px, 0)}\n```\n\n### [#](https://xugaoyi.com/pages/02d7f59d98d87409/#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2)贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n参考：https://www.w3school.com.cn/css3/index.asp","source":"_posts/CSS3  transition过渡.md","raw":"---\ntitle: CSS3 transition过渡\ncategories:  #设置分类\n- css\n---\n\n# CSS3  transition过渡\n\nhtml结构\n\n```html\n<div class=\"box1\">  \n  <div class=\"div1\"></div>\n  <div class=\"div2\"></div>\n  <div class=\"div3\"></div>\n</div>\n```\n\n先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡\n\n```css\n.box1>div{\n  /* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/\n  transition: all .3s;\n}\n```\n\n**宽度过渡**\n\n```css\n.div1:hover{width: 150px;}\n```\n\n**背景色过渡**\n\n```css\n.div2:hover{background: #999;}\n```\n\n**按贝塞尔曲线设置的过渡**\n\n```css\n/贝塞尔曲线过渡/\n.div3{transition-timing-function: cubic-bezier(.39,.62,.74,1.39)}\n.div3:hover{transform: translate3d(-25px, -25px, 0)}\n```\n\n### [#](https://xugaoyi.com/pages/02d7f59d98d87409/#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2)贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\n\n通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)\n\n贝塞尔曲线在线工具：https://cubic-bezier.com/#.17,.67,.83,.67\n\n参考：https://www.w3school.com.cn/css3/index.asp","slug":"CSS3  transition过渡","published":1,"date":"2021-12-31T02:07:16.888Z","updated":"2021-12-31T02:05:47.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zp0003ow8i0d20d1u3","content":"<h1 id=\"CSS3-transition过渡\"><a href=\"#CSS3-transition过渡\" class=\"headerlink\" title=\"CSS3  transition过渡\"></a>CSS3  transition过渡</h1><p>html结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;box1&quot;</span>&gt;</span>  <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div3&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box1</span>&gt;<span class=\"hljs-selector-tag\">div</span>&#123;<br>  <span class=\"hljs-comment\">/* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/</span><br>  <span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">3s</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>宽度过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.div1</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>背景色过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.div2</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#999</span>;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>按贝塞尔曲线设置的过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">/贝塞尔曲线过渡/<br><span class=\"hljs-selector-class\">.div3</span>&#123;<span class=\"hljs-attribute\">transition-timing-function</span>: <span class=\"hljs-built_in\">cubic-bezier</span>(.<span class=\"hljs-number\">39</span>,.<span class=\"hljs-number\">62</span>,.<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">1.39</span>)&#125;<br><span class=\"hljs-selector-class\">.div3</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate3d</span>(-<span class=\"hljs-number\">25px</span>, -<span class=\"hljs-number\">25px</span>, <span class=\"hljs-number\">0</span>)&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\"><a href=\"#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\" class=\"headerlink\" title=\"#贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\"></a><a href=\"https://xugaoyi.com/pages/02d7f59d98d87409/#%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF-cubic-bezier-x1-y1-x2-y2\">#</a>贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>\n<p>贝塞尔曲线在线工具：<a href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67</a></p>\n<p>参考：<a href=\"https://www.w3school.com.cn/css3/index.asp\">https://www.w3school.com.cn/css3/index.asp</a></p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"CSS3-transition过渡\"><a href=\"#CSS3-transition过渡\" class=\"headerlink\" title=\"CSS3  transition过渡\"></a>CSS3  transition过渡</h1><p>html结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;box1&quot;</span>&gt;</span>  <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;div3&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>先给元素设置transition过渡，指定样式和时间，这里设置all全部样式都采用0.3s的过渡</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box1</span>&gt;<span class=\"hljs-selector-tag\">div</span>&#123;<br>  <span class=\"hljs-comment\">/* 给元素所有变化都添加过渡动画, 也可以指定唯一的过渡样式属性*/</span><br>  <span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">3s</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>宽度过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.div1</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>背景色过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.div2</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#999</span>;&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>按贝塞尔曲线设置的过渡</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">/贝塞尔曲线过渡/<br><span class=\"hljs-selector-class\">.div3</span>&#123;<span class=\"hljs-attribute\">transition-timing-function</span>: <span class=\"hljs-built_in\">cubic-bezier</span>(.<span class=\"hljs-number\">39</span>,.<span class=\"hljs-number\">62</span>,.<span class=\"hljs-number\">74</span>,<span class=\"hljs-number\">1.39</span>)&#125;<br><span class=\"hljs-selector-class\">.div3</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate3d</span>(-<span class=\"hljs-number\">25px</span>, -<span class=\"hljs-number\">25px</span>, <span class=\"hljs-number\">0</span>)&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\"><a href=\"#贝塞尔曲线-cubic-bezier-x1-y1-x2-y2\" class=\"headerlink\" title=\"#贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)\"></a><a href=\"https://xugaoyi.com/pages/02d7f59d98d87409/#%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF-cubic-bezier-x1-y1-x2-y2\">#</a>贝塞尔曲线 cubic-bezier(x1,y1,x2,y2)</h3><p>通过调整贝塞尔曲线可以设置出多种动画效果，比如反弹效果等 X轴的范围是0~1，Y轴的取值没有规定，但是也不宜过大。 如：直线linear，即cubic-bezier(0,0,1,1)</p>\n<p>贝塞尔曲线在线工具：<a href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67</a></p>\n<p>参考：<a href=\"https://www.w3school.com.cn/css3/index.asp\">https://www.w3school.com.cn/css3/index.asp</a></p>\n"},{"title":"文字在一行或两行时超出显示省略号","_content":"\n# 文字在一行或两行时超出显示省略号\n\n## 一行超出显示省略\n\n```css\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n```\n\n## 两行（多行）超出显示省略号\n\n```css\noverflow: hidden;\nwhite-space: normal;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n```\n\n显示的行数由`line-clamp`样式的值决定。","source":"_posts/文字在一行或两行时超出显示省略号.md","raw":"---\ntitle: 文字在一行或两行时超出显示省略号\ncategories:  #设置分类\n- css\n---\n\n# 文字在一行或两行时超出显示省略号\n\n## 一行超出显示省略\n\n```css\noverflow: hidden;\nwhite-space: nowrap;\ntext-overflow: ellipsis;\n```\n\n## 两行（多行）超出显示省略号\n\n```css\noverflow: hidden;\nwhite-space: normal;\ntext-overflow: ellipsis;\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;\n-webkit-box-orient: vertical;\n```\n\n显示的行数由`line-clamp`样式的值决定。","slug":"文字在一行或两行时超出显示省略号","published":1,"date":"2021-12-31T02:06:59.567Z","updated":"2021-12-31T02:02:27.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zs0004ow8i3m17hk1u","content":"<h1 id=\"文字在一行或两行时超出显示省略号\"><a href=\"#文字在一行或两行时超出显示省略号\" class=\"headerlink\" title=\"文字在一行或两行时超出显示省略号\"></a>文字在一行或两行时超出显示省略号</h1><h2 id=\"一行超出显示省略\"><a href=\"#一行超出显示省略\" class=\"headerlink\" title=\"一行超出显示省略\"></a>一行超出显示省略</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">overflow</span>: hidden;<br><span class=\"hljs-attribute\">white-space</span>: nowrap;<br><span class=\"hljs-attribute\">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"两行（多行）超出显示省略号\"><a href=\"#两行（多行）超出显示省略号\" class=\"headerlink\" title=\"两行（多行）超出显示省略号\"></a>两行（多行）超出显示省略号</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">overflow</span>: hidden;<br><span class=\"hljs-attribute\">white-space</span>: normal;<br><span class=\"hljs-attribute\">text-overflow</span>: ellipsis;<br><span class=\"hljs-attribute\">display</span>: -webkit-box;<br>-webkit-line-clamp: <span class=\"hljs-number\">2</span>;<br>-webkit-box-orient: vertical;<br></code></pre></td></tr></table></figure>\n\n<p>显示的行数由<code>line-clamp</code>样式的值决定。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"文字在一行或两行时超出显示省略号\"><a href=\"#文字在一行或两行时超出显示省略号\" class=\"headerlink\" title=\"文字在一行或两行时超出显示省略号\"></a>文字在一行或两行时超出显示省略号</h1><h2 id=\"一行超出显示省略\"><a href=\"#一行超出显示省略\" class=\"headerlink\" title=\"一行超出显示省略\"></a>一行超出显示省略</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">overflow</span>: hidden;<br><span class=\"hljs-attribute\">white-space</span>: nowrap;<br><span class=\"hljs-attribute\">text-overflow</span>: ellipsis;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"两行（多行）超出显示省略号\"><a href=\"#两行（多行）超出显示省略号\" class=\"headerlink\" title=\"两行（多行）超出显示省略号\"></a>两行（多行）超出显示省略号</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">overflow</span>: hidden;<br><span class=\"hljs-attribute\">white-space</span>: normal;<br><span class=\"hljs-attribute\">text-overflow</span>: ellipsis;<br><span class=\"hljs-attribute\">display</span>: -webkit-box;<br>-webkit-line-clamp: <span class=\"hljs-number\">2</span>;<br>-webkit-box-orient: vertical;<br></code></pre></td></tr></table></figure>\n\n<p>显示的行数由<code>line-clamp</code>样式的值决定。</p>\n"},{"title":"「布局技巧」图片未加载前自动撑开元素高度","_content":"\n# 「布局技巧」图片未加载前自动撑开元素高度\n\n在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：\n\n```stylus\n.wrapper\n  overflow hidden\n  width 100%\n  height 0\n  padding-bottom 26.66% // 这个数值是图片的高宽比，即 高/宽\n  background #eee\n```\n\n上面代码中，`padding-bottom` 的取值是图片的高宽比（即，高/宽），它会根据 `width`值的`26.66%`计算，最终元素的高度会和图片加载完成后的高度一致。\n\n也可以使用`vw`的方法，但在一些浏览器可能有兼容性问题：\n\n```stylus\n.wrapper\n  width 100%\n  height 26.66vw\n  background #eee\n```\n\n\n\n> `vw`，viewpoint width，视窗宽度，1vw=视窗宽度的1%\n>\n> `vh`，viewpoint height，视窗高度，1vh=视窗高度的1%\n>\n> 更多 [CSS单位 (opens new window)](https://www.runoob.com/cssref/css-units.html)。\n\n","source":"_posts/「布局技巧」图片未加载前自动撑开元素高度.md","raw":"---\ntitle: 「布局技巧」图片未加载前自动撑开元素高度\ncategories:  #设置分类\n- css\n- 布局\n---\n\n# 「布局技巧」图片未加载前自动撑开元素高度\n\n在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：\n\n```stylus\n.wrapper\n  overflow hidden\n  width 100%\n  height 0\n  padding-bottom 26.66% // 这个数值是图片的高宽比，即 高/宽\n  background #eee\n```\n\n上面代码中，`padding-bottom` 的取值是图片的高宽比（即，高/宽），它会根据 `width`值的`26.66%`计算，最终元素的高度会和图片加载完成后的高度一致。\n\n也可以使用`vw`的方法，但在一些浏览器可能有兼容性问题：\n\n```stylus\n.wrapper\n  width 100%\n  height 26.66vw\n  background #eee\n```\n\n\n\n> `vw`，viewpoint width，视窗宽度，1vw=视窗宽度的1%\n>\n> `vh`，viewpoint height，视窗高度，1vh=视窗高度的1%\n>\n> 更多 [CSS单位 (opens new window)](https://www.runoob.com/cssref/css-units.html)。\n\n","slug":"「布局技巧」图片未加载前自动撑开元素高度","published":1,"date":"2021-12-31T02:07:29.718Z","updated":"2021-12-31T02:06:49.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zv0006ow8i2esq1npp","content":"<h1 id=\"「布局技巧」图片未加载前自动撑开元素高度\"><a href=\"#「布局技巧」图片未加载前自动撑开元素高度\" class=\"headerlink\" title=\"「布局技巧」图片未加载前自动撑开元素高度\"></a>「布局技巧」图片未加载前自动撑开元素高度</h1><p>在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.wrapper</span><br>  <span class=\"hljs-attribute\">overflow</span> hidden<br>  <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span><br>  <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">padding-bottom</span> <span class=\"hljs-number\">26.66%</span> // 这个数值是图片的高宽比，即 高/宽<br>  <span class=\"hljs-attribute\">background</span> <span class=\"hljs-number\">#eee</span><br></code></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>padding-bottom</code> 的取值是图片的高宽比（即，高/宽），它会根据 <code>width</code>值的<code>26.66%</code>计算，最终元素的高度会和图片加载完成后的高度一致。</p>\n<p>也可以使用<code>vw</code>的方法，但在一些浏览器可能有兼容性问题：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.wrapper</span><br>  <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span><br>  <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">26.66vw</span><br>  <span class=\"hljs-attribute\">background</span> <span class=\"hljs-number\">#eee</span><br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>vw</code>，viewpoint width，视窗宽度，1vw=视窗宽度的1%</p>\n<p><code>vh</code>，viewpoint height，视窗高度，1vh=视窗高度的1%</p>\n<p>更多 <a href=\"https://www.runoob.com/cssref/css-units.html\">CSS单位 (opens new window)</a>。</p>\n</blockquote>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"「布局技巧」图片未加载前自动撑开元素高度\"><a href=\"#「布局技巧」图片未加载前自动撑开元素高度\" class=\"headerlink\" title=\"「布局技巧」图片未加载前自动撑开元素高度\"></a>「布局技巧」图片未加载前自动撑开元素高度</h1><p>在移动端开发中，有一些元素是根据图片高度来自动撑开的 ，高度不能写死（如轮播图的外层元素）。在网络较慢的情况下，图片加载需要一些时间，此时该元素的高度没有被撑开，在网页布局上会有一些不想看到的效果。 这种情况我们可以设置如下样式来设置该元素的高度：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.wrapper</span><br>  <span class=\"hljs-attribute\">overflow</span> hidden<br>  <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span><br>  <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">0</span><br>  <span class=\"hljs-attribute\">padding-bottom</span> <span class=\"hljs-number\">26.66%</span> // 这个数值是图片的高宽比，即 高/宽<br>  <span class=\"hljs-attribute\">background</span> <span class=\"hljs-number\">#eee</span><br></code></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>padding-bottom</code> 的取值是图片的高宽比（即，高/宽），它会根据 <code>width</code>值的<code>26.66%</code>计算，最终元素的高度会和图片加载完成后的高度一致。</p>\n<p>也可以使用<code>vw</code>的方法，但在一些浏览器可能有兼容性问题：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-class\">.wrapper</span><br>  <span class=\"hljs-attribute\">width</span> <span class=\"hljs-number\">100%</span><br>  <span class=\"hljs-attribute\">height</span> <span class=\"hljs-number\">26.66vw</span><br>  <span class=\"hljs-attribute\">background</span> <span class=\"hljs-number\">#eee</span><br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><code>vw</code>，viewpoint width，视窗宽度，1vw=视窗宽度的1%</p>\n<p><code>vh</code>，viewpoint height，视窗高度，1vh=视窗高度的1%</p>\n<p>更多 <a href=\"https://www.runoob.com/cssref/css-units.html\">CSS单位 (opens new window)</a>。</p>\n</blockquote>\n"},{"title":"水平垂直居中的几种方式","_content":"\n# 水平垂直居中的几种方式-案例\n\n<iframe height=\"880\" scrolling=\"no\" title=\"水平垂直居中的几种方式\" src=\"https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" style=\"width: 860px;\"></iframe>\n\n","source":"_posts/水平垂直居中的几种方式-案例.md","raw":"---\ntitle: 水平垂直居中的几种方式\ncategories:  #设置分类\n- css\n---\n\n# 水平垂直居中的几种方式-案例\n\n<iframe height=\"880\" scrolling=\"no\" title=\"水平垂直居中的几种方式\" src=\"https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" style=\"width: 860px;\"></iframe>\n\n","slug":"水平垂直居中的几种方式-案例","published":1,"date":"2021-12-31T02:06:59.554Z","updated":"2021-12-31T02:03:56.842Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zw0007ow8i36j02mwy","content":"<h1 id=\"水平垂直居中的几种方式-案例\"><a href=\"#水平垂直居中的几种方式-案例\" class=\"headerlink\" title=\"水平垂直居中的几种方式-案例\"></a>水平垂直居中的几种方式-案例</h1><iframe height=\"880\" scrolling=\"no\" title=\"水平垂直居中的几种方式\" src=\"https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" style=\"width: 860px;\"></iframe>\n\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"水平垂直居中的几种方式-案例\"><a href=\"#水平垂直居中的几种方式-案例\" class=\"headerlink\" title=\"水平垂直居中的几种方式-案例\"></a>水平垂直居中的几种方式-案例</h1><iframe height=\"880\" scrolling=\"no\" title=\"水平垂直居中的几种方式\" src=\"https://codepen.io/xugaoyi/embed/poJLeYv?height=880&amp;theme-id=light&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" style=\"width: 860px;\"></iframe>\n\n"},{"title":"根据系统主题自动响应CSS深色模式","_content":"\n\n\n# 根据系统主题自动响应CSS深色模式\n\n![img](https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg)\n\n很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。\n\n## CSS 深色模式 (Dark Mode)\n\n在`:root`根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:\n\n```css\n:root {\n  --bg: #fff;\n  --textColor: #004050;\n  --borderColor: rgba(0,0,0,.15);\n}\n```\n\n\n\n> **`:root`** 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，**`:root`** 表示 `<html>`元素，除了优先级更高之外，与 `html` 选择器相同。\n\n如果希望在样式表中使用这些变量，可以这样做\n\n```css\nbody {\n  color: var(--bg);\n}\n```\n\n\n\n这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。\n\n现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:\n\n```css\n/* 定义深色模式的颜色 */\n:root {\n  --bg: rgb(30,30,34);\n  --textColor: rgb(150,150,154);\n  --borderColor: #2C2C3A;\n}\n```\n\n## 添加深色模式自动响应\n\n现在我们定义了两组变量。剩下要做的一件事就是将`prefers-color-scheme`媒体查询添加到我们的深色模式变量中。\n\n使用您的深色模式变量并在外层添加`@media`查询\n\n```css\n/* 根据系统的深色模式响应深色变量 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: rgb(30,30,34);\n    --textColor: rgb(150,150,154);\n    --borderColor: #2C2C3A;\n  }\n}\n```\n\n> [`prefers-color-scheme`文档(opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme)\n\n这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。\n\n> 如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。\n\n## JS判断深色模式\n\n如果你的需求需要js来判断系统是否处于深色模式，可以这样做：\n\n```js\nif(window.matchMedia('(prefers-color-scheme: dark)').matches){\n  //深色主题\n}\n```\n\n> [`matchMedia` (opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia)方法返回一个[`MediaQueryList` (opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList)对象，该对象具有属性`matches`、`media`，具有方法`addListener`、`removeListener`。\n\n`addListener`接收一个`MediaQueryList`对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：\n\n```js\nlet listeners={\n  dark:(mediaQueryList )=>{\n    if(mediaQueryList.matches){\n      alert('您切换到深色模式了！')\n    }\n  },\n  light:(mediaQueryList)=>{\n    if(mediaQueryList.matches){\n      alert('您切换到浅色模式了！')\n    }\n  }\n}\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addListener(listeners.dark)\nwindow.matchMedia('(prefers-color-scheme: light)').addListener(listeners.light)\n```\n\n## 结论\n\n我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。","source":"_posts/根据系统主题自动响应CSS深色模式.md","raw":"---\ntitle: 根据系统主题自动响应CSS深色模式\ncategories:  #设置分类\n- css\n---\n\n\n\n# 根据系统主题自动响应CSS深色模式\n\n![img](https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg)\n\n很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。\n\n## CSS 深色模式 (Dark Mode)\n\n在`:root`根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:\n\n```css\n:root {\n  --bg: #fff;\n  --textColor: #004050;\n  --borderColor: rgba(0,0,0,.15);\n}\n```\n\n\n\n> **`:root`** 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，**`:root`** 表示 `<html>`元素，除了优先级更高之外，与 `html` 选择器相同。\n\n如果希望在样式表中使用这些变量，可以这样做\n\n```css\nbody {\n  color: var(--bg);\n}\n```\n\n\n\n这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。\n\n现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:\n\n```css\n/* 定义深色模式的颜色 */\n:root {\n  --bg: rgb(30,30,34);\n  --textColor: rgb(150,150,154);\n  --borderColor: #2C2C3A;\n}\n```\n\n## 添加深色模式自动响应\n\n现在我们定义了两组变量。剩下要做的一件事就是将`prefers-color-scheme`媒体查询添加到我们的深色模式变量中。\n\n使用您的深色模式变量并在外层添加`@media`查询\n\n```css\n/* 根据系统的深色模式响应深色变量 */\n@media (prefers-color-scheme: dark) {\n  :root {\n    --bg: rgb(30,30,34);\n    --textColor: rgb(150,150,154);\n    --borderColor: #2C2C3A;\n  }\n}\n```\n\n> [`prefers-color-scheme`文档(opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme)\n\n这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。\n\n> 如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。\n\n## JS判断深色模式\n\n如果你的需求需要js来判断系统是否处于深色模式，可以这样做：\n\n```js\nif(window.matchMedia('(prefers-color-scheme: dark)').matches){\n  //深色主题\n}\n```\n\n> [`matchMedia` (opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia)方法返回一个[`MediaQueryList` (opens new window)](https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList)对象，该对象具有属性`matches`、`media`，具有方法`addListener`、`removeListener`。\n\n`addListener`接收一个`MediaQueryList`对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：\n\n```js\nlet listeners={\n  dark:(mediaQueryList )=>{\n    if(mediaQueryList.matches){\n      alert('您切换到深色模式了！')\n    }\n  },\n  light:(mediaQueryList)=>{\n    if(mediaQueryList.matches){\n      alert('您切换到浅色模式了！')\n    }\n  }\n}\n\nwindow.matchMedia('(prefers-color-scheme: dark)').addListener(listeners.dark)\nwindow.matchMedia('(prefers-color-scheme: light)').addListener(listeners.light)\n```\n\n## 结论\n\n我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。","slug":"根据系统主题自动响应CSS深色模式","published":1,"date":"2021-12-31T02:06:59.542Z","updated":"2021-12-31T02:01:37.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrc6zz000aow8ib0rf1brg","content":"<h1 id=\"根据系统主题自动响应CSS深色模式\"><a href=\"#根据系统主题自动响应CSS深色模式\" class=\"headerlink\" title=\"根据系统主题自动响应CSS深色模式\"></a>根据系统主题自动响应CSS深色模式</h1><p><img  src=\"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg\"  ><span class=\"image-caption\">img</span></p>\n<p>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。</p>\n<h2 id=\"CSS-深色模式-Dark-Mode\"><a href=\"#CSS-深色模式-Dark-Mode\" class=\"headerlink\" title=\"CSS 深色模式 (Dark Mode)\"></a>CSS 深色模式 (Dark Mode)</h2><p>在<code>:root</code>根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --bg: <span class=\"hljs-number\">#fff</span>;<br>  --textColor: <span class=\"hljs-number\">#004050</span>;<br>  --borderColor: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,.<span class=\"hljs-number\">15</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong><code>:root</code></strong> 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，**<code>:root</code>** 表示 <code>&lt;html&gt;</code>元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p>\n</blockquote>\n<p>如果希望在样式表中使用这些变量，可以这样做</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--bg);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。</p>\n<p>现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 定义深色模式的颜色 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --bg: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">34</span>);<br>  --textColor: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">154</span>);<br>  --borderColor: <span class=\"hljs-number\">#2C2C3A</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加深色模式自动响应\"><a href=\"#添加深色模式自动响应\" class=\"headerlink\" title=\"添加深色模式自动响应\"></a>添加深色模式自动响应</h2><p>现在我们定义了两组变量。剩下要做的一件事就是将<code>prefers-color-scheme</code>媒体查询添加到我们的深色模式变量中。</p>\n<p>使用您的深色模式变量并在外层添加<code>@media</code>查询</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 根据系统的深色模式响应深色变量 */</span><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --bg: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">34</span>);<br>    --textColor: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">154</span>);<br>    --borderColor: <span class=\"hljs-number\">#2C2C3A</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme\"><code>prefers-color-scheme</code>文档(opens new window)</a></p>\n</blockquote>\n<p>这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。</p>\n<blockquote>\n<p>如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。</p>\n</blockquote>\n<h2 id=\"JS判断深色模式\"><a href=\"#JS判断深色模式\" class=\"headerlink\" title=\"JS判断深色模式\"></a>JS判断深色模式</h2><p>如果你的需求需要js来判断系统是否处于深色模式，可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches)&#123;<br>  <span class=\"hljs-comment\">//深色主题</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\"><code>matchMedia</code> (opens new window)</a>方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList\"><code>MediaQueryList</code> (opens new window)</a>对象，该对象具有属性<code>matches</code>、<code>media</code>，具有方法<code>addListener</code>、<code>removeListener</code>。</p>\n</blockquote>\n<p><code>addListener</code>接收一个<code>MediaQueryList</code>对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> listeners=&#123;<br>  <span class=\"hljs-attr\">dark</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">mediaQueryList </span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(mediaQueryList.matches)&#123;<br>      alert(<span class=\"hljs-string\">&#x27;您切换到深色模式了！&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">light</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">mediaQueryList</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(mediaQueryList.matches)&#123;<br>      alert(<span class=\"hljs-string\">&#x27;您切换到浅色模式了！&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).addListener(listeners.dark)<br><span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: light)&#x27;</span>).addListener(listeners.light)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"根据系统主题自动响应CSS深色模式\"><a href=\"#根据系统主题自动响应CSS深色模式\" class=\"headerlink\" title=\"根据系统主题自动响应CSS深色模式\"></a>根据系统主题自动响应CSS深色模式</h1><p><img  src=\"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200427163531.jpg\"  ><span class=\"image-caption\">img</span></p>\n<p>很多人喜欢选择APP或网站中的深色模式，也许他们更喜欢这样的外观，或者他们想让自己的眼睛免受疲劳。这篇文章将告诉你如何在网站中实现一个自动的CSS深色模式，根据访客的系统主题来自动响应。</p>\n<h2 id=\"CSS-深色模式-Dark-Mode\"><a href=\"#CSS-深色模式-Dark-Mode\" class=\"headerlink\" title=\"CSS 深色模式 (Dark Mode)\"></a>CSS 深色模式 (Dark Mode)</h2><p>在<code>:root</code>根元素中定义变量来设置主题的颜色。我建议你也这样做，因为这样会使这个过程容易得多。我定义的变量如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --bg: <span class=\"hljs-number\">#fff</span>;<br>  --textColor: <span class=\"hljs-number\">#004050</span>;<br>  --borderColor: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,.<span class=\"hljs-number\">15</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong><code>:root</code></strong> 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，**<code>:root</code>** 表示 <code>&lt;html&gt;</code>元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p>\n</blockquote>\n<p>如果希望在样式表中使用这些变量，可以这样做</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">body</span> &#123;<br>  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--bg);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>这样，如果你想改变你的主题颜色，所需要做的就是修改你定义的变量，所有使用这个变量的样式都会被更新。</p>\n<p>现在我们需要定义一组新的变量，这些变量将在调用CSS深色模式时使用。对我来说，深色模式的变量是这样的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 定义深色模式的颜色 */</span><br><span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>  --bg: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">34</span>);<br>  --textColor: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">154</span>);<br>  --borderColor: <span class=\"hljs-number\">#2C2C3A</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"添加深色模式自动响应\"><a href=\"#添加深色模式自动响应\" class=\"headerlink\" title=\"添加深色模式自动响应\"></a>添加深色模式自动响应</h2><p>现在我们定义了两组变量。剩下要做的一件事就是将<code>prefers-color-scheme</code>媒体查询添加到我们的深色模式变量中。</p>\n<p>使用您的深色模式变量并在外层添加<code>@media</code>查询</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 根据系统的深色模式响应深色变量 */</span><br><span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">prefers-color-scheme</span>: dark) &#123;<br>  <span class=\"hljs-selector-pseudo\">:root</span> &#123;<br>    --bg: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">34</span>);<br>    --textColor: <span class=\"hljs-built_in\">rgb</span>(<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">154</span>);<br>    --borderColor: <span class=\"hljs-number\">#2C2C3A</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media/prefers-color-scheme\"><code>prefers-color-scheme</code>文档(opens new window)</a></p>\n</blockquote>\n<p>这是真的! 如果有人正在使用一个深色模式的系统主题，并访问你的网站，将自动切换到深色模式。</p>\n<blockquote>\n<p>如果你的电脑系统不支持深色模式，可以使用手机测试，先把手机的系统主题调到深色模式，再打开你的网站。</p>\n</blockquote>\n<h2 id=\"JS判断深色模式\"><a href=\"#JS判断深色模式\" class=\"headerlink\" title=\"JS判断深色模式\"></a>JS判断深色模式</h2><p>如果你的需求需要js来判断系统是否处于深色模式，可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches)&#123;<br>  <span class=\"hljs-comment\">//深色主题</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\"><code>matchMedia</code> (opens new window)</a>方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaQueryList\"><code>MediaQueryList</code> (opens new window)</a>对象，该对象具有属性<code>matches</code>、<code>media</code>，具有方法<code>addListener</code>、<code>removeListener</code>。</p>\n</blockquote>\n<p><code>addListener</code>接收一个<code>MediaQueryList</code>对象作为参数。 为深色模式添加监听器，以响应系统切换到或切换出深色模式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> listeners=&#123;<br>  <span class=\"hljs-attr\">dark</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">mediaQueryList </span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(mediaQueryList.matches)&#123;<br>      alert(<span class=\"hljs-string\">&#x27;您切换到深色模式了！&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">light</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">mediaQueryList</span>)=&gt;</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(mediaQueryList.matches)&#123;<br>      alert(<span class=\"hljs-string\">&#x27;您切换到浅色模式了！&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: dark)&#x27;</span>).addListener(listeners.dark)<br><span class=\"hljs-built_in\">window</span>.matchMedia(<span class=\"hljs-string\">&#x27;(prefers-color-scheme: light)&#x27;</span>).addListener(listeners.light)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>我们不仅可以在布局方面响应不同尺寸屏幕，还可以按系统主题响应深色模式。我相信你的深夜访客，或者那些喜欢深色模式的人，会感谢你的。</p>\n"},{"title":"数据挖掘课程设计相关笔记","_content":"\n# 数据挖掘课程设计相关笔记\n\n## 01 爬虫\n\n利用 xpath 进行解构爬取数据，获取下一页的 url，不断循环爬取所有新闻文章。\n\n## 02 jieba 分词、词云\n\n#### 先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。\n\n#### 然后进行 jieba 分词处理：\n\n- 精确模式，试图将句子最精确地切开，适合文本分析；\n- 全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；\n- 搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。\n\n```python\nimport jieba\n\njieba.cut(data, cut_all=False) # 精准模式\njieba.cut(data, cut_all=True) # 全模式\njieba.cut_for_search(data)\t # 搜索引擎模式\n```\n\n#### 分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。\n\n#### 利用 pyecharts 进行绘制词云图，被保存 html 页面文件\n\n## 03 TF-IDF\n\n#### TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).\n\n##### TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\n\n**词频 (term frequency, TF)** 指的是某一个给定的词语在该文件中出现的次数。\n\n**逆向文件频率 (inverse document frequency, IDF)** 是一个词语普遍重要性的度量。某一特定词语的 IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。\n\n##### IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）\n\n##### TFIDF 实际上是：TF \\* IDF\n\n##### 基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取\n\n```python\nimport jieba.analyse\n\njieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())\n```\n\n- **sentence** ：为待提取的文本\n- **topK**： 为返回几个 TF/IDF 权重最大的关键词，默认值为 20\n- **withWeight** ： 为是否一并返回关键词权重值，默认值为 False\n- **allowPOS** ： 仅包括指定词性的词，默认值为空，即不筛选\n\n## 04 K-means 聚类\n\nk：要得到的簇的个数\n\n质心：均值，向量各维取平均值即可，不断更新的\n\n距离的度量：常用欧式距离和余弦的相似度\n\n```python\n\t# 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频\n    vectorizer = CountVectorizer()\n    # 该类会统计每个词语的tf-idf权值\n    transformer = TfidfTransformer()\n    # 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵\n    tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))\n    # 获取词袋模型中的所有词语\n    word = vectorizer.get_feature_names()\n    # 将tf-idf矩阵抽取出来 元素a[i][j]表示j词在i类文本中的tf-idf权重\n    weight = tfidf.toarray()\n```\n\n我们可以通过用 TD－IDF 衡量每个单词在文件中的重要程度。如果多个文件，它们的文件中的各个单词的重要程度相似，我就可以说这些文件是相似的。如何评价这些文件的相似度呢？一种很自然的想法是用两者的欧几里得距离来作为相异度，欧几里得距离的定义如下：\n\n<!-- ![image-20210103154152791](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154152791.png) -->\n\n其意义就是两个元素在欧氏空间中的集合距离，因为其直观易懂且可解释性强，被广泛用于标识两个标量元素的相异度。我们可以将 X，Y 分别理解为两篇文本文件，xi,y 是每个文件单词的 TD－IDF 值。这样就可以算出两文件的相似度了。这样我们可以将文件聚类的问题转化为一般性的聚类过程，样本空间中的两点的距离可以欧式距离描述。除欧氏距离外，常用作度量标量相异度的还有曼哈顿距离和闵可夫斯基距离，两者定义如下：\n\n<!-- ![image-20210103154217134](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154217134.png) -->\n\n整个文本聚类过程可以先后分为两步：1、计算文本集合各个文档中 TD－IDF 值，2，根据计算的结果，对文件集合用 k-means 聚类方法进行迭代聚类。\n\n有关 k-means 的详细介绍 https://blog.csdn.net/freesum/article/details/7376006\n\n## 05 层次聚类\n\n层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。\n\n#### 基本步骤\n\n1.计算每两个观测之间的距离\n\n2.将最近的两个观测聚为一类，将其看作一个整体计算与其它观测(类)之间的距离\n\n3.一直重复上述过程，直至所有的观测被聚为一类\n\n#### 例子\n\n```python\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster\nfrom matplotlib import pyplot as plt\n\nX = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]\nprint(X)\nZ = linkage(X, 'ward')\nprint(Z)\nf = fcluster(Z, 4, 'distance')\nprint(f)\nfig = plt.figure(figsize=(5, 3))\ndn = dendrogram(Z)\nplt.show()\n```\n\n![img](https://img-blog.csdnimg.cn/20190301181326559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpYm80OTIzODc=,size_16,color_FFFFFF,t_70)\n\n## 06 lda 主题模型\n\nLDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。\n\n```python\nimport pyLDAvis\n# pyLDA需要先导入模型，支持的模型的来源有三种：\n\t# sklearn的lda模型 （我们用的这种）\n\t# gensim的lda模型\n\t# graphlab的lda模型\nfrom sklearn.decomposition import LatentDirichletAllocation\nimport pyLDAvis.sklearn\n```\n\n文档主题生成模型（Latent Dirichlet Allocation，简称 LDA）又称为盘子表示法（Plate Notation），下图是模型的标示图，其中双圆圈表示可测变量，单圆圈表示潜在变量，箭头表示两个变量之间的依赖关系，矩形框表示重复抽样，对应的重复次数在矩形框的右下角显示。LDA 模型的具体实现步骤如下：\n\n> 从每篇网页 D 对应的多项分布 θ 中抽取每个单词对应的一个主题 z。\n\n> 从主题 z 对应的多项分布 φ 中抽取一个单词 w。\n\n> 重复步骤 1 和 2，共计 Nd 次，直至遍历网页中每一个单词。\n\n<img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103161446056.png\" alt=\"image-20210103161446056\" style=\"zoom: 50%;\" />\n\n##### 有关 LDA 只提模型原理的介绍 https://zhuanlan.zhihu.com/p/31470216\n\n##### 在生成的网页中的相关知识\n\n<img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103162718104.png\" alt=\"image-20210103162718104\" style=\"zoom:80%;\" />\n\n浅蓝色的表示这个词在整个文档中出现的频率（权重），深红色的表示这个词在这个主题中所占的权重。\n\n如果`λ`接近 1，那么在该主题下更频繁出现的词，跟主题更相关；\n如果`λ`越接近 0，那么该主题下更特殊、更独有的词，跟主题更相关（有点 TF-IDF 的意思了）。\n\n所以我们可以通过调节`λ`的大小来改变词语跟主题的相关性，探索更加合理的主题意义。\n\n## 07 结论\n\n在大数据时代下，当运用传统的数学方法遇到困难时，熟练地应用数据挖掘技术显得格外重要。文本数据挖掘并不是一件容易的事情，尤其是在分析方法方面，还有很多需要研究的专题。随着计算机计算能力的发展和业务复杂性的提高，数据的类型会越来越多、越来越复杂，数据挖掘将发挥出越来越大的作用。\n\n经过大家的不懈努力，对疫情新闻的相关分析也已经完成。\n\n通过本次对该项目的研究，我们利用文本挖掘将大量繁琐复杂的新闻通过词云的方式进行展示，以及在数据预处理上对其采集的数据进行了数据清洗，得到了更标准、高质量的数据来提升分析的结果。\n\n总的体会可以用一句话来表达，纸上得来终觉浅，绝知此事要躬行!通过对中国社会组织公共服务平台的爬虫，我们也是了解到了许多在疫情期间让人感概落泪的故事以及政府在全力保护人民安全和健康所做出的一系列决策。\n\n从 tf-idf 权重计算和词云的展示中可以看到可以看到“疫情”、“组织”、“捐赠”、“社会”、“协会”、“肺炎”、“复工”等都是社会和政府共同关注的主题；\n\n在层次聚类中可以看出不同领域的关键词有着不同的聚类最终也都汇聚成一块；\n\n我们还发现在 LDA 主题模型中输出结果分成了两类，在某种意义上可理解为一类是疫情，一类是民生，也表明了政府在防疫、控制疫情蔓延的同时十分关心人民群众的生活，在中国政府的眼里，人民的健康和安全永远摆在第一位！\n","source":"_posts/数据挖掘课程设计相关笔记.md","raw":"---\ntitle: 数据挖掘课程设计相关笔记\ncategories:  #设置分类\n- 数据挖掘\n---\n\n# 数据挖掘课程设计相关笔记\n\n## 01 爬虫\n\n利用 xpath 进行解构爬取数据，获取下一页的 url，不断循环爬取所有新闻文章。\n\n## 02 jieba 分词、词云\n\n#### 先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。\n\n#### 然后进行 jieba 分词处理：\n\n- 精确模式，试图将句子最精确地切开，适合文本分析；\n- 全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；\n- 搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。\n\n```python\nimport jieba\n\njieba.cut(data, cut_all=False) # 精准模式\njieba.cut(data, cut_all=True) # 全模式\njieba.cut_for_search(data)\t # 搜索引擎模式\n```\n\n#### 分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。\n\n#### 利用 pyecharts 进行绘制词云图，被保存 html 页面文件\n\n## 03 TF-IDF\n\n#### TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).\n\n##### TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\n\n**词频 (term frequency, TF)** 指的是某一个给定的词语在该文件中出现的次数。\n\n**逆向文件频率 (inverse document frequency, IDF)** 是一个词语普遍重要性的度量。某一特定词语的 IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。\n\n##### IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）\n\n##### TFIDF 实际上是：TF \\* IDF\n\n##### 基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取\n\n```python\nimport jieba.analyse\n\njieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())\n```\n\n- **sentence** ：为待提取的文本\n- **topK**： 为返回几个 TF/IDF 权重最大的关键词，默认值为 20\n- **withWeight** ： 为是否一并返回关键词权重值，默认值为 False\n- **allowPOS** ： 仅包括指定词性的词，默认值为空，即不筛选\n\n## 04 K-means 聚类\n\nk：要得到的簇的个数\n\n质心：均值，向量各维取平均值即可，不断更新的\n\n距离的度量：常用欧式距离和余弦的相似度\n\n```python\n\t# 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频\n    vectorizer = CountVectorizer()\n    # 该类会统计每个词语的tf-idf权值\n    transformer = TfidfTransformer()\n    # 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵\n    tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))\n    # 获取词袋模型中的所有词语\n    word = vectorizer.get_feature_names()\n    # 将tf-idf矩阵抽取出来 元素a[i][j]表示j词在i类文本中的tf-idf权重\n    weight = tfidf.toarray()\n```\n\n我们可以通过用 TD－IDF 衡量每个单词在文件中的重要程度。如果多个文件，它们的文件中的各个单词的重要程度相似，我就可以说这些文件是相似的。如何评价这些文件的相似度呢？一种很自然的想法是用两者的欧几里得距离来作为相异度，欧几里得距离的定义如下：\n\n<!-- ![image-20210103154152791](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154152791.png) -->\n\n其意义就是两个元素在欧氏空间中的集合距离，因为其直观易懂且可解释性强，被广泛用于标识两个标量元素的相异度。我们可以将 X，Y 分别理解为两篇文本文件，xi,y 是每个文件单词的 TD－IDF 值。这样就可以算出两文件的相似度了。这样我们可以将文件聚类的问题转化为一般性的聚类过程，样本空间中的两点的距离可以欧式距离描述。除欧氏距离外，常用作度量标量相异度的还有曼哈顿距离和闵可夫斯基距离，两者定义如下：\n\n<!-- ![image-20210103154217134](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154217134.png) -->\n\n整个文本聚类过程可以先后分为两步：1、计算文本集合各个文档中 TD－IDF 值，2，根据计算的结果，对文件集合用 k-means 聚类方法进行迭代聚类。\n\n有关 k-means 的详细介绍 https://blog.csdn.net/freesum/article/details/7376006\n\n## 05 层次聚类\n\n层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。\n\n#### 基本步骤\n\n1.计算每两个观测之间的距离\n\n2.将最近的两个观测聚为一类，将其看作一个整体计算与其它观测(类)之间的距离\n\n3.一直重复上述过程，直至所有的观测被聚为一类\n\n#### 例子\n\n```python\nfrom scipy.cluster.hierarchy import dendrogram, linkage, fcluster\nfrom matplotlib import pyplot as plt\n\nX = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]\nprint(X)\nZ = linkage(X, 'ward')\nprint(Z)\nf = fcluster(Z, 4, 'distance')\nprint(f)\nfig = plt.figure(figsize=(5, 3))\ndn = dendrogram(Z)\nplt.show()\n```\n\n![img](https://img-blog.csdnimg.cn/20190301181326559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpYm80OTIzODc=,size_16,color_FFFFFF,t_70)\n\n## 06 lda 主题模型\n\nLDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。\n\n```python\nimport pyLDAvis\n# pyLDA需要先导入模型，支持的模型的来源有三种：\n\t# sklearn的lda模型 （我们用的这种）\n\t# gensim的lda模型\n\t# graphlab的lda模型\nfrom sklearn.decomposition import LatentDirichletAllocation\nimport pyLDAvis.sklearn\n```\n\n文档主题生成模型（Latent Dirichlet Allocation，简称 LDA）又称为盘子表示法（Plate Notation），下图是模型的标示图，其中双圆圈表示可测变量，单圆圈表示潜在变量，箭头表示两个变量之间的依赖关系，矩形框表示重复抽样，对应的重复次数在矩形框的右下角显示。LDA 模型的具体实现步骤如下：\n\n> 从每篇网页 D 对应的多项分布 θ 中抽取每个单词对应的一个主题 z。\n\n> 从主题 z 对应的多项分布 φ 中抽取一个单词 w。\n\n> 重复步骤 1 和 2，共计 Nd 次，直至遍历网页中每一个单词。\n\n<img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103161446056.png\" alt=\"image-20210103161446056\" style=\"zoom: 50%;\" />\n\n##### 有关 LDA 只提模型原理的介绍 https://zhuanlan.zhihu.com/p/31470216\n\n##### 在生成的网页中的相关知识\n\n<img src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103162718104.png\" alt=\"image-20210103162718104\" style=\"zoom:80%;\" />\n\n浅蓝色的表示这个词在整个文档中出现的频率（权重），深红色的表示这个词在这个主题中所占的权重。\n\n如果`λ`接近 1，那么在该主题下更频繁出现的词，跟主题更相关；\n如果`λ`越接近 0，那么该主题下更特殊、更独有的词，跟主题更相关（有点 TF-IDF 的意思了）。\n\n所以我们可以通过调节`λ`的大小来改变词语跟主题的相关性，探索更加合理的主题意义。\n\n## 07 结论\n\n在大数据时代下，当运用传统的数学方法遇到困难时，熟练地应用数据挖掘技术显得格外重要。文本数据挖掘并不是一件容易的事情，尤其是在分析方法方面，还有很多需要研究的专题。随着计算机计算能力的发展和业务复杂性的提高，数据的类型会越来越多、越来越复杂，数据挖掘将发挥出越来越大的作用。\n\n经过大家的不懈努力，对疫情新闻的相关分析也已经完成。\n\n通过本次对该项目的研究，我们利用文本挖掘将大量繁琐复杂的新闻通过词云的方式进行展示，以及在数据预处理上对其采集的数据进行了数据清洗，得到了更标准、高质量的数据来提升分析的结果。\n\n总的体会可以用一句话来表达，纸上得来终觉浅，绝知此事要躬行!通过对中国社会组织公共服务平台的爬虫，我们也是了解到了许多在疫情期间让人感概落泪的故事以及政府在全力保护人民安全和健康所做出的一系列决策。\n\n从 tf-idf 权重计算和词云的展示中可以看到可以看到“疫情”、“组织”、“捐赠”、“社会”、“协会”、“肺炎”、“复工”等都是社会和政府共同关注的主题；\n\n在层次聚类中可以看出不同领域的关键词有着不同的聚类最终也都汇聚成一块；\n\n我们还发现在 LDA 主题模型中输出结果分成了两类，在某种意义上可理解为一类是疫情，一类是民生，也表明了政府在防疫、控制疫情蔓延的同时十分关心人民群众的生活，在中国政府的眼里，人民的健康和安全永远摆在第一位！\n","slug":"数据挖掘课程设计相关笔记","published":1,"date":"2021-12-31T02:15:25.340Z","updated":"2021-12-31T02:14:49.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrpxr60000mc8i63yfhvj6","content":"<h1 id=\"数据挖掘课程设计相关笔记\"><a href=\"#数据挖掘课程设计相关笔记\" class=\"headerlink\" title=\"数据挖掘课程设计相关笔记\"></a>数据挖掘课程设计相关笔记</h1><h2 id=\"01-爬虫\"><a href=\"#01-爬虫\" class=\"headerlink\" title=\"01 爬虫\"></a>01 爬虫</h2><p>利用 xpath 进行解构爬取数据，获取下一页的 url，不断循环爬取所有新闻文章。</p>\n<h2 id=\"02-jieba-分词、词云\"><a href=\"#02-jieba-分词、词云\" class=\"headerlink\" title=\"02 jieba 分词、词云\"></a>02 jieba 分词、词云</h2><h4 id=\"先读取-csv-文件中的新闻数据的标题和正文内容到-txt-文件中。\"><a href=\"#先读取-csv-文件中的新闻数据的标题和正文内容到-txt-文件中。\" class=\"headerlink\" title=\"先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。\"></a>先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。</h4><h4 id=\"然后进行-jieba-分词处理：\"><a href=\"#然后进行-jieba-分词处理：\" class=\"headerlink\" title=\"然后进行 jieba 分词处理：\"></a>然后进行 jieba 分词处理：</h4><ul>\n<li>精确模式，试图将句子最精确地切开，适合文本分析；</li>\n<li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li>\n<li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><br>jieba.cut(data, cut_all=<span class=\"hljs-literal\">False</span>) <span class=\"hljs-comment\"># 精准模式</span><br>jieba.cut(data, cut_all=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-comment\"># 全模式</span><br>jieba.cut_for_search(data)\t <span class=\"hljs-comment\"># 搜索引擎模式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"分词之后进行简单的词频统计，此时过滤掉了字符串长度为-1-的字符。\"><a href=\"#分词之后进行简单的词频统计，此时过滤掉了字符串长度为-1-的字符。\" class=\"headerlink\" title=\"分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。\"></a>分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。</h4><h4 id=\"利用-pyecharts-进行绘制词云图，被保存-html-页面文件\"><a href=\"#利用-pyecharts-进行绘制词云图，被保存-html-页面文件\" class=\"headerlink\" title=\"利用 pyecharts 进行绘制词云图，被保存 html 页面文件\"></a>利用 pyecharts 进行绘制词云图，被保存 html 页面文件</h4><h2 id=\"03-TF-IDF\"><a href=\"#03-TF-IDF\" class=\"headerlink\" title=\"03 TF-IDF\"></a>03 TF-IDF</h2><h4 id=\"TF-IDF-Term-Frequency-Inverse-Document-Frequency-词频-逆文件频率\"><a href=\"#TF-IDF-Term-Frequency-Inverse-Document-Frequency-词频-逆文件频率\" class=\"headerlink\" title=\"TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).\"></a>TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).</h4><h5 id=\"TFIDF-的主要思想是：如果某个词或短语在一篇文章中出现的频率-TF-高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\"><a href=\"#TFIDF-的主要思想是：如果某个词或短语在一篇文章中出现的频率-TF-高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\" class=\"headerlink\" title=\"TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\"></a>TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类</h5><p><strong>词频 (term frequency, TF)</strong> 指的是某一个给定的词语在该文件中出现的次数。</p>\n<p><strong>逆向文件频率 (inverse document frequency, IDF)</strong> 是一个词语普遍重要性的度量。某一特定词语的 IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。</p>\n<h5 id=\"IDF-log（语料库中文档总数-包含该词的文档数-1-）\"><a href=\"#IDF-log（语料库中文档总数-包含该词的文档数-1-）\" class=\"headerlink\" title=\"IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）\"></a>IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）</h5><h5 id=\"TFIDF-实际上是：TF-IDF\"><a href=\"#TFIDF-实际上是：TF-IDF\" class=\"headerlink\" title=\"TFIDF 实际上是：TF * IDF\"></a>TFIDF 实际上是：TF * IDF</h5><h5 id=\"基于-TF-IDF（term-frequency–inverse-document-frequency）-算法的关键词抽取\"><a href=\"#基于-TF-IDF（term-frequency–inverse-document-frequency）-算法的关键词抽取\" class=\"headerlink\" title=\"基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取\"></a>基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba.analyse<br><br>jieba.analyse.extract_tags(sentence, topK=<span class=\"hljs-number\">20</span>, withWeight=<span class=\"hljs-literal\">False</span>, allowPOS=())<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>sentence</strong> ：为待提取的文本</li>\n<li><strong>topK</strong>： 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li>\n<li><strong>withWeight</strong> ： 为是否一并返回关键词权重值，默认值为 False</li>\n<li><strong>allowPOS</strong> ： 仅包括指定词性的词，默认值为空，即不筛选</li>\n</ul>\n<h2 id=\"04-K-means-聚类\"><a href=\"#04-K-means-聚类\" class=\"headerlink\" title=\"04 K-means 聚类\"></a>04 K-means 聚类</h2><p>k：要得到的簇的个数</p>\n<p>质心：均值，向量各维取平均值即可，不断更新的</p>\n<p>距离的度量：常用欧式距离和余弦的相似度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频</span><br>   vectorizer = CountVectorizer()<br>   <span class=\"hljs-comment\"># 该类会统计每个词语的tf-idf权值</span><br>   transformer = TfidfTransformer()<br>   <span class=\"hljs-comment\"># 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</span><br>   tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))<br>   <span class=\"hljs-comment\"># 获取词袋模型中的所有词语</span><br>   word = vectorizer.get_feature_names()<br>   <span class=\"hljs-comment\"># 将tf-idf矩阵抽取出来 元素a[i][j]表示j词在i类文本中的tf-idf权重</span><br>   weight = tfidf.toarray()<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过用 TD－IDF 衡量每个单词在文件中的重要程度。如果多个文件，它们的文件中的各个单词的重要程度相似，我就可以说这些文件是相似的。如何评价这些文件的相似度呢？一种很自然的想法是用两者的欧几里得距离来作为相异度，欧几里得距离的定义如下：</p>\n<!-- ![image-20210103154152791](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154152791.png) -->\n\n<p>其意义就是两个元素在欧氏空间中的集合距离，因为其直观易懂且可解释性强，被广泛用于标识两个标量元素的相异度。我们可以将 X，Y 分别理解为两篇文本文件，xi,y 是每个文件单词的 TD－IDF 值。这样就可以算出两文件的相似度了。这样我们可以将文件聚类的问题转化为一般性的聚类过程，样本空间中的两点的距离可以欧式距离描述。除欧氏距离外，常用作度量标量相异度的还有曼哈顿距离和闵可夫斯基距离，两者定义如下：</p>\n<!-- ![image-20210103154217134](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154217134.png) -->\n\n<p>整个文本聚类过程可以先后分为两步：1、计算文本集合各个文档中 TD－IDF 值，2，根据计算的结果，对文件集合用 k-means 聚类方法进行迭代聚类。</p>\n<p>有关 k-means 的详细介绍 <a href=\"https://blog.csdn.net/freesum/article/details/7376006\">https://blog.csdn.net/freesum/article/details/7376006</a></p>\n<h2 id=\"05-层次聚类\"><a href=\"#05-层次聚类\" class=\"headerlink\" title=\"05 层次聚类\"></a>05 层次聚类</h2><p>层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</p>\n<h4 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h4><p>1.计算每两个观测之间的距离</p>\n<p>2.将最近的两个观测聚为一类，将其看作一个整体计算与其它观测(类)之间的距离</p>\n<p>3.一直重复上述过程，直至所有的观测被聚为一类</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> scipy.cluster.hierarchy <span class=\"hljs-keyword\">import</span> dendrogram, linkage, fcluster<br><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>X = [[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>]]<br><span class=\"hljs-built_in\">print</span>(X)<br>Z = linkage(X, <span class=\"hljs-string\">&#x27;ward&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(Z)<br>f = fcluster(Z, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;distance&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(f)<br>fig = plt.figure(figsize=(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))<br>dn = dendrogram(Z)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://img-blog.csdnimg.cn/20190301181326559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpYm80OTIzODc=,size_16,color_FFFFFF,t_70\"  ><span class=\"image-caption\">img</span></p>\n<h2 id=\"06-lda-主题模型\"><a href=\"#06-lda-主题模型\" class=\"headerlink\" title=\"06 lda 主题模型\"></a>06 lda 主题模型</h2><p>LDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pyLDAvis<br><span class=\"hljs-comment\"># pyLDA需要先导入模型，支持的模型的来源有三种：</span><br>\t<span class=\"hljs-comment\"># sklearn的lda模型 （我们用的这种）</span><br>\t<span class=\"hljs-comment\"># gensim的lda模型</span><br>\t<span class=\"hljs-comment\"># graphlab的lda模型</span><br><span class=\"hljs-keyword\">from</span> sklearn.decomposition <span class=\"hljs-keyword\">import</span> LatentDirichletAllocation<br><span class=\"hljs-keyword\">import</span> pyLDAvis.sklearn<br></code></pre></td></tr></table></figure>\n\n<p>文档主题生成模型（Latent Dirichlet Allocation，简称 LDA）又称为盘子表示法（Plate Notation），下图是模型的标示图，其中双圆圈表示可测变量，单圆圈表示潜在变量，箭头表示两个变量之间的依赖关系，矩形框表示重复抽样，对应的重复次数在矩形框的右下角显示。LDA 模型的具体实现步骤如下：</p>\n<blockquote>\n<p>从每篇网页 D 对应的多项分布 θ 中抽取每个单词对应的一个主题 z。</p>\n</blockquote>\n<blockquote>\n<p>从主题 z 对应的多项分布 φ 中抽取一个单词 w。</p>\n</blockquote>\n<blockquote>\n<p>重复步骤 1 和 2，共计 Nd 次，直至遍历网页中每一个单词。</p>\n</blockquote>\n<img  src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103161446056.png\"   style=\"zoom: 50%;\" /><span class=\"image-caption\">image-20210103161446056</span>\n\n<h5 id=\"有关-LDA-只提模型原理的介绍-https-zhuanlan-zhihu-com-p-31470216\"><a href=\"#有关-LDA-只提模型原理的介绍-https-zhuanlan-zhihu-com-p-31470216\" class=\"headerlink\" title=\"有关 LDA 只提模型原理的介绍 https://zhuanlan.zhihu.com/p/31470216\"></a>有关 LDA 只提模型原理的介绍 <a href=\"https://zhuanlan.zhihu.com/p/31470216\">https://zhuanlan.zhihu.com/p/31470216</a></h5><h5 id=\"在生成的网页中的相关知识\"><a href=\"#在生成的网页中的相关知识\" class=\"headerlink\" title=\"在生成的网页中的相关知识\"></a>在生成的网页中的相关知识</h5><img  src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103162718104.png\"   style=\"zoom:80%;\" /><span class=\"image-caption\">image-20210103162718104</span>\n\n<p>浅蓝色的表示这个词在整个文档中出现的频率（权重），深红色的表示这个词在这个主题中所占的权重。</p>\n<p>如果<code>λ</code>接近 1，那么在该主题下更频繁出现的词，跟主题更相关；<br>如果<code>λ</code>越接近 0，那么该主题下更特殊、更独有的词，跟主题更相关（有点 TF-IDF 的意思了）。</p>\n<p>所以我们可以通过调节<code>λ</code>的大小来改变词语跟主题的相关性，探索更加合理的主题意义。</p>\n<h2 id=\"07-结论\"><a href=\"#07-结论\" class=\"headerlink\" title=\"07 结论\"></a>07 结论</h2><p>在大数据时代下，当运用传统的数学方法遇到困难时，熟练地应用数据挖掘技术显得格外重要。文本数据挖掘并不是一件容易的事情，尤其是在分析方法方面，还有很多需要研究的专题。随着计算机计算能力的发展和业务复杂性的提高，数据的类型会越来越多、越来越复杂，数据挖掘将发挥出越来越大的作用。</p>\n<p>经过大家的不懈努力，对疫情新闻的相关分析也已经完成。</p>\n<p>通过本次对该项目的研究，我们利用文本挖掘将大量繁琐复杂的新闻通过词云的方式进行展示，以及在数据预处理上对其采集的数据进行了数据清洗，得到了更标准、高质量的数据来提升分析的结果。</p>\n<p>总的体会可以用一句话来表达，纸上得来终觉浅，绝知此事要躬行!通过对中国社会组织公共服务平台的爬虫，我们也是了解到了许多在疫情期间让人感概落泪的故事以及政府在全力保护人民安全和健康所做出的一系列决策。</p>\n<p>从 tf-idf 权重计算和词云的展示中可以看到可以看到“疫情”、“组织”、“捐赠”、“社会”、“协会”、“肺炎”、“复工”等都是社会和政府共同关注的主题；</p>\n<p>在层次聚类中可以看出不同领域的关键词有着不同的聚类最终也都汇聚成一块；</p>\n<p>我们还发现在 LDA 主题模型中输出结果分成了两类，在某种意义上可理解为一类是疫情，一类是民生，也表明了政府在防疫、控制疫情蔓延的同时十分关心人民群众的生活，在中国政府的眼里，人民的健康和安全永远摆在第一位！</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"数据挖掘课程设计相关笔记\"><a href=\"#数据挖掘课程设计相关笔记\" class=\"headerlink\" title=\"数据挖掘课程设计相关笔记\"></a>数据挖掘课程设计相关笔记</h1><h2 id=\"01-爬虫\"><a href=\"#01-爬虫\" class=\"headerlink\" title=\"01 爬虫\"></a>01 爬虫</h2><p>利用 xpath 进行解构爬取数据，获取下一页的 url，不断循环爬取所有新闻文章。</p>\n<h2 id=\"02-jieba-分词、词云\"><a href=\"#02-jieba-分词、词云\" class=\"headerlink\" title=\"02 jieba 分词、词云\"></a>02 jieba 分词、词云</h2><h4 id=\"先读取-csv-文件中的新闻数据的标题和正文内容到-txt-文件中。\"><a href=\"#先读取-csv-文件中的新闻数据的标题和正文内容到-txt-文件中。\" class=\"headerlink\" title=\"先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。\"></a>先读取 csv 文件中的新闻数据的标题和正文内容到 txt 文件中。</h4><h4 id=\"然后进行-jieba-分词处理：\"><a href=\"#然后进行-jieba-分词处理：\" class=\"headerlink\" title=\"然后进行 jieba 分词处理：\"></a>然后进行 jieba 分词处理：</h4><ul>\n<li>精确模式，试图将句子最精确地切开，适合文本分析；</li>\n<li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li>\n<li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba<br><br>jieba.cut(data, cut_all=<span class=\"hljs-literal\">False</span>) <span class=\"hljs-comment\"># 精准模式</span><br>jieba.cut(data, cut_all=<span class=\"hljs-literal\">True</span>) <span class=\"hljs-comment\"># 全模式</span><br>jieba.cut_for_search(data)\t <span class=\"hljs-comment\"># 搜索引擎模式</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"分词之后进行简单的词频统计，此时过滤掉了字符串长度为-1-的字符。\"><a href=\"#分词之后进行简单的词频统计，此时过滤掉了字符串长度为-1-的字符。\" class=\"headerlink\" title=\"分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。\"></a>分词之后进行简单的词频统计，此时过滤掉了字符串长度为 1 的字符。</h4><h4 id=\"利用-pyecharts-进行绘制词云图，被保存-html-页面文件\"><a href=\"#利用-pyecharts-进行绘制词云图，被保存-html-页面文件\" class=\"headerlink\" title=\"利用 pyecharts 进行绘制词云图，被保存 html 页面文件\"></a>利用 pyecharts 进行绘制词云图，被保存 html 页面文件</h4><h2 id=\"03-TF-IDF\"><a href=\"#03-TF-IDF\" class=\"headerlink\" title=\"03 TF-IDF\"></a>03 TF-IDF</h2><h4 id=\"TF-IDF-Term-Frequency-Inverse-Document-Frequency-词频-逆文件频率\"><a href=\"#TF-IDF-Term-Frequency-Inverse-Document-Frequency-词频-逆文件频率\" class=\"headerlink\" title=\"TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).\"></a>TF-IDF(Term Frequency-Inverse Document Frequency, 词频-逆文件频率).</h4><h5 id=\"TFIDF-的主要思想是：如果某个词或短语在一篇文章中出现的频率-TF-高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\"><a href=\"#TFIDF-的主要思想是：如果某个词或短语在一篇文章中出现的频率-TF-高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\" class=\"headerlink\" title=\"TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类\"></a>TFIDF 的主要思想是：如果某个词或短语在一篇文章中出现的频率 TF 高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类</h5><p><strong>词频 (term frequency, TF)</strong> 指的是某一个给定的词语在该文件中出现的次数。</p>\n<p><strong>逆向文件频率 (inverse document frequency, IDF)</strong> 是一个词语普遍重要性的度量。某一特定词语的 IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。</p>\n<h5 id=\"IDF-log（语料库中文档总数-包含该词的文档数-1-）\"><a href=\"#IDF-log（语料库中文档总数-包含该词的文档数-1-）\" class=\"headerlink\" title=\"IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）\"></a>IDF = log（语料库中文档总数 / 包含该词的文档数 +1 ）</h5><h5 id=\"TFIDF-实际上是：TF-IDF\"><a href=\"#TFIDF-实际上是：TF-IDF\" class=\"headerlink\" title=\"TFIDF 实际上是：TF * IDF\"></a>TFIDF 实际上是：TF * IDF</h5><h5 id=\"基于-TF-IDF（term-frequency–inverse-document-frequency）-算法的关键词抽取\"><a href=\"#基于-TF-IDF（term-frequency–inverse-document-frequency）-算法的关键词抽取\" class=\"headerlink\" title=\"基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取\"></a>基于 TF-IDF（term frequency–inverse document frequency） 算法的关键词抽取</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> jieba.analyse<br><br>jieba.analyse.extract_tags(sentence, topK=<span class=\"hljs-number\">20</span>, withWeight=<span class=\"hljs-literal\">False</span>, allowPOS=())<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>sentence</strong> ：为待提取的文本</li>\n<li><strong>topK</strong>： 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li>\n<li><strong>withWeight</strong> ： 为是否一并返回关键词权重值，默认值为 False</li>\n<li><strong>allowPOS</strong> ： 仅包括指定词性的词，默认值为空，即不筛选</li>\n</ul>\n<h2 id=\"04-K-means-聚类\"><a href=\"#04-K-means-聚类\" class=\"headerlink\" title=\"04 K-means 聚类\"></a>04 K-means 聚类</h2><p>k：要得到的簇的个数</p>\n<p>质心：均值，向量各维取平均值即可，不断更新的</p>\n<p>距离的度量：常用欧式距离和余弦的相似度</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频</span><br>   vectorizer = CountVectorizer()<br>   <span class=\"hljs-comment\"># 该类会统计每个词语的tf-idf权值</span><br>   transformer = TfidfTransformer()<br>   <span class=\"hljs-comment\"># 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</span><br>   tfidf = transformer.fit_transform(vectorizer.fit_transform(corpus))<br>   <span class=\"hljs-comment\"># 获取词袋模型中的所有词语</span><br>   word = vectorizer.get_feature_names()<br>   <span class=\"hljs-comment\"># 将tf-idf矩阵抽取出来 元素a[i][j]表示j词在i类文本中的tf-idf权重</span><br>   weight = tfidf.toarray()<br></code></pre></td></tr></table></figure>\n\n<p>我们可以通过用 TD－IDF 衡量每个单词在文件中的重要程度。如果多个文件，它们的文件中的各个单词的重要程度相似，我就可以说这些文件是相似的。如何评价这些文件的相似度呢？一种很自然的想法是用两者的欧几里得距离来作为相异度，欧几里得距离的定义如下：</p>\n<!-- ![image-20210103154152791](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154152791.png) -->\n\n<p>其意义就是两个元素在欧氏空间中的集合距离，因为其直观易懂且可解释性强，被广泛用于标识两个标量元素的相异度。我们可以将 X，Y 分别理解为两篇文本文件，xi,y 是每个文件单词的 TD－IDF 值。这样就可以算出两文件的相似度了。这样我们可以将文件聚类的问题转化为一般性的聚类过程，样本空间中的两点的距离可以欧式距离描述。除欧氏距离外，常用作度量标量相异度的还有曼哈顿距离和闵可夫斯基距离，两者定义如下：</p>\n<!-- ![image-20210103154217134](C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103154217134.png) -->\n\n<p>整个文本聚类过程可以先后分为两步：1、计算文本集合各个文档中 TD－IDF 值，2，根据计算的结果，对文件集合用 k-means 聚类方法进行迭代聚类。</p>\n<p>有关 k-means 的详细介绍 <a href=\"https://blog.csdn.net/freesum/article/details/7376006\">https://blog.csdn.net/freesum/article/details/7376006</a></p>\n<h2 id=\"05-层次聚类\"><a href=\"#05-层次聚类\" class=\"headerlink\" title=\"05 层次聚类\"></a>05 层次聚类</h2><p>层次聚类的合并算法通过计算两类数据点间的相似性，对所有数据点中最为相似的两个数据点进行组合，并反复迭代这一过程。简单的说层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</p>\n<h4 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h4><p>1.计算每两个观测之间的距离</p>\n<p>2.将最近的两个观测聚为一类，将其看作一个整体计算与其它观测(类)之间的距离</p>\n<p>3.一直重复上述过程，直至所有的观测被聚为一类</p>\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> scipy.cluster.hierarchy <span class=\"hljs-keyword\">import</span> dendrogram, linkage, fcluster<br><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>X = [[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>]]<br><span class=\"hljs-built_in\">print</span>(X)<br>Z = linkage(X, <span class=\"hljs-string\">&#x27;ward&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(Z)<br>f = fcluster(Z, <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;distance&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(f)<br>fig = plt.figure(figsize=(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>))<br>dn = dendrogram(Z)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img  src=\"https://img-blog.csdnimg.cn/20190301181326559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpYm80OTIzODc=,size_16,color_FFFFFF,t_70\"  ><span class=\"image-caption\">img</span></p>\n<h2 id=\"06-lda-主题模型\"><a href=\"#06-lda-主题模型\" class=\"headerlink\" title=\"06 lda 主题模型\"></a>06 lda 主题模型</h2><p>LDA（Latent Dirichlet Allocation）是一种文档主题生成模型，也称为一个三层贝叶斯概率模型，包含词、主题和文档三层结构。所谓生成模型，就是说，我们认为一篇文章的每个词都是通过“以一定概率选择了某个主题，并从这个主题中以一定概率选择某个词语”这样一个过程得到。文档到主题服从多项式分布，主题到词服从多项式分布。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pyLDAvis<br><span class=\"hljs-comment\"># pyLDA需要先导入模型，支持的模型的来源有三种：</span><br>\t<span class=\"hljs-comment\"># sklearn的lda模型 （我们用的这种）</span><br>\t<span class=\"hljs-comment\"># gensim的lda模型</span><br>\t<span class=\"hljs-comment\"># graphlab的lda模型</span><br><span class=\"hljs-keyword\">from</span> sklearn.decomposition <span class=\"hljs-keyword\">import</span> LatentDirichletAllocation<br><span class=\"hljs-keyword\">import</span> pyLDAvis.sklearn<br></code></pre></td></tr></table></figure>\n\n<p>文档主题生成模型（Latent Dirichlet Allocation，简称 LDA）又称为盘子表示法（Plate Notation），下图是模型的标示图，其中双圆圈表示可测变量，单圆圈表示潜在变量，箭头表示两个变量之间的依赖关系，矩形框表示重复抽样，对应的重复次数在矩形框的右下角显示。LDA 模型的具体实现步骤如下：</p>\n<blockquote>\n<p>从每篇网页 D 对应的多项分布 θ 中抽取每个单词对应的一个主题 z。</p>\n</blockquote>\n<blockquote>\n<p>从主题 z 对应的多项分布 φ 中抽取一个单词 w。</p>\n</blockquote>\n<blockquote>\n<p>重复步骤 1 和 2，共计 Nd 次，直至遍历网页中每一个单词。</p>\n</blockquote>\n<img  src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103161446056.png\"   style=\"zoom: 50%;\" /><span class=\"image-caption\">image-20210103161446056</span>\n\n<h5 id=\"有关-LDA-只提模型原理的介绍-https-zhuanlan-zhihu-com-p-31470216\"><a href=\"#有关-LDA-只提模型原理的介绍-https-zhuanlan-zhihu-com-p-31470216\" class=\"headerlink\" title=\"有关 LDA 只提模型原理的介绍 https://zhuanlan.zhihu.com/p/31470216\"></a>有关 LDA 只提模型原理的介绍 <a href=\"https://zhuanlan.zhihu.com/p/31470216\">https://zhuanlan.zhihu.com/p/31470216</a></h5><h5 id=\"在生成的网页中的相关知识\"><a href=\"#在生成的网页中的相关知识\" class=\"headerlink\" title=\"在生成的网页中的相关知识\"></a>在生成的网页中的相关知识</h5><img  src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210103162718104.png\"   style=\"zoom:80%;\" /><span class=\"image-caption\">image-20210103162718104</span>\n\n<p>浅蓝色的表示这个词在整个文档中出现的频率（权重），深红色的表示这个词在这个主题中所占的权重。</p>\n<p>如果<code>λ</code>接近 1，那么在该主题下更频繁出现的词，跟主题更相关；<br>如果<code>λ</code>越接近 0，那么该主题下更特殊、更独有的词，跟主题更相关（有点 TF-IDF 的意思了）。</p>\n<p>所以我们可以通过调节<code>λ</code>的大小来改变词语跟主题的相关性，探索更加合理的主题意义。</p>\n<h2 id=\"07-结论\"><a href=\"#07-结论\" class=\"headerlink\" title=\"07 结论\"></a>07 结论</h2><p>在大数据时代下，当运用传统的数学方法遇到困难时，熟练地应用数据挖掘技术显得格外重要。文本数据挖掘并不是一件容易的事情，尤其是在分析方法方面，还有很多需要研究的专题。随着计算机计算能力的发展和业务复杂性的提高，数据的类型会越来越多、越来越复杂，数据挖掘将发挥出越来越大的作用。</p>\n<p>经过大家的不懈努力，对疫情新闻的相关分析也已经完成。</p>\n<p>通过本次对该项目的研究，我们利用文本挖掘将大量繁琐复杂的新闻通过词云的方式进行展示，以及在数据预处理上对其采集的数据进行了数据清洗，得到了更标准、高质量的数据来提升分析的结果。</p>\n<p>总的体会可以用一句话来表达，纸上得来终觉浅，绝知此事要躬行!通过对中国社会组织公共服务平台的爬虫，我们也是了解到了许多在疫情期间让人感概落泪的故事以及政府在全力保护人民安全和健康所做出的一系列决策。</p>\n<p>从 tf-idf 权重计算和词云的展示中可以看到可以看到“疫情”、“组织”、“捐赠”、“社会”、“协会”、“肺炎”、“复工”等都是社会和政府共同关注的主题；</p>\n<p>在层次聚类中可以看出不同领域的关键词有着不同的聚类最终也都汇聚成一块；</p>\n<p>我们还发现在 LDA 主题模型中输出结果分成了两类，在某种意义上可理解为一类是疫情，一类是民生，也表明了政府在防疫、控制疫情蔓延的同时十分关心人民群众的生活，在中国政府的眼里，人民的健康和安全永远摆在第一位！</p>\n"},{"title":"随笔记","_content":"# 随笔记\n\n我想说，无论处在哪个阶段的人，都会面临这种自我怀疑的艰苦时光。但是自我怀疑和气馁是好事，说明自己在向前探索，在进步。但是如果，这种质疑和压力已经给生活造成了巨大的困扰，那放弃也没有什么关系。毕竟人生没有什么政治正确和非做不可的成就。如果有，那也应该是 relax and be happy 。\n\n----2021.5.31\n\n\n\n------\n\n","source":"_posts/随笔记.md","raw":"---\ntitle: 随笔记\ncategories:  #设置分类\n- 随笔\n---\n# 随笔记\n\n我想说，无论处在哪个阶段的人，都会面临这种自我怀疑的艰苦时光。但是自我怀疑和气馁是好事，说明自己在向前探索，在进步。但是如果，这种质疑和压力已经给生活造成了巨大的困扰，那放弃也没有什么关系。毕竟人生没有什么政治正确和非做不可的成就。如果有，那也应该是 relax and be happy 。\n\n----2021.5.31\n\n\n\n------\n\n","slug":"随笔记","published":1,"date":"2021-12-31T02:15:52.914Z","updated":"2021-12-31T02:17:57.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrpxre0002mc8iep5efssy","content":"<h1 id=\"随笔记\"><a href=\"#随笔记\" class=\"headerlink\" title=\"随笔记\"></a>随笔记</h1><p>我想说，无论处在哪个阶段的人，都会面临这种自我怀疑的艰苦时光。但是自我怀疑和气馁是好事，说明自己在向前探索，在进步。但是如果，这种质疑和压力已经给生活造成了巨大的困扰，那放弃也没有什么关系。毕竟人生没有什么政治正确和非做不可的成就。如果有，那也应该是 relax and be happy 。</p>\n<p>—-2021.5.31</p>\n<hr>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"随笔记\"><a href=\"#随笔记\" class=\"headerlink\" title=\"随笔记\"></a>随笔记</h1><p>我想说，无论处在哪个阶段的人，都会面临这种自我怀疑的艰苦时光。但是自我怀疑和气馁是好事，说明自己在向前探索，在进步。但是如果，这种质疑和压力已经给生活造成了巨大的困扰，那放弃也没有什么关系。毕竟人生没有什么政治正确和非做不可的成就。如果有，那也应该是 relax and be happy 。</p>\n<p>—-2021.5.31</p>\n<hr>\n"},{"title":"小程序开发学习笔记","_content":"# 小程序开发学习笔记\n\n## 基础课程部分\n\n#### 微信公众平台\n\n[https://mp.weixin.qq.com/(opens new window)](https://mp.weixin.qq.com/)\n\n注册时可选择类型：订阅号、服务号、小程序、企业微信\n\n**每个邮箱仅能注册一个小程序。**\n\n个人类型小程序：无法使用微信支付、无法使用卡包功能\n\n##### 小程序文档API\n\n[小程序开发文档(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/)\n\n##### 微信开放社区\n\n[微信开发社区(opens new window)](https://developers.weixin.qq.com/community/develop/question)\n\n#### [#]( #目录说明)目录说明\n\n**默认目录**\n\npages-----------------------页面相关\n\n​\tindex ----------------- 首页文件夹\n\n​\tindex.js ------------首页js\n\n​\tindex.json---------首页配置\n\n​\tindex.wxml-------首页html\n\n​\tindex.wxss--------首页css\n\nutils------------------------工具相关\n\napp.js ----------------------项目总js\n\napp.json-------------------全局配置( 页面路由以及头部、底部导航的配置等)\n\napp.wxss -----------------项目总样式css\n\nproject.config.json ----项目配置\n\n**代码构成**\n\n.json ：配置文件，以json格式存储配置\n\n​\t项目中有三种配置：项目配置（project.config.json）、全局配置（app.json）、页面配置（index.json）\n\n.wxml: 相当于html文件\n\n.wxss: 相当于css\n\n.js : 就是js\n\n#### [#]( #文件说明)文件说明\n\n**project.config.json项目配置 部分代码说明**\n\nsetting：{\n\nurlCheck 是否检测安全的域名\n\nes6 是否把es6转es5\n\npostcss 是否把css样式自动补全\n\nminified 是否压缩\n\n}\n\n**app.json 全局配置**\n\n[全局配置API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html)\n\n**wxml 相关介绍**\n\n[wxmlAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/)\n\n```html\n<view>{{motto}}</view>\n\n循环渲染\n<view wx:for=\"{{list}}\" wx:key=\"{{index}}\">\n      {{index}} {{item}}\n</view>\n\n改变for循环item和index的名称\n<block wx:for=\"{{list}}\" wx:for-item=\"data\" wx:for-index=\"inx\">\n\t{{inx}} {{data}}\n</block>\n\n条件渲染 (类似vue的v-if、v-else)\n<view wx:if=\"{{isLogin}}\">已登录</view>\n<view wx:else>请登录</view>\n\n条件显示（类似vue的v-show）\n<view hidden=\"{{isLogin}}\">显示内容</view>\n\n绑定点击事件\n<button bindtap=“tapName”>按钮</button>\n\nPage({\n  tapName: function(event) {\n    console.log(event)\n  }\n})\n...\n```\n\n**wxss 相关介绍**\n\n[wxssAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html)\n\n尺寸单位：rpx，根据屏幕宽度自适应。\n\n引入外部wxss：@import ’...‘\n\n**js相关介绍**\n\nWXS（WeiXin Script）是小程序的一套脚本语言\n\n[wxsAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/)\n\n绑定点击事件\n\n```html\n<button bindtap=“onTapHandler”>点我+1</button>\n<view>{{count}}</view>\n```\n\n\n\n```js\nPage({\n  data: {\n    count: 0\n  },\n  onTapHandler: function() {\n  \tthis.setData({\n  \t\tcount: this.data.count++\n  \t})\n  }\n})\n```\n\n##### [#]( #阻止事件冒泡)阻止事件冒泡\n\n把绑定方式 bindtap 换成 catchtap 即可。\n\n#### [#]( #第三方库)第三方库\n\n**WeUI**\n\nweUI是一套同微信原生视觉体验一致的基础样式库\n\n**iView Weapp**\n\n一套高质量的微信小程序UI组件库\n\n**Vant Weapp**\n\n轻量、可靠的小程序UI组件库\n\n#### [#]( #云开发)云开发\n\n**小程序传统开发模式**\n\n客户端 -----> 服务端（后端代码、数据库）------> 运维（DB维护、文件存储、内容加速、网络防护、容器服务、负载均衡、安全加固等...）\n\n**小程序云开发模式**\n\n客户端 -----> 云开发（云函数、云数据库、云存储）\n\n**传统开发 VS 云开发**\n\n开发效率低 Serverless（无服务）\n\n运维成本高 开发者更关注业务逻辑\n\n**无服务（Serverless）开发是未来的发展趋势**\n\n##### [#]( #云开发三大基础能力)**云开发三大基础能力**\n\n##### [#]( #云函数)云函数\n\n（相当于传统开发中的后台接口）\n\n获取appid、获取openid、生成分享图、调用腾讯云SDK ...\n\n##### [#]( #云数据库)云数据库\n\n数据的增、删、改、查 ...\n\n##### [#]( #云存储)云存储\n\n管理文件、上传文件、下载文件、分享文件 ...\n\n**每个小程序账号可免费创建两个环境，建议：开发环境、生成环境**\n\n#### [#]( #云数据库能力)云数据库能力\n\n云开发提供了一个json数据库，提供2GB免费存储空间。\n\n#### [#]( #数据类型)数据类型\n\nString 字符串\n\nNumber 数字\n\nObject 对象\n\nArray 数组\n\nBoolean 布尔值\n\nGeoPoint 地理位置点\n\nDate 时间 （精确到毫秒ms，客户端时间）\n\nNull 空\n\n#### [#]( #操作云数据库)操作云数据库\n\n小程序控制（读写数据库受权限限制）\n\n云函数控制（拥有所有读写数据库的权限）\n\n控制台控制（拥有所有读写数据库的权限）\n\n#### [#]( #云数据库权限管理)云数据库权限管理\n\n仅创建者可写，所有人可读 （适合于文章）\n\n仅创建者可读写 (适用于私密内容)\n\n仅管理端可写，所有人可读（适用于商品信息）\n\n仅管理端可读写（适用于后台敏感数据）\n\n#### [#]( #操作云数据库-2)操作云数据库\n\n```js\n//初始化数据库\nconst db = wx.cloud.database() // 小程序端初始化数据库，如果在云函数端不需要加wx\n\n//切换环境(开发环境/生产环境)\nconst testDB = wx.cloud.database({\n\tenv: 'test'\n})\n```\n\n\n\n## [#]( #实战课程部分)实战课程部分\n\n#### [#]( #serverless-无服务)serverless（无服务）\n\n概念：函数即服务，当需要后端服务的时候，不需要关心后端的IP地址、域名，只需要像调用普通函数一样既可以实现调用。\n\n#### [#]( #云开发优势)云开发优势\n\n快速上线、专注核心业务、独立开发一个完整的微信小程序、不需要学习新的语言，只需要会javascript、无需运维， 节约成本、数据安全、\n\n#### [#]( #云开发提供能力)云开发提供能力\n\n云函数：在云端运行的代码，微信私有协议天然鉴权 （理解：相当于后端部分）\n\n云数据库：一个既可以在小程序端操作又可以在云函数中操作的JSON数据库\n\n云存储：在云端存储文件，可以在云端控制台可视化管理\n\n云调用：基于云函数免鉴权使用小程序开放接口的能力（比如说给用户推送消息等）\n\nHTTP API：使用HTTP API开发者可在已有服务器上访问云资源，实现与云开发的互通（作用：对原有传统模式下开发的小程序，可以与云开发进行互通）\n\n#### [#]( #appid)appID\n\n每个小程序唯一的id\n\n#### [#]( #云开发项目默认目录结构)云开发项目默认目录结构\n\ncloudfunctions ----------------------------云函数\n\n​\tcallback ---------------------------------- 回调函数\n\n​\tconfig.json ---------------------------\n\n​\tindex.js --------------------------------\n\n​\tpackage.json ------------------------\n\n​\techo ----------------------------------------\n\n​\tlogin ----------------------------------------\n\n​\topenapi -----------------------------------\n\nminiprogram ------------------------------- 小程序\n\n​\timages ------------------------------------- 图片\n\n​\tpages --------------------------------------- 页面\n\n​\tstyle ----------------------------------------- 样式\n\n​\tapp.js --------------------------------------- 项目js\n\n​\tapp.json ----------------------------------- 全局配置\n\n​\tapp.wxss ---------------------------------- 项目样式\n\n​\tsitemap.json ----------------------------- （小程序SEO相关）\n\nproject.config.json ----------------------- 项目配置\n\n#### [#]( #云开发环境)云开发环境\n\n云开发可创建两个环境，建议一个为开发环境，一个为生产环境\n\n#### [#]( #开发前的准备)开发前的准备\n\n开发工具 > 右上角详情 > 本地设置 > 调试基础库 设置为最新版本\n\napp.js > wx.cloud.init > env 设置环境ID\n\n#### [#]( #project-config-json-文件说明)project.config.json 文件说明\n\nminiprogramRoot 小程序前端代码目录\n\ncloudfunctionRoot 云函数代码目录\n\n#### [#]( #app-json)app.json\n\npages 设置页面 ，设置后会自动在pages目录下生成相应的目录和文件\n\n设置底部导航按钮：\n\n```json\n\"tabBar\": {\n    \"color\": \"#474747\", // 文字颜色\n    \"selectedColor\": \"#d43c43\", // 文字选中颜色\n    \"list\": [{ // 按钮列表，2-5项\n      \"pagePath\": \"pages/playlist/playlist\", // 按钮对应页面\n      \"text\": \"音乐\", // 文字\n      \"iconPath\": \"images/music.png\", // 图标路径\n      \"selectedIconPath\": \"images/music-actived.png\" // 选中图标的路径\n    },\n    {\n      \"pagePath\": \"pages/blog/blog\",\n      \"text\": \"发现\",\n      \"iconPath\": \"images/blog.png\",\n      \"selectedIconPath\": \"images/blog-actived.png\"\n    },\n    {\n      \"pagePath\": \"pages/profile/profile\",\n      \"text\": \"我的\",\n      \"iconPath\": \"images/profile.png\",\n      \"selectedIconPath\": \"images/profile-actived.png\"\n    }]\n  }\n```\n\n\n\n> 图标来自于 [https://www.iconfont.cn(opens new window)](https://www.iconfont.cn/)\n>\n> 阿里巴巴图标库，包含矢量图标、字体图标、字体等\n\n#### [#]( #代码规范)代码规范\n\n很多公司借鉴的代码规范：[https://github.com/airbnb/javascript(opens new window)](https://github.com/airbnb/javascript)\n\n#### [#]( #《音乐》页面开发)《音乐》页面开发\n\n```html\n <!-- 轮播图组件 参数：indicator-dots 小圆点，autoplay 自动播放, interval 间隔时间，duration 动画时长 -->\n<swiper indicator-dots=\"true\" circular=\"true\" interval=\"3000\" duration=\"500\">\n  <block wx:for=\"{{swiperImgUrls}}\" wx:key=\"{{index}}\"> <!-- 空节点 -->\n    <swiper-item>\n      <image src=\"{{item.url}}\" mode=\"widthFix\" class=\"img\"></image>\n    </swiper-item>\n  </block>\n</swiper>\n```\n\n\n\n#### [#]( #自定义组件)自定义组件\n\n**创建组件**\n\n创建目录 components > 组件目录名称 > 右键 `新建Component`\n\n##### [#]( #引入组件)**引入组件**\n\n在page的json文件中：\n\n```json\n{\n  \"usingComponents\": {\n    \"x-playlist\":\"/components/playlist/playlist\"\n  }\n}\n```\n\n在page的wxml中：\n\n```html\n<x-playlist> </x-playlist>\n```\n\n**页面引入组件以及组件内部在引用子组件的方法是一样的，同样需要设置json文件。**\n\n##### [#]( #组件传值)**组件传值**\n\n父组件中：在引入组件的时候自定义属性名称，并把数据传入子组件\n\n```html\n<!-- 参数：playlist 自定义名称，传入组件的数据 -->\n<x-playlist playlist=\"{{传入的数据}}\"></x-playlist>\n```\n\n子组件中： 子组件的js文件：\n\n```js\n  /**\n   * 组件的属性列表\n   */\n  properties: {\n    playlist:{ // 接收父组件传输的数据\n      type: Object // 数据类型\n    }\n   },\n\n //子组件的wxml文件可直接引入数据{{playlist}}\n```\n\n#### [#]( #wx-key-的使用)wx:key 的使用\n\nkey的值不建议使用index，因为当数据发生变化会dom结构产生变化时，使用index的地方不会随之变化。\n\n可以使用数据内部每项不一样的一个数值，如id\n\n```html\n<block wx:for=\"{{swiperImgUrls}}\" wx:key=\"url\"> 这里url不需要双大括号，如使用index则需要{{}}\n    <view>\n      <image src=\"{{item.url}}\" mode=\"widthFix\" class=\"img\"></image>\n    </view>\n</block>\n\n<view class=\"playlist-container\">\n  <block wx:for=\"{{playlist}}\" wx:key=\"_id\">\n    <!-- 参数：playlist 自定义名称，传入组件的数据 -->\n    <x-playlist playlist=\"{{item}}\"></x-playlist>\n  </block>\n</view>\n```\n\n#### [#]( #async-await-语法)async/await 语法\n\n目前，在云函数里，由于 Node 版本最低是 8.9，因此是天然支持 async/await 语法的。而在小程序端则不然。在微信开发者工具里，以及 Android 端手机（浏览器内核是 QQ浏览器的 X5），async/await是天然支持的，但 iOS 端手机在较低版本则不支持，因此需要引入额外的 文件。\n\n可把这个 [runtime.js (opens new window)](https://github.com/xiecheng328/miniprogram/blob/master/regenerator/runtime.js)文件引用到有使用 async/await 的文件当中。\n\n```js\n// 注意，必须命名为 regeneratorRuntime\nimport regeneratorRuntime from '../../utils/runtime.js'\n```\n\n\n\n#### [#]( #云函数的使用)云函数的使用\n\ncloudfunctions目录 右键 `新建 Node.js 云函数` > 输入目录名 `getPlaylist`\n\n在云函数中向第三方服务器发送请求要依赖第三方库\n\n**安装依赖包**\n\n云函数目录 `getPlaylist` 右键 `在终端打开` 打开命令行 输入命令：\n\n```sh\nnpm install --save request\nnpm install --save request-promise\n```\n\n\n\ngithub request-promise：[https://github.com/request/request-promise(opens new window)](https://github.com/request/request-promise)\n\n然后写相应代码\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst rp = require('request-promise') // 需安装依赖包\n\nconst URL = 'http://musicapi.xiecheng.live/personalized'\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const playlist = await rp(URL).then((res) => {\n    return JSON.parse(res).result\n  })\n  console.log(playlist)\n}\n```\n\n\n\n写完代码，云函数目录 `getPlaylist` 右键 `上传并部署：云端安装依赖（不上传node_modules）` 进行上传部署代码到云端，等待上传成功，打开云开发控制台即可看到已经上传的云函数，并可对云函数进行测试。\n\n##### [#]( #数据库操作)数据库操作\n\n数据库> 创建集合 > playlist\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst db = cloud.database() // 初始化数据库,如果在小程序端初始化数据库需要在前面加wx.\n\nconst rp = require('request-promise') // 需安装依赖包\n\nconst URL = 'http://musicapi.xiecheng.live/personalized' // 第三方服务器地址（老师从网易云获取的数据部署在其服务器，每天的数据会更新）\n\nconst playlistCollection = db.collection('playlist') // 获取到数据库playlist集合\n\nconst MAX_LIMIT = 10 // 定义常量，获取数据库条数最大的限制\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  /**\n   * 注：\n   * - 关于数据库的操作都是异步操作，都需添加await关键字\n   * - console.log 打印在云开发控制台 云函数测试内查看\n   * - 单次获取数据库数据有条数限制，云函数端最多获取100条，小程序端最多获取20条\n   */\n\n  // const list = await playlistCollection.get() // 获取数据库集合的数据 （因为有条数限制，不直接用此方法）\n\n  // 突破条数限制 （为了读取到全部数据然后与第三方服务器获取的数据进行对比去重）\n  const countResult = await playlistCollection.count() // 获取数据总条数 返回为对象\n  const total = countResult.total // 取得总条数\n  const batchTimes = Math.ceil(total / MAX_LIMIT)\n  const tasks = []\n  for(let i = 0; i < batchTimes; i++) {\n    let promise = playlistCollection.skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() // 从第 skip 条开始取，最多取 limit 条数据\n    tasks.push(promise)\n  }\n  let list = {\n    data: []\n  }\n  if (tasks.length > 0) {\n    list = (await Promise.all(tasks)).reduce((acc, cur) => { // reduce数组方法 累积拼接\n      return {\n        data: acc.data.concat(cur.data)\n      }\n    })\n  }\n\n  // 获取第三方服务器端数据\n  const playlist = await rp(URL).then((res) => {\n    return JSON.parse(res).result\n  })\n\n  // 数据库与服务器数据对比去重（数据已存在数据库的无需再重复添加）\n  const newData = []\n  for(let i = 0, len1 = playlist.length; i < len1; i++) {\n    let flag = true\n    for(let j = 0, len2 = list.data.length; j < len2; j++) {\n      if(playlist[i].id === list.data[j].id){\n        flag = false\n        break\n      }\n    }\n    if(flag){\n      newData.push(playlist[i])\n    }\n  }\n\n  // 把数据插入数据库，需要单条插入\n  for (let i = 0, len = newData.length; i < len; i++) {\n    await playlistCollection.add({ // 给数据库集合添加数据\n      data: {\n        ...newData[i],\n        createTime: db.serverDate(), // db.serverDate() 获取服务器时间\n      }\n    }).then((res) => { // 数据添加成功\n      console.log('数据添加成功')\n    }).catch((err) => { // 失败\n      console.error(err)\n    })\n  }\n  return newData.length // 插入多少条数据\n}\n```\n\n\n\n##### [#]( #查询数据库)查询数据库\n\n```js\n//云函数中查询数据库的例子：\n\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst TcbRouter = require('tcb-router')\nconst db = cloud.database() // 初始化数据库\nconst blogCollection = db.collection('blog') // 博客的数据库集合\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const app = new TcbRouter({ event }) // 初始化TcbRouter\n\n  app.router('list', async (ctx, next) => {\n    // skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序\n    ctx.body =  await blogCollection.skip(event.start).limit(event.count)\n    .orderBy('createTime', 'desc').get().then((res) => {\n      return res.data\n    })\n\n  })\n\n\n  return app.serve() // 必需返回\n}\n```\n\n\n\n##### [#]( #云函数调试)云函数调试\n\n云控制台中可会云函数进行云端测试\n\n在小程序调用云函数后，可查看云函数**日志**\n\n#### [#]( #定时触发云函数)定时触发云函数\n\n如果云函数需要定时 / 定期执行，也就是定时触发，我们可以使用云函数定时触发器。配置了定时触发器的云函数，会在相应时间点被自动触发，函数的返回结果不会返回给调用方\n\n云函数目录下新建 config.json\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html)\n\n```json\n{\n  \"triggers\": [\n    {\n      \"name\": \"myTriggers\",\n      \"type\": \"timer\",\n      \"config\":\"0 0 10,14,16,20 * * * *\" //表示每天的10点、14点、16点、20点触发一次\n    }\n  ]\n}\n```\n\n\n\n编辑好触发器之后，要在云函数目录 > 右键 > `上传触发器`\n\n#### [#]( #配置云函数超时时间)配置云函数超时时间\n\n当云函数比较复杂的时候，默认的超时时间3秒可能不能够满足需求，可以适当的设置更为合理的时间\n\n云开发控制台 > 云函数 > 配置 > 超时时间\n\n#### [#]( #上拉加载与下拉刷新)上拉加载与下拉刷新\n\n```js\npage页面json中：\n\"enablePullDownRefresh\": true\n\n\npage页面js中有这两个函数：\n\n /**\n   * 页面相关事件处理函数--监听用户下拉动作\n   */\n  onPullDownRefresh: function() {\n\t this.setData({\n      playlist: []\n    })\n    this._getPlaylist()\n  },\n\n  /**\n   * 页面上拉触底事件的处理函数\n   */\n  onReachBottom: function() {\n    this._getPlaylist()\n  },\n\n\n\n 下拉刷新请求完数据后\n wx.stopPullDownRefresh() // 停止下拉刷新动画\n```\n\n#### [#]( #云函数路由优化tcb-router)云函数路由优化tcb-router\n\n一个用户在一个云环境只能创建50个云函数\n\n假如小程序非常复杂，50个云函数不能够满足业务需求怎么办？\n\n相似的请求归类到同一个云函数处理\n\ntcb-router是一个koa风格的云函数路由库\n\n通俗理解就是可以把很多个接口归类到同一个云函数内。\n\ngithub-tcb-router: [https://github.com/TencentCloudBase/tcb-router(opens new window)](https://github.com/TencentCloudBase/tcb-router)\n\nkoa洋葱模型...\n\n安装：\n\n```sh\n在使用到tcb-router的云函数目录下打开命令行，输入命令进行安装\nnpm install --save tcb-router\n```\n\n\n\n```js\n// 云函数的 index.js\nconst TcbRouter = require('router'); // 必需\n\nexports.main = (event, context) => {\n    const app = new TcbRouter({ event });// 必需\n\n    // app.use 表示该中间件会适用于所有的路由(全局中间件) 非必需\n    app.use(async (ctx, next) => { // 这个中间件表示所有路由都会调用到，而路由中间件为单独调用\n        ctx.data = {}; // 获取要传给小程序端的数据\n        ctx.data.openId = event.userInfo.openId // 这里获取到的openId将分布到所有路由\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为数组表示，该中间件适用于 user 和 timer 两个路由\n    app.router(['user', 'timer'], async (ctx, next) => {\n        ctx.data.company = 'Tencent'; // 这里获取到的数据将分布到 user 和 timer 两个路由\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为字符串，该中间件只适用于 user 路由\n    app.router('user', async (ctx, next) => {\n        ctx.data.name = 'heyli';  // 获取要传给小程序端的数据\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = 'male'; // 获取要传给小程序端的数据\n        await next(); // 执行下一中间件\n    }, async (ctx) => {\n        ctx.data.city = 'Foshan'; // 获取要传给小程序端的数据\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data};  // 要传给小程序端的数据\n    });\n\n    // 路由为字符串，该中间件只适用于 timer 路由\n    app.router('timer', async (ctx, next) => {\n        ctx.data.name = 'flytam';\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = await new Promise(resolve => {\n        // 等待500ms，再执行下一中间件\n        setTimeout(() => {\n            resolve('male');\n        }, 500);\n        });\n        await next(); // 执行下一中间件\n    }, async (ctx)=>  {\n        ctx.data.city = 'Taishan';\n\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data };\n    });\n\n    return app.serve(); // 必需\n\n}\n\n\n小程序端：\n\n// 调用名为 router 的云函数，路由名为 user\nwx.cloud.callFunction({\n    // 要调用的云函数名称\n    name: \"router\",\n    // 传递给云函数的参数\n    data: {\n        $url: \"user\", // 要调用的路由的路径，传入准确路径或者通配符*\n        other: \"xxx\"\n    }\n}).then((res) => {\n\tconsole.log(res)\n})\n```\n\n上面tcb-router代码会按照洋葱模型执行，即先从上往下逐个进入中间件，再从下往上逐个退出中间件。\n\n#### [#]( #本地存储-缓存)本地存储（缓存）\n\n```js\n// 存储：\nwx.setStorageSync(key, data) // 同步存储（存储成功再继续下一步操作）\nwx.setStorage(key, data) // 异步存储（即使存储没成功也会执行下一步代码）、\n\n// 读取：\nwx.getStorageSync(key) // 同步 （读取到数据在进行下一步操作）\nwx.setStorage(key) // 异步\n```\n\n\n\n#### [#]( #api设置title)api设置title\n\n```js\nwx.setNavigationBarTitle({\n      title: '',\n})\n```\n\n\n\n#### [#]( #背景播放音)背景播放音\n\n[BackgroundAudioManager (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html)全局唯一的背景音频管理器\n\n```json\n// 需要在app.json配置，才能使用后台音乐播放的能力\n\n\"requiredBackgroundModes\": [\"audio\", \"location\"]\n```\n\n\n\n```js\n// 获取全局唯一的背景音频管理器\nconst backgroundAudioManager = wx.getBackgroundAudioManager()\n\n\nbackgroundAudioManager.src = 音频链接\nbackgroundAudioManager.title = 音频标题\n```\n\n\n\n#### [#]( #createselectorquery查询节点信息)createSelectorQuery查询节点信息\n\n[createSelectorQuery (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html)小程序的方法，用于查询节点等操作\n\n```js\nconst query = wx.createSelectorQuery()\nquery.select('#the-id').boundingClientRect() // 节点的布局信息\nquery.selectViewport().scrollOffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n```\n\n\n\n#### [#]( #组件内的方法)组件内的方法\n\n[Component(Object object)(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html)\n\n#### [#]( #组件生命周期)组件生命周期\n\n[lifetimes(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html)\n\n```js\n// 生命周期\nlifetimes: {\n    ready() { // 在组件在视图层布局完成后执行\n   \t ...\n    }\n},\n```\n\n\n\n##### [#]( #组件所在页面的生命周期)组件所在页面的生命周期\n\n```js\nComponent({\n  pageLifetimes: {\n    show: function() {\n      // 页面被展示\n    },\n    hide: function() {\n      // 页面被隐藏\n    },\n    resize: function(size) {\n      // 页面尺寸变化\n    }\n  }\n})\n```\n\n#### 对数据的监听\n\n[observers(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html)\n\n```js\nobservers: { // 对数据的监听(数据初次加载完成也会执行)\n    监听的数据对象(newData){\n      console.log(newData)\n    }\n},\n```\n\n\n\n#### [#]( #子组件自定义事件传递给父组件)子组件自定义事件传递给父组件\n\n```text\n子组件js：\n// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）\nthis.triggerEvent('自定义事件名', 参数x)\n\n\n父组件wxml：\n<子组件标签 bind:自定义事件名=\"执行的事件\" />\n\n父组件js：\n执行的事件(event) {\n\tconsole.log(event.detil.参数)\n}\n```\n\n\n\n#### [#]( #父组件自定义事件传递给子组件)父组件自定义事件传递给子组件\n\n```text\n父组件wxml：\n<子组件标签 class=\"子组件类名\">\n\n父组件JS：\n// 选择组件，并传入事件和参数\nthis.selectComponent('.子组件类名').自定义事件名(传入参数)\n\n子组件js：\nmethods: {\n\t自定义事件名(参数x){\n\t\tconsole.log(参数x)\n\t}\n}\n```\n\n\n\n#### [#]( #兄弟组件间传递事件和传值)兄弟组件间传递事件和传值\n\n```text\n例子：子组件1向子组件2传递参数\n\n父组件wxml中：\n<子组件标签1 bind:自定义事件名1=\"执行的事件\">\n<子组件标签2 class=\"子组件2类名\">\n\n父组件js：\n执行的事件(event) {\n\tthis.selectComponent('.子组件2类名').自定义事件名2(event.detil.参数x) // 向子组件2传值\n}\n\n子组件1js：\n// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）\nthis.triggerEvent('自定义事件名1', 参数x)\n\n\n\n子组件2js：\nmethods: {\n\t自定义事件名2(参数x){\n\t\tconsole.log(参数x)  // 接收父组件传入的值\n\t}\n}\n\n```\n\n#### [#]( #获取手机信息)获取手机信息\n\n[wx.getSystemInfo(Object object)(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html)\n\n```js\nwx.getSystemInfo({\n\tsuccess(res){\n\t\tconsole.log(res) //手机信息\n\t}\n})\n```\n\n#### [#]( #滚动组件)滚动组件\n\n[scroll-view(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)\n\n```html\n<scroll-view scroll-y scroll-top=\"{{scrollTop}}\" scroll-with-animation=\"true\">\n</scroll-view>\n```\n\n\n\n#### [#]( #全局属性、方法-类似vuex)全局属性、方法（类似vuex）\n\n```text\n在app.js中：\n\nonLaunch: function () {\n\tthis.globalData = {// 设置全局属性、方法\n\t\ttest: 0\n\t}\n},\nsetGlobalData(dataItem, val) { // 设置全局属性\n\tthis.globalData[dataItem] = val\n},\ngetGlobalData(dataItem) { // 获取全局属性\n\treturn this.globalData[dataItem]\n}\n\n\n在需要调用的页面js中：\nconst app = getApp() // 在最顶部先调用app方法\n\n// 设置全局属性\napp.setGlobalData('test', 1)\n\n// 获取全局属性\napp.getGlobalData('test')\n```\n\n\n\n#### [#]( #消息提示框)消息提示框\n\n[showToast(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n```js\nwx.showToast({\n  title: '成功',\n  icon: 'success', //图标： success 成功、loading 加载中、none 无\n  duration: 2000\n})\n```\n\n\n\n## [#]( #《发现》页面)《发现》页面\n\n#### [#]( #调用组件外部的样式)调用组件外部的样式\n\ncomponents内部的组件无法直接调用外部的样式。可通过以下方式调用组件外部样式：\n\n**方法一：**\n\n```text\n父组件wxml：\n<!-- iconfont 和 icon-sousuo 是传入组件内部的样式名称，iconfont（自定义名称）=\"iconfont（外部样式文件中定义的样式名）\"  -->\n<x-search iconfont=\"iconfont\" icon-sousuo=\"icon-sousuo\"/>\n\n\n子组件js:\n// 组件外部样式\n  externalClasses: [\n    'iconfont', // 对应的是上面等号前面的名称\n    'icon-sousuo'\n  ],\n\n 子组件wxml： 即可实现调用组件外的样式\n <i class=\"iconfont icon-sousuo\" />\n\n\n  注意：如果想在组件内部再次修改样式，不能够引用外部传进来的class名称进行修改，可以另起一个class名称进行修改。\n```\n\n\n\n**方法二：**\n\n[消除样式隔离(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#组件样式隔离)\n\n```js\n组件内:\nComponent({\n  options: {\n    styleIsolation: 'apply-shared'\n  }\n})\n```\n\n\n\n#### [#]( #组件插槽slot)组件插槽slot\n\n**单个插槽**\n\n```text\n父组件调用传入插槽内容:\n<组件标签>\n    <view>\n      <view>插槽内容</view>\n      <view>插槽内容</view>\n    </view>\n</组件标签>\n\n 组件内部定义slot标签:\n <view>\n    <!-- slot插槽 -->\n    <slot></slot>\n</view>\n```\n\n\n\n**如果需要实现多个插槽**\n\n```text\n父组件调用传入插槽内容:\n<组件标签>\n    <view slot=\"slot2\">\n      <view>插槽1内容</view>\n      <view>插槽1内容</view>\n    </view>\n\n     <view slot=\"slot1\">\n      <view>插槽2内容</view>\n      <view>插槽2内容</view>\n    </view>\n</组件标签>\n\n组件js :\noptions: {// 设置\n    multipleSlots: true // 打开多个插槽功能\n},\n\n\n组件内部定义slot标签:\n<view>\n    <!-- slot插槽 具名插槽-->\n    <slot name=\"slot1\"></slot>\n    <slot name=\"slot2\"></slot>\n</view>\n```\n\n\n\n#### [#]( #判断用户授权)判断用户授权\n\n[授权(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)\n\n```js\n// 判断用户是否授权\n    wx.getSetting({\n      success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n        console.log(res)\n        if (res.authSetting['scope.userInfo']) { // 已授权\n         wx.getUserInfo({ // 获取用户信息\n           success(res) {\n             console.log(res)\n           }\n         })\n        } else { // 未授权\n\n        }\n      }\n    })\n```\n\n\n\n#### [#]( #button的开发能力-获取用户信息-1)button的开发能力（获取用户信息）1\n\n```js\n<button class=\"login\"\n    open-type=\"getUserInfo\"\n    bindgetuserinfo=\"onGetUserInfo\"     // bindgetuserinfo 为固定的\n>\n\t获取微信授权信息\n</button>\n\n\nbindgetuserinfo 事件会询问用户是否同意授权\n\n\njs中：\n    onGetUserInfo(event) { // 获取用户信息\n      const userInfo = event.detail.userInfo\n      if (userInfo) { // 用户允许授权\n        this.setData({\n          modalShow: false\n        })\n        this.triggerEvent('loginSuccess', userInfo) // 给父组件传用户数据\n      } else { // 用户拒绝授权\n        this.triggerEvent('loginFail')\n      }\n    }\n```\n\n\n\n#### [#]( #原生组件)原生组件\n\n[原生组件(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html)\n\n```html\nauto-focus 自动获取焦点\n\n<textarea\n    class=\"content\"\n    placeholder=\"分享新鲜事...\"\n    maxlength=\"140\"\n    auto-focus\n    bindinput=\"onInput\"\n    bindfocus=\"onFocus\"\n    bindblur=\"onBlur\"\n  ></textarea>\n```\n\n\n\n#### [#]( #选择上传图片)选择上传图片\n\n[上传图片(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n```js\nlet max = 9 - this.data.images.length // 还能再选几张图片\nwx.chooseImage({\n      count: max, // 还能再选几张图片\n      sizeType: ['original', 'compressed'], // 初始值 and 压缩过的\n      sourceType: ['album', 'camera'], // 手机相册选择 and 拍照选择\n      success: (res) => { // 箭头函数改变this指向\n        console.log(res)\n      },\n    })\n```\n\n\n\n#### [#]( #图片裁剪)图片裁剪\n\n[图片裁剪(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n```html\n<!-- mode 图片裁剪 aspectFill 保证短边完整显示 -->\n<image class=\"image\" src=\"{{item}}\" mode=\"aspectFill\"></image>\n```\n\n\n\n#### [#]( #获取标签自定义属性data-删除图片的实现)获取标签自定义属性data-* （删除图片的实现）\n\n```text\n<!-- 显示图片 -->\n    <block wx:for=\"{{images}}\" wx:key=\"*this\">\n      <view class=\"image-wrap\">\n        <!-- mode 图片裁剪 aspectFill 保证短边完整显示 -->\n        <image class=\"image\" src=\"{{item}}\" mode=\"aspectFill\"></image>\n        <icon class=\"iconfont icon-shanchu\" bindtap=\"onDelImage\" data-index=\"{{index}}\"></icon>\n      </view>\n    </block>\n\n\n    // 删除图片\n  onDelImage(event) {\n  \t// event.target.dataset.index 获取标签属性data-index的值\n    this.data.images.splice(event.target.dataset.index, 1) // splice会改变原有数组\n    this.setData({\n      images: this.data.images\n    })\n  },\n```\n\n\n\n#### [#]( #全屏预览图片-点击图片放大预览)全屏预览图片(点击图片放大预览)\n\n[全屏预览图片(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n\n```js\n// 全屏预览图片\n  onPreviewImage(event) {\n    wx.previewImage({\n      urls: this.data.images, // 图片地址列表\n      current: event.target.dataset.imgsrc // 当前预览图片地址\n    })\n  },\n```\n\n\n\n#### [#]( #文件上传云存储-发布博客例子)文件上传云存储（发布博客例子）\n\n[文件上传云存储(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html)\n\n```js\n //  结合'发布'的例子：\n  send() {\n    // 验证是否输入内容\n    if (content.trim() === '') { // trim() 去掉字符串空格\n      wx.showToast({\n        title: '请输入内容',\n        icon: 'none'\n      })\n      return\n    }\n    wx.showLoading({\n      title: '发布中',\n    })\n    /**\n     * 实现思路及步骤：\n     * 1、图片 -> 上传 云存储  -> 生成 图片fineID（云文件ID）\n     * 2、数据 -> 录入 云数据库\n     *    数据包括：文字内容、图片fineID、昵称、头像、发布时间、openId(用户唯一标识，在插入数据库是系统会自动添加_openId字段，不需要另外插入)\n     */\n    let promiseArr = []\n    let fileIds = []\n    // 图片上传云存储\n    this.data.images.forEach((item) => {\n      let p = new Promise((resolve, reject) => {\n        let suffix = /\\.\\w+$/.exec(item)[0] // 文件扩展名(文件后缀)\n        wx.cloud.uploadFile({ // 每次只能上传一个文件\n          /**\n           * cloudPath 云路径。如果路径相同，后上传的文件会覆盖原文件\n           * 路径：blog/云存储中的文件夹 + Date.now()时间戳 + Math.random()*1000000随机数 + 文件后缀\n           */\n          cloudPath: 'blog/' + Date.now() + '-' + Math.random() * 1000000 + suffix,\n          filePath: item, // 文件本地临时路径\n          success: (res) => {\n            fileIds.push(res.fileID)\n            resolve()\n          },\n          fail: (err) => {\n            console.error(err)\n            reject()\n          }\n        })\n      })\n      promiseArr.push(p)\n    })\n\n    // 存入云数据库\n    Promise.all(promiseArr).then((res) => {\n      db.collection('blog').add({\n        data: {\n          ...userInfo, // 昵称、头像\n          content, // 内容\n          img: fileIds, // 图片fileID列表\n          createTime: db.serverDate() // 创建时间，取服务端时间\n        }\n      }).then((res) => {\n        wx.hideLoading()\n        wx.showToast({\n          title: '发布成功',\n        })\n        // 返回博客页面，并刷新\n        wx.navigateBack()\n\n      })\n    }).catch((err) => {\n      wx.hideLoading()\n      wx.showToast({\n        title: '抱歉，发布失败',\n        icon: 'none'\n      })\n    })\n  },\n```\n\n\n\n#### [#]( #js模块化-时间格式化)js模块化 （时间格式化）\n\n在目录utils 中新建formatTime.js文件\n\n```js\n// 时间格式化 模块封装\nmodule.exports = (date) => { // date 数据格式为 date\n  let fmt = 'yyyy-MM-dd hh:mm:ss' // 预定格式\n  const o = {\n    // + 正则中的1个或多个\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds()\n  }\n\n  if (/(y+)/.test(fmt)) {\n    // $1 表示正则中的第一个，即(y+)\n    fmt = fmt.replace(RegExp.$1, date.getFullYear()) // replace 替换\n  }\n\n  for (let k in o) {\n    if (new RegExp('('+ k +')').test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, o[k].toString().length === 1 ? '0' + o[k] : o[k])\n    }\n  }\n\n  return fmt\n}\n\n```\n\n在组件引入js模块\n\n```js\nimport formatTime from '../../utils/formatTime.js'\n\n使用：\nformatTime(new Date('Wed Aug 28 2019 16:23:06 GMT+0800 (中国标准时间)'))\n```\n\n\n\n#### [#]( #阻止事件冒泡-2)阻止事件冒泡\n\n`bind` 和 `catch` 都可以绑定事件，它们的区别是 `bind` 有事件冒泡，而 `catch` 没有\n\n#### [#]( #返回上一个页面并执行方法)返回上一个页面并执行方法\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n\n```js\n // 返回博客页面，并刷新\n wx.navigateBack()\n const pages = getCurrentPages() // 获取当前页面栈\n const prevPage = pages[pages.length - 2]  // 取到上一个页面\n prevPage.onPullDownRefresh() // 执行上一个页面的方法 onPullDownRefresh\n```\n\n\n\n#### [#]( #图片懒加载)图片懒加载\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n```html\n给image标签设置 lazy-load 为 true\n<image class=\"img\" src=\"{{item}}\" lazy-load=\"true\"></image>\n\n.img {\n  background: #eee;\n}\n```\n\n\n\n**懒加载占位图可以给image设置背景图或背景色**\n\n#### [#]( #模糊查询)模糊查询\n\n```js\n// 获取博客列表\n  app.router('blogList', async (ctx, next) => {\n    const keyword = event.keyword // 搜索关键字 调用接口时传递来的数据\n    let w = {}\n    if (keyword.trim() != '') {\n      w = {\n        content: db.RegExp({ // 正则\n          regexp: keyword,\n          options: 'i' // i表示忽略大小写\n        })\n      }\n    }\n\n    // where查询条件 skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序\n    ctx.body =  await blogCollection.where(w).skip(event.start).limit(event.count)\n    .orderBy('createTime', 'desc').get().then((res) => {\n      return res.data\n    })\n\n  })\n```\n\n\n\n#### [#]( #提升模糊查询的效率-添加索引-对数据量大的查询效果明显)提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）\n\n云开发控制台 > 数据库相应的集合 > 索引管理 > 添加索引 > 输入自定义索引名称、该字段的值是否唯一、被查询的字段名、升序/降序 > ok\n\n#### [#]( #小程序端调用云数据库)小程序端调用云数据库\n\n一般调用云数据库的操作都写在云函数内，其实小程序端也可以对数据库进行操作。\n\n小程序端一次最多只能查询20条数据，云函数端最多可查询100条数据，可使用多次查询拼接的方式突破限制。\n\n```js\n// 小程序端调用云数据库示例\n    const db = wx.cloud.database() // 初始化数据库\n    db.collection('blog').orderBy('createTime','deac').get().then((res) => {\n      console.log(res)\n    })\n```\n\n\n\n#### [#]( #云数据库权限管理-2)云数据库权限管理\n\n**注意：云控制台和服务端（云函数）始终有所有数据读写权限，**\n\n**但权限的管理仅对小程序端发起的请求有效。**\n\n- 仅创建者可写，所有人可读 （适合于文章）\n- 仅创建者可读写 (适用于私密内容)\n- 仅管理端可写，所有人可读（适用于商品信息）\n- 仅管理端可读写（适用于后台敏感数据）\n\n#### [#]( #数据库中1对n关系的三种设计方式)数据库中1对N关系的三种设计方式\n\n##### [#]( #第一种-n的数量较少-几十个以内)第一种：N的数量较少 几十个以内\n\n**1 条记录存储 N 个子数据**\n\n​\t如一条博客中，最多有9张图片，这9张图片可和其他数据放在一个记录中。\n\n```js\n[\n\t{\n\t\tid:...\n\t\timg:[\n\t\t'...', '...', '...', '...', '...', '...', '...', '...', '...'\n\t\t]\n\t}\n]\n```\n\n\n\n##### [#]( #第二种-n的数量较多-几十到几百个)第二种：N的数量较多 几十到几百个\n\n**1 存储 每个N的 id**\n\n可分两个数据库集合，\n\n一个为 '目录' 集合，存放 '详情' 集合下的每条数据的 id 目录\n\n一个为 '详情' 集合，每条数据对应一个单独的 id 和 详细数据\n\n```js\n目录集合：\n[\n\t{\n\t\t'id':\"11\",\n\t\t'name': '产品1',\n\t\t'xqs': ['111','222','333', ... ]  // 存放 详情集合 中的每条数据 id\n\t}\n]\n\n\n\n详情集合：\n[\n{'id':\"111\",name:'零件1',title:'...' ...},\n{'id':\"222\",name:'零件2',title:'...' ...},\n{'id':\"333\",name:'零件3',title:'...' ...},\n...\n]\n```\n\n\n\n如歌单列表，与歌曲详情的数据组合设计。\n\n##### [#]( #第三种-n的数量巨大-几百成千上万个)第三种：N的数量巨大 几百成千上万个\n\n**每个 N 都存储 1 的 id**\n\n如新浪博客中的一条博客下面有几千条评论\n\n```js\n一条新浪博客：\n[{\n\t'id':'11',\n\t'content':'博客内容'\n\t...\n}]\n\n\n上千条评价：\n[\n{\n\t'id':'111111'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容1'\n},\n{\n\t'id':'222222'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容2'\n},\n{\n\t'id':'33333'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容3'\n},\n...\n]\n```\n\n\n\n#### [#]( #云调用)云调用\n\n通过云函数调用服务端的开发接口\n\n这些接口如：模板消息推送、生成小程序码...\n\n#### [#]( #模板消息推送)模板消息推送\n\n**1、使用from表单才能触发消息推送，并设置report-submit=\"true\"**\n\n```html\n<form slot=\"modal-content\" report-submit=\"true\" bind:submit=\"onSend\">\n    <textarea name=\"content\" class=\"comment-content\" placeholder=\"写评论\" value=\"{{content}}\" fixed=\"true\"></textarea>\n    <button class=\"send\" form-type=\"submit\">发送</button>\n  </form>\n```\n\n\n\n**2、需要到微信公众平台做相应的设置：**\n\n微信公众平台 > 功能 > 模板消息 > 添加模板 > 选择相应的模板> 添加成功后会有一个模板ID\n\n**3、新建一个云函数，用于云调用。在该云函数下新建配置文件：config.json ，用于配置权限**\n\nconfig.json ：\n\n```json\n{\n  \"permissions\": {\n    \"openapi\": [\n      \"templateMessage.send\"\n    ]\n  }\n}\n```\n\n\n\n云函数设置消息推送：\n\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  // 获取openid\n  const { OPENID } = cloud.getWXContext()\n\n  // 模板推送消息\n  const result = await cloud.openapi.templateMessage.send({\n    touser: OPENID,\n    page: `/pages/blog-comment/blog-comment?blogId=${event.blogId}`, // 用户点击推送消息打开的页面\n    data: { // 模板的内容，keyword为在公众平台设置模板时对应的字段\n      keyword1: { // 评价内容\n        value: event.context\n      },\n      keyword2: { // 评价时间\n        value: event.time\n      }\n    },\n    templateId: 'LNwKMcYwlz-0HabgBhmZi6CWZrlNSBiNJ2h0SMorcxQ', // 模板id，到公众平台模板消息上获取\n    formId: event.formId // 触发消息推送的form表单的id\n  })\n\n  return result\n}\n```\n\n\n\n**4、在提交表单事件完成后调用消息推送云函数**\n\n```js\n wx.cloud.callFunction({\n          name: 'sendMessage',\n          data: {\n            content,\n            formId,\n            blogId: this.properties.blogId\n          }\n        }).then((res) => {\n          console.log(res)\n        })\n```\n\n\n\n#### [#]( #云函数多集合查询数据库)云函数多集合查询数据库\n\n```js\n// 博客详情(博客内容、评论)\n  app.router('blogDetail', async(ctx, next) => {\n    let blogId = event.blogId\n\n    // 博客内容\n    let detail = await blogCollection.where({\n      _id: blogId\n    }).get().then((res) => {\n      return res.data\n    })\n\n    // 评论查询\n    const countResult = await blogCollection.count()\n    const total = countResult.total\n    let commentList = {\n      data: []\n    }\n    if (total > 0) {\n      // 突破100条限制\n      const batchTimes = Math.ceil(total / MAX_LIMIT)\n      const tasks = []\n      for (let i = 0; i < batchTimes; i++) {\n        let promise = db.collection('blog-comment').skip(i * MAX_LIMIT)\n          .limit(MAX_LIMIT).where({\n            blogId\n          }).orderBy('createTime', 'desc').get()\n        tasks.push(promise)\n      }\n      if (tasks.length > 0) {\n        commentList = (await Promise.all(tasks)).reduce((acc, cur) => {\n          return {\n            data: acc.data.concat(cur.data)\n          }\n        })\n      }\n\n    }\n    ctx.body = {\n      detail,\n      commentList\n    }\n  })\n```\n\n\n\n#### [#]( #分享功能)分享功能\n\n分享功能需要button标签，设置open-type=\"share\"\n\n```html\n<button open-type=\"share\" data-blogid=\"{{blogId}}\" data-blog=\"{{blog}}\" class=\"share-btn\" hover-class=\"share-hover\">\n      <i class=\"iconfont icon-fenxiang icon\"></i>\n      <text>分享</text>\n    </button>\n```\n\n\n\n在js中有onShareAppMessage方法，点击button会自动执行此方法\n\n```js\nonShareAppMessage: function (event) {\n    console.log(event)\n\n    // 对分享卡片的设置\n    let blogObj = event.target.dataset.blog\n    return {\n      title: blogObj.content,\n      path: `/pages/blog-comment/blog-comment?blogId=${blogObj._id}`,\n      // imageUrl: '' // 自定义图片，不支持云存储的图片\n    }\n  }\n```\n\n\n\n#### [#]( #不同场景获取用户信息的方式)不同场景获取用户信息的方式\n\n##### [#]( #场景一-只想在界面上显示自己的昵称和头像)场景一：只想在界面上显示自己的昵称和头像\n\n以组件的方式：根据type类型获取不同用户数据\n\n**该方式不需要授权，只能用于在wxml显示自己的信息**\n\n[open-data(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n\n```html\n<open-data type=\"userAvatarUrl\"></open-data>\n<open-data type=\"userNickName\"></open-data>\n...\n```\n\n\n\n##### [#]( #场景二-在js中获取用户信息)场景二：在JS中获取用户信息\n\n该方式要在用户授权以后才能获取用户信息\n\n[wx.getUserInfo(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\n```js\nwx.getUserInfo({\n      success: (res) => {\n        console.log(res)\n      }\n    })\n```\n\n\n\n在未授权的情况下需要用户先授权：\n\n```js\n// 判断用户是否授权\n      wx.getSetting({\n        success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n          if (res.authSetting['scope.userInfo']) { // 已授权\n            wx.getUserInfo({ // 获取用户信息\n              success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n\n                app.setGlobalData('userInfo', res.userInfo) // 设置app全局属性\n\n                this.onLoginSuccess({\n                  detail: res.userInfo\n                })\n              }\n            })\n          } else { // 未授权\n            this.setData({ // 打开弹出层，显示获取用户信息按钮\n              modalShow: true\n            })\n          }\n        }\n      })\n\n\n  授权按钮\n <button class=\"login\" open-type=\"getUserInfo\" bindgetuserinfo=\"onGetUserInfo\">获取微信授权信息</button>\n\n\n    onGetUserInfo(event) { // 获取用户信息\n      const userInfo = event.detail.userInfo\n      if (userInfo) { // 用户允许授权\n        this.setData({\n          modalShow: false\n        })\n        this.triggerEvent('loginSuccess', userInfo) // 给父组件传用户数据\n      } else { // 用户拒绝授权\n        this.triggerEvent('loginFail')\n      }\n    }\n```\n\n\n\n> 注意：上面这种方式没有获取到openId\n\n##### [#]( #场景三-获取openid)场景三：获取openId\n\n**获取openId不需要用户授权**\n\n1、传统开发方式获取openId，后台服务器由自己开发，没使用云开发\n\n小程序端 微信服务器 后端服务器\n\n步骤：\n\n小程序端 调用 wx.login 向微信服务器 获取code\n\n小程序端 调用 wx.request 将 code 传递给 后端服务器\n\n后端服务器 使用code 向微信服务器 换取openid和session_key\n\n后端服务器 将openid 发送给 小程序端\n\n2、云开发方式获取openId\n\n云函数login中\n\n```js\n// 获取 WX Context (微信调用上下文)，包括 OPENID、APPID、及 UNIONID（需满足 UNIONID 获取条件）\n  const wxContext = cloud.getWXContext()\n\n  return {\n    event,\n    openid: wxContext.OPENID,\n    appid: wxContext.APPID,\n    unionid: wxContext.UNIONID,\n  }\n```\n\n\n\n```js\n普通按钮\n<button bindtap=\"getOpenid\">获取openid</button>\n\ngetOpenid() {\n\twx.cloud.callFunction({\n\t\tname: 'login'\n\t}).then((res) => {\n\t\tconsole.log(res)\n\t})\n}\n```\n\n\n\n> openid 在小程序和公众号下是不一样的\n>\n> unionid 在小程序和公众号下都是一样的\n\n## [#]( #《我的》页面)《我的》页面\n\njson文件\n\n```js\n\"navigationBarTitleText\": \"我的\",\n  \"disableScroll\": true  // 使页面无法滚动\n```\n\n\n\n#### [#]( #导航页面链接跳转)导航页面链接跳转\n\n[navigator(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n#### [#]( #背景图片)背景图片\n\nwxss背景图片不支持本地相对路径的图片，只支持网络图片和base64图片\n\n建议使用base64图片，图片文件最好不要太大。\n\n#### [#]( #每个页面都有的page标签)每个页面都有的page标签\n\n```js\npage {\n  background-color: #f1f1f1;\n}\n```\n\n\n\n#### [#]( #播放历史与本地存储)播放历史与本地存储\n\n方案一：播放历史存储在数据库当中，这样在不同设备访问都可查看播放历史。读取速度相对较慢\n\n方案二：播放历史存储在本地，仅当前设备可查看播放历史。读取速度较快\n\n本项目采用本地存储：\n\n使用openid作为本地存储的key，播放历史存入value\n\n在app.js中获取openid，即打开小程序就获取openid。\n\n```js\n// app.js\nonLaunch: function () {\n\tthis.getOpenid() // 获取openid并存储\n},\ngetOpenid() { // 获取openid并存储\n    wx.cloud.callFunction({\n      name: 'login'\n    }).then((res) => {\n      const openid = res.result.openid\n      this.globalData.openid = openid // 保存到全局变量\n      if (wx.getStorageSync(openid) == '') { // 该用户从未打开过小程序，未存储过openid在本地\n        wx.setStorageSync(openid, []) // 存储openid到本地\n      }\n    })\n  }\n```\n\n\n\n歌曲播放时\n\n```js\n// 保存播放历史到本地存储\n  savePlayHistory() {\n    const currentSong = musiclist[nowPlayingIndex] // 当前播放歌曲\n    const openid = app.globalData.openid // 从全局属性获取openid\n    const playHistory = wx.getStorageSync(openid) // 从本地存储获取播放历史数组\n\n    for (let i = 0, len = playHistory.length; i < len; i++) {\n      if (playHistory[i].id === currentSong.id) { // 当前播放歌曲已存在播放历史中\n        playHistory.splice(i, 1) // 删除原纪录\n        break\n      }\n    }\n\n    playHistory.unshift(currentSong) // 在数组开头插入\n    wx.setStorage({ // 存入本地\n      key: openid,\n      data: playHistory\n    })\n\n  },\n```\n\n\n\n播放历史页面获取\n\n```js\nonLoad: function (options) {\n\n    const openid = app.globalData.openid //从全局属性获取openid\n    const playHistory = wx.getStorageSync(openid) // 读取本地播放历史数据\n\n    if (playHistory.length !== 0) { // 有播放历史\n      this.setData({\n        playHistory\n      })\n      wx.setStorage({ // storage里把musiclist（播放列表）的内容换成播放历史的列表\n        key: 'musiclist',\n        data: playHistory,\n      })\n    }\n\n  },\n```\n\n\n\n#### [#]( #我的发现)我的发现\n\n代码分别演示了从云函数和小程序端获取数据，从小程序端获取数据享有**权限管理**的能力，不需要传openid。\n\n#### [#]( #小程序码)小程序码\n\n[获取小程序码(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html)\n\n本项目演示使用[接口 B：适用于需要的码数量极多的业务场景 (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)`云调用` 的方式。\n\n步骤：\n\n- 创建云函数 gteQRCode\n- gteQRCode云函数下创建config.json配置权限，代码如下：\n\n```json\n{\n  \"permissions\":{\n    \"openapi\":[\n      \"wxacode.getUnlimited\"\n    ]\n  }\n}\n```\n\n\n\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext()\n\n  const result = await cloud.openapi.wxacode.getUnlimited({\n    scene: wxContext.OPENID, // 链接参数 不一定传openid，可传其他任意数据，然后通过此数据，在别人扫码进入时就可用于判断\n    // page: \"pages/blog/blog\" // 默认进入主页\n    // lineColor: { // 线条颜色\n    //   'r': 211,\n    //   'g': 60,\n    //   'b': 57\n    // },\n    // isHyaline: true // 是否透明\n  })\n\n  // result为二进制数据, 先上传到云存储\n\n  // 上传云存储\n  const upload = await cloud.uploadFile({\n    cloudPath: 'qrcode/qrcode' + Date.now() + Math.random() + '.png',\n    fileContent: result.buffer\n  })\n\n  return upload.fileID\n}\n```\n\n\n\n##### [#]( #判断是从扫码小程序码进入-以及参数获取)判断是从扫码小程序码进入，以及参数获取\n\n```js\n// 在从小程序码进入的页面js，onLoad方法中，\n\nonLoad: function (options) {\n\tconsole.log(options.scene) // 获取到小程序码进入的参数\n}\n```\n\n\n\n### [#]( #版本更新检测)版本更新检测\n\n```js\n// app.js\nonLaunch: function(options) {\n    this.checkUpate()\n},\ncheckUpate(){\n    const updateManager = wx.getUpdateManager()\n    // 检测版本更新\n    updateManager.onCheckForUpdate((res)=>{\n      if (res.hasUpdate){\n        updateManager.onUpdateReady(()=>{\n          wx.showModal({\n            title: '更新提示',\n            content: '新版本已经准备好，是否重启应用',\n            success(res){\n              if(res.confirm){\n                updateManager.applyUpdate()\n              }\n            }\n          })\n        })\n      }\n    })\n  },\n```\n\n\n\n### [#]( #性能优化)性能优化\n\n[官网文档优化建议(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html)\n\n使用开发者工具的调试器，Audits进行评分，然后根据提示针对项目进行优化。\n\n### [#]( #场景值scene的作用与应用场景)场景值scene的作用与应用场景\n\n[场景值(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html)\n\n场景值用来描述用户进入小程序的路径。完整场景值的含义请查看[场景值列表 (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html)。\n\n可根据不同场景进入实现不同业务处理，比如一个点餐小程序，店家内贴了小程序码，用户通过扫码进入，可立即进入点餐页面，等等\n\n在app.js中的onLaunch(options) 、onShow(options)，options包含scene场景值\n\n**开发者工具中，切后台，可模拟进入场景。**\n\n### [#]( #小程序的-seo-页面收录sitemap)小程序的\"SEO\"---页面收录sitemap\n\n在app.js的同级目录下有sitemap.json文件，用于配置收录规则\n\n[stiemap配置(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html)\n\n作用：\n\n使小程序搜索可根据小程序的内容进行搜索到\n\n使用方法：\n\n1、在微信公众平台，小程序信息 > 页面收录设置 > 打开 (默认是已开启)\n\n2、打开sitemap.json文件，配置收录规则\n\n```json\n{\n  \"desc\": \"关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\",\n  \"rules\": [{ // 收录规则\n  \"action\": \"allow\",// 是否被收录，allow允许被收录，disallow不允许\n  \"page\": \"*\" // *星号表示所有页面都被收录\n  }]\n}\n```\n\n```json\n{\n  \"desc\": \"关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\",\n  \"rules\": [{ // 收录规则，可添加多条\n  \"action\": \"allow\", // 是否被收录\n  \"page\":\"pages/player/player\",  // 页面\n  \"params\": [\"musicId\",\"index\"], // 链接的动态参数\n   \"matching\":'exact' // 表示params的参数是否要准确的匹配\n  }，{\n  \"action\": \"disallow\", // 是否被收录\n  \"page\":\"*\",  /\n  }]\n}\n\n// 上面配置规则表示除了player页面被收录外，其他页面不被收录\n```\n\n\n\n### [#]( #小程序上线审核流程)小程序上线审核流程\n\n微信公众平台，版本管理>把小程序上传为体验版》提交审核》上线\n\n## [#]( #后台管理系统)后台管理系统\n\n#### [#]( #架构示意图)架构示意图\n\n​\t前端 后台 小程序云开发\n\nvue-admin-template <---通过ajax--> 基于Koa2；HTTP API 或 tcb-admin-node ---->云函数、云数据库、云存储\n\n\n\n#### [#]( #vue-admin-template构建管理系统前端)vue-admin-template构建管理系统前端\n\n[vue-element-admin (opens new window)](https://github.com/PanJiaChen/vue-element-admin)基于element的后台管理系统模板\n\n[vue-admin-template (opens new window)](https://github.com/PanJiaChen/vue-admin-template)是 [vue-element-admin (opens new window)](https://github.com/PanJiaChen/vue-element-admin)的简化版\n\n使用方法查看官方文档。\n\n#### [#]( #koa2构建管理系统后端)Koa2构建管理系统后端\n\n官网： [https://koa.bootcss.com/(opens new window)](https://koa.bootcss.com/)\n\n新建空文件夹wx-music-admin-backend，打开终端：\n\n```sh\n# 生成package.json文件，-y 表示默认的配置\nnpm init -y\n\n# 安装koa\nnpm install koa\n\n# 新建app.js文件 (win10系统命令)，作为项目入口文件\ntype nul > app.js\n```\n\n\n\napp.js:\n\n```js\nconst Koa = require('koa')\nconst chalk = require('chalk') // 使console.log打印文字有颜色的插件，需: npm i chalk\nconst app = new Koa()\n\napp.use(async (ctx) => {\n  ctx.body = 'Hello Wolrd'\n})\nconst port = 3000\napp.listen(port, () => { // 端口号，开启服务后的回调函数\n  console.log(chalk.green(`> 服务已开启，访问：http://localhost:${port}`))\n})\n```\n\n\n\n终端：\n\n```sh\n# node启动项目\nnode app.js\n\n# 访问：http://localhost:3000\n```\n\n\n\n#### [#]( #接口调用凭证-access-token-的缓存与更新)接口调用凭证 access_token 的缓存与更新\n\naccess_token，微信的接口调用凭证，详情：[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html)\n\n回到项目wx-music-admin-backend，打开终端：\n\n```sh\n# HTTP 请求 插件\nnpm i request\nnpm i request-promise\n```\n\n\n\n```js\n/**\n * 获取微信接口调用凭证\n * 详情：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html\n */\n\n\nconst rp = require('request-promise') // node发送http请求的插件\nconst fs = require('fs') // node文件模块\nconst path = require('path') // node 路径模块\n\n//fileName = __dirname 当前文件所在目录的绝对路径, 加上 './access_token.json'\nconst fileName = path.resolve(__dirname, './access_token.json')\n\n// 这两个参数的获取：微信公众平台>开发>开发设置\nconst APPID = 'wxc4e0b2d98063b103'\nconst APPSECRET = 'xxx' //小程序密钥，注意保密!\n\n// 微信 access_token 请求地址\nconst URL = `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${APPID}&secret=${APPSECRET}`\n\n// 发送请求获取AccessToken\nconst updateAccessToken = async () => {\n  const resStr = await rp(URL)\n  const res = JSON.parse(resStr)\n\n  if (res.access_token) {\n    // node写文件,参数：1 文件路径，2 文件内容, 首次写文件为新建，往后为覆盖\n    fs.writeFileSync(fileName, JSON.stringify({\n      access_token: res.access_token,\n      createTime: new Date()\n    }))\n  } else { // 如获取不到，再次获取\n    await updateAccessToken()\n  }\n}\n\n// 读取access_token\nconst getAccessToken = async () => {\n  try {\n     // node读取文件,参数：1 读取的文件，2 字符集\n    const readRes = fs.readFileSync(fileName, 'utf8')\n    const readObj = JSON.parse(readRes)\n\n    // 如果服务器宕机导致setInterval无法定时更新，这里需要再次判断access_token的有效性\n    const createTime = new Date(readObj.createTime).getTime()\n    const nowTime = new Date().getTime()\n    if((nowTime - createTime) / 1000 / 60 / 60 >= 2) {\n      await updateAccessToken()\n      await getAccessToken()\n      return\n    }\n    return readObj.access_token\n\n  } catch (error) { //捕获异常，在未创建文件时，先创建文件\n    await updateAccessToken()\n    await getAccessToken()\n  }\n}\n\n// access_token有效期为2个小时，定时更新\nsetInterval(async () => {\n  await updateAccessToken()\n}, (7200 - 300) * 1000)\n\nmodule.exports = getAccessToken\n```\n\n\n\n#### [#]( #后端代码通过http-api-触发云函数获取数据)后端代码通过HTTP API 触发云函数获取数据\n\n[HTTP API 触发云函数(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/functions/invokeCloudFunction.html)\n\n#### [#]( #产生跨域和后端解决跨域问题)产生跨域和后端解决跨域问题\n\n管理系统前端向管理系统后端请求数据，产生了跨域问题\n\n```js\n  // 产生跨域的几种情况\n  // http://www.a.com  https://www.a.com 协议不同\n  // http://www.a.com  http://www.b.com 域名不同\n  // http://www.a.com  http://news.a.com 主域与子域不同\n  // http://www.a.com:8080  http://www.a.com:3000 端口不同\n\n// 解决跨域的几种方法\n// jsonp\n// iframe\n// postMessage跨域\n// 跨域资源共享（CORS）\n```\n\n管理系统后端，安装\n\n```sh\n// 解决跨域问题的koa包\nnpm i koa2-cors\n```\n\napp.js\n\n```js\n//处理跨域\napp.use(cors({\n  origin: ['http://localhost:9528'], // 允许访问本服务的域\n  credentials: true\n}))\n```\n\n\n\n#### [#]( #云数据库的增删改查接口)云数据库的增删改查接口\n\n[数据库查询记录(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/database/databaseQuery.html)\n\n#### [#]( #后端获取前端post请求传来的数据)后端获取前端post请求传来的数据\n\nget请求可以直接通过ctx.request.query获取，但是post请求需要安装koa-body\n\n```sh\nnpm i koa-body\n```\n\napp.js\n\n```js\nconst koaBody = require('koa-body') // 对post请求前端传来的数据的获取，需要此依赖\n\n// 接收post参数解析\napp.use(koaBody({\n  multipart: true\n}))\n```\n\n接口.js\n\n```js\nrouter.post('/updatePlaylist', async (ctx, next) => {\n\n  const params = ctx.request.body // post请求获取前端传来的数据，需安装和配置koa-body\n\n})\n```\n\n\n\n#### [#]( #后端获取云存储图片)后端获取云存储图片\n\n云存储中上传图片，云数据库中新建图片的集合，并添加数据字段，字段包含云文件的fileid。\n\n后端项目通过调用云数据库的方式获取数据\n\n```js\nrouter.get('/list', async (ctx, next) => {\n  // 接口中读取数据库默认最多10条数据\n  const query = `db.collection('swiper').get()`\n  const res = await callCloudDB(ctx, 'databasequery', query)\n  console.log(res)\n\n})\n```\n\n\n\n但获取到的数据为fileid，并不能用于显示图片，需要通过微信HTTP API获取云存储的接口来获取图片地址","source":"_posts/小程序开发学习笔记.md","raw":"---\ntitle: 小程序开发学习笔记\ncategories:  #设置分类\n- 小程序\n---\n# 小程序开发学习笔记\n\n## 基础课程部分\n\n#### 微信公众平台\n\n[https://mp.weixin.qq.com/(opens new window)](https://mp.weixin.qq.com/)\n\n注册时可选择类型：订阅号、服务号、小程序、企业微信\n\n**每个邮箱仅能注册一个小程序。**\n\n个人类型小程序：无法使用微信支付、无法使用卡包功能\n\n##### 小程序文档API\n\n[小程序开发文档(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/)\n\n##### 微信开放社区\n\n[微信开发社区(opens new window)](https://developers.weixin.qq.com/community/develop/question)\n\n#### [#]( #目录说明)目录说明\n\n**默认目录**\n\npages-----------------------页面相关\n\n​\tindex ----------------- 首页文件夹\n\n​\tindex.js ------------首页js\n\n​\tindex.json---------首页配置\n\n​\tindex.wxml-------首页html\n\n​\tindex.wxss--------首页css\n\nutils------------------------工具相关\n\napp.js ----------------------项目总js\n\napp.json-------------------全局配置( 页面路由以及头部、底部导航的配置等)\n\napp.wxss -----------------项目总样式css\n\nproject.config.json ----项目配置\n\n**代码构成**\n\n.json ：配置文件，以json格式存储配置\n\n​\t项目中有三种配置：项目配置（project.config.json）、全局配置（app.json）、页面配置（index.json）\n\n.wxml: 相当于html文件\n\n.wxss: 相当于css\n\n.js : 就是js\n\n#### [#]( #文件说明)文件说明\n\n**project.config.json项目配置 部分代码说明**\n\nsetting：{\n\nurlCheck 是否检测安全的域名\n\nes6 是否把es6转es5\n\npostcss 是否把css样式自动补全\n\nminified 是否压缩\n\n}\n\n**app.json 全局配置**\n\n[全局配置API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html)\n\n**wxml 相关介绍**\n\n[wxmlAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/)\n\n```html\n<view>{{motto}}</view>\n\n循环渲染\n<view wx:for=\"{{list}}\" wx:key=\"{{index}}\">\n      {{index}} {{item}}\n</view>\n\n改变for循环item和index的名称\n<block wx:for=\"{{list}}\" wx:for-item=\"data\" wx:for-index=\"inx\">\n\t{{inx}} {{data}}\n</block>\n\n条件渲染 (类似vue的v-if、v-else)\n<view wx:if=\"{{isLogin}}\">已登录</view>\n<view wx:else>请登录</view>\n\n条件显示（类似vue的v-show）\n<view hidden=\"{{isLogin}}\">显示内容</view>\n\n绑定点击事件\n<button bindtap=“tapName”>按钮</button>\n\nPage({\n  tapName: function(event) {\n    console.log(event)\n  }\n})\n...\n```\n\n**wxss 相关介绍**\n\n[wxssAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html)\n\n尺寸单位：rpx，根据屏幕宽度自适应。\n\n引入外部wxss：@import ’...‘\n\n**js相关介绍**\n\nWXS（WeiXin Script）是小程序的一套脚本语言\n\n[wxsAPI(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/)\n\n绑定点击事件\n\n```html\n<button bindtap=“onTapHandler”>点我+1</button>\n<view>{{count}}</view>\n```\n\n\n\n```js\nPage({\n  data: {\n    count: 0\n  },\n  onTapHandler: function() {\n  \tthis.setData({\n  \t\tcount: this.data.count++\n  \t})\n  }\n})\n```\n\n##### [#]( #阻止事件冒泡)阻止事件冒泡\n\n把绑定方式 bindtap 换成 catchtap 即可。\n\n#### [#]( #第三方库)第三方库\n\n**WeUI**\n\nweUI是一套同微信原生视觉体验一致的基础样式库\n\n**iView Weapp**\n\n一套高质量的微信小程序UI组件库\n\n**Vant Weapp**\n\n轻量、可靠的小程序UI组件库\n\n#### [#]( #云开发)云开发\n\n**小程序传统开发模式**\n\n客户端 -----> 服务端（后端代码、数据库）------> 运维（DB维护、文件存储、内容加速、网络防护、容器服务、负载均衡、安全加固等...）\n\n**小程序云开发模式**\n\n客户端 -----> 云开发（云函数、云数据库、云存储）\n\n**传统开发 VS 云开发**\n\n开发效率低 Serverless（无服务）\n\n运维成本高 开发者更关注业务逻辑\n\n**无服务（Serverless）开发是未来的发展趋势**\n\n##### [#]( #云开发三大基础能力)**云开发三大基础能力**\n\n##### [#]( #云函数)云函数\n\n（相当于传统开发中的后台接口）\n\n获取appid、获取openid、生成分享图、调用腾讯云SDK ...\n\n##### [#]( #云数据库)云数据库\n\n数据的增、删、改、查 ...\n\n##### [#]( #云存储)云存储\n\n管理文件、上传文件、下载文件、分享文件 ...\n\n**每个小程序账号可免费创建两个环境，建议：开发环境、生成环境**\n\n#### [#]( #云数据库能力)云数据库能力\n\n云开发提供了一个json数据库，提供2GB免费存储空间。\n\n#### [#]( #数据类型)数据类型\n\nString 字符串\n\nNumber 数字\n\nObject 对象\n\nArray 数组\n\nBoolean 布尔值\n\nGeoPoint 地理位置点\n\nDate 时间 （精确到毫秒ms，客户端时间）\n\nNull 空\n\n#### [#]( #操作云数据库)操作云数据库\n\n小程序控制（读写数据库受权限限制）\n\n云函数控制（拥有所有读写数据库的权限）\n\n控制台控制（拥有所有读写数据库的权限）\n\n#### [#]( #云数据库权限管理)云数据库权限管理\n\n仅创建者可写，所有人可读 （适合于文章）\n\n仅创建者可读写 (适用于私密内容)\n\n仅管理端可写，所有人可读（适用于商品信息）\n\n仅管理端可读写（适用于后台敏感数据）\n\n#### [#]( #操作云数据库-2)操作云数据库\n\n```js\n//初始化数据库\nconst db = wx.cloud.database() // 小程序端初始化数据库，如果在云函数端不需要加wx\n\n//切换环境(开发环境/生产环境)\nconst testDB = wx.cloud.database({\n\tenv: 'test'\n})\n```\n\n\n\n## [#]( #实战课程部分)实战课程部分\n\n#### [#]( #serverless-无服务)serverless（无服务）\n\n概念：函数即服务，当需要后端服务的时候，不需要关心后端的IP地址、域名，只需要像调用普通函数一样既可以实现调用。\n\n#### [#]( #云开发优势)云开发优势\n\n快速上线、专注核心业务、独立开发一个完整的微信小程序、不需要学习新的语言，只需要会javascript、无需运维， 节约成本、数据安全、\n\n#### [#]( #云开发提供能力)云开发提供能力\n\n云函数：在云端运行的代码，微信私有协议天然鉴权 （理解：相当于后端部分）\n\n云数据库：一个既可以在小程序端操作又可以在云函数中操作的JSON数据库\n\n云存储：在云端存储文件，可以在云端控制台可视化管理\n\n云调用：基于云函数免鉴权使用小程序开放接口的能力（比如说给用户推送消息等）\n\nHTTP API：使用HTTP API开发者可在已有服务器上访问云资源，实现与云开发的互通（作用：对原有传统模式下开发的小程序，可以与云开发进行互通）\n\n#### [#]( #appid)appID\n\n每个小程序唯一的id\n\n#### [#]( #云开发项目默认目录结构)云开发项目默认目录结构\n\ncloudfunctions ----------------------------云函数\n\n​\tcallback ---------------------------------- 回调函数\n\n​\tconfig.json ---------------------------\n\n​\tindex.js --------------------------------\n\n​\tpackage.json ------------------------\n\n​\techo ----------------------------------------\n\n​\tlogin ----------------------------------------\n\n​\topenapi -----------------------------------\n\nminiprogram ------------------------------- 小程序\n\n​\timages ------------------------------------- 图片\n\n​\tpages --------------------------------------- 页面\n\n​\tstyle ----------------------------------------- 样式\n\n​\tapp.js --------------------------------------- 项目js\n\n​\tapp.json ----------------------------------- 全局配置\n\n​\tapp.wxss ---------------------------------- 项目样式\n\n​\tsitemap.json ----------------------------- （小程序SEO相关）\n\nproject.config.json ----------------------- 项目配置\n\n#### [#]( #云开发环境)云开发环境\n\n云开发可创建两个环境，建议一个为开发环境，一个为生产环境\n\n#### [#]( #开发前的准备)开发前的准备\n\n开发工具 > 右上角详情 > 本地设置 > 调试基础库 设置为最新版本\n\napp.js > wx.cloud.init > env 设置环境ID\n\n#### [#]( #project-config-json-文件说明)project.config.json 文件说明\n\nminiprogramRoot 小程序前端代码目录\n\ncloudfunctionRoot 云函数代码目录\n\n#### [#]( #app-json)app.json\n\npages 设置页面 ，设置后会自动在pages目录下生成相应的目录和文件\n\n设置底部导航按钮：\n\n```json\n\"tabBar\": {\n    \"color\": \"#474747\", // 文字颜色\n    \"selectedColor\": \"#d43c43\", // 文字选中颜色\n    \"list\": [{ // 按钮列表，2-5项\n      \"pagePath\": \"pages/playlist/playlist\", // 按钮对应页面\n      \"text\": \"音乐\", // 文字\n      \"iconPath\": \"images/music.png\", // 图标路径\n      \"selectedIconPath\": \"images/music-actived.png\" // 选中图标的路径\n    },\n    {\n      \"pagePath\": \"pages/blog/blog\",\n      \"text\": \"发现\",\n      \"iconPath\": \"images/blog.png\",\n      \"selectedIconPath\": \"images/blog-actived.png\"\n    },\n    {\n      \"pagePath\": \"pages/profile/profile\",\n      \"text\": \"我的\",\n      \"iconPath\": \"images/profile.png\",\n      \"selectedIconPath\": \"images/profile-actived.png\"\n    }]\n  }\n```\n\n\n\n> 图标来自于 [https://www.iconfont.cn(opens new window)](https://www.iconfont.cn/)\n>\n> 阿里巴巴图标库，包含矢量图标、字体图标、字体等\n\n#### [#]( #代码规范)代码规范\n\n很多公司借鉴的代码规范：[https://github.com/airbnb/javascript(opens new window)](https://github.com/airbnb/javascript)\n\n#### [#]( #《音乐》页面开发)《音乐》页面开发\n\n```html\n <!-- 轮播图组件 参数：indicator-dots 小圆点，autoplay 自动播放, interval 间隔时间，duration 动画时长 -->\n<swiper indicator-dots=\"true\" circular=\"true\" interval=\"3000\" duration=\"500\">\n  <block wx:for=\"{{swiperImgUrls}}\" wx:key=\"{{index}}\"> <!-- 空节点 -->\n    <swiper-item>\n      <image src=\"{{item.url}}\" mode=\"widthFix\" class=\"img\"></image>\n    </swiper-item>\n  </block>\n</swiper>\n```\n\n\n\n#### [#]( #自定义组件)自定义组件\n\n**创建组件**\n\n创建目录 components > 组件目录名称 > 右键 `新建Component`\n\n##### [#]( #引入组件)**引入组件**\n\n在page的json文件中：\n\n```json\n{\n  \"usingComponents\": {\n    \"x-playlist\":\"/components/playlist/playlist\"\n  }\n}\n```\n\n在page的wxml中：\n\n```html\n<x-playlist> </x-playlist>\n```\n\n**页面引入组件以及组件内部在引用子组件的方法是一样的，同样需要设置json文件。**\n\n##### [#]( #组件传值)**组件传值**\n\n父组件中：在引入组件的时候自定义属性名称，并把数据传入子组件\n\n```html\n<!-- 参数：playlist 自定义名称，传入组件的数据 -->\n<x-playlist playlist=\"{{传入的数据}}\"></x-playlist>\n```\n\n子组件中： 子组件的js文件：\n\n```js\n  /**\n   * 组件的属性列表\n   */\n  properties: {\n    playlist:{ // 接收父组件传输的数据\n      type: Object // 数据类型\n    }\n   },\n\n //子组件的wxml文件可直接引入数据{{playlist}}\n```\n\n#### [#]( #wx-key-的使用)wx:key 的使用\n\nkey的值不建议使用index，因为当数据发生变化会dom结构产生变化时，使用index的地方不会随之变化。\n\n可以使用数据内部每项不一样的一个数值，如id\n\n```html\n<block wx:for=\"{{swiperImgUrls}}\" wx:key=\"url\"> 这里url不需要双大括号，如使用index则需要{{}}\n    <view>\n      <image src=\"{{item.url}}\" mode=\"widthFix\" class=\"img\"></image>\n    </view>\n</block>\n\n<view class=\"playlist-container\">\n  <block wx:for=\"{{playlist}}\" wx:key=\"_id\">\n    <!-- 参数：playlist 自定义名称，传入组件的数据 -->\n    <x-playlist playlist=\"{{item}}\"></x-playlist>\n  </block>\n</view>\n```\n\n#### [#]( #async-await-语法)async/await 语法\n\n目前，在云函数里，由于 Node 版本最低是 8.9，因此是天然支持 async/await 语法的。而在小程序端则不然。在微信开发者工具里，以及 Android 端手机（浏览器内核是 QQ浏览器的 X5），async/await是天然支持的，但 iOS 端手机在较低版本则不支持，因此需要引入额外的 文件。\n\n可把这个 [runtime.js (opens new window)](https://github.com/xiecheng328/miniprogram/blob/master/regenerator/runtime.js)文件引用到有使用 async/await 的文件当中。\n\n```js\n// 注意，必须命名为 regeneratorRuntime\nimport regeneratorRuntime from '../../utils/runtime.js'\n```\n\n\n\n#### [#]( #云函数的使用)云函数的使用\n\ncloudfunctions目录 右键 `新建 Node.js 云函数` > 输入目录名 `getPlaylist`\n\n在云函数中向第三方服务器发送请求要依赖第三方库\n\n**安装依赖包**\n\n云函数目录 `getPlaylist` 右键 `在终端打开` 打开命令行 输入命令：\n\n```sh\nnpm install --save request\nnpm install --save request-promise\n```\n\n\n\ngithub request-promise：[https://github.com/request/request-promise(opens new window)](https://github.com/request/request-promise)\n\n然后写相应代码\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst rp = require('request-promise') // 需安装依赖包\n\nconst URL = 'http://musicapi.xiecheng.live/personalized'\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const playlist = await rp(URL).then((res) => {\n    return JSON.parse(res).result\n  })\n  console.log(playlist)\n}\n```\n\n\n\n写完代码，云函数目录 `getPlaylist` 右键 `上传并部署：云端安装依赖（不上传node_modules）` 进行上传部署代码到云端，等待上传成功，打开云开发控制台即可看到已经上传的云函数，并可对云函数进行测试。\n\n##### [#]( #数据库操作)数据库操作\n\n数据库> 创建集合 > playlist\n\n```js\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst db = cloud.database() // 初始化数据库,如果在小程序端初始化数据库需要在前面加wx.\n\nconst rp = require('request-promise') // 需安装依赖包\n\nconst URL = 'http://musicapi.xiecheng.live/personalized' // 第三方服务器地址（老师从网易云获取的数据部署在其服务器，每天的数据会更新）\n\nconst playlistCollection = db.collection('playlist') // 获取到数据库playlist集合\n\nconst MAX_LIMIT = 10 // 定义常量，获取数据库条数最大的限制\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  /**\n   * 注：\n   * - 关于数据库的操作都是异步操作，都需添加await关键字\n   * - console.log 打印在云开发控制台 云函数测试内查看\n   * - 单次获取数据库数据有条数限制，云函数端最多获取100条，小程序端最多获取20条\n   */\n\n  // const list = await playlistCollection.get() // 获取数据库集合的数据 （因为有条数限制，不直接用此方法）\n\n  // 突破条数限制 （为了读取到全部数据然后与第三方服务器获取的数据进行对比去重）\n  const countResult = await playlistCollection.count() // 获取数据总条数 返回为对象\n  const total = countResult.total // 取得总条数\n  const batchTimes = Math.ceil(total / MAX_LIMIT)\n  const tasks = []\n  for(let i = 0; i < batchTimes; i++) {\n    let promise = playlistCollection.skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() // 从第 skip 条开始取，最多取 limit 条数据\n    tasks.push(promise)\n  }\n  let list = {\n    data: []\n  }\n  if (tasks.length > 0) {\n    list = (await Promise.all(tasks)).reduce((acc, cur) => { // reduce数组方法 累积拼接\n      return {\n        data: acc.data.concat(cur.data)\n      }\n    })\n  }\n\n  // 获取第三方服务器端数据\n  const playlist = await rp(URL).then((res) => {\n    return JSON.parse(res).result\n  })\n\n  // 数据库与服务器数据对比去重（数据已存在数据库的无需再重复添加）\n  const newData = []\n  for(let i = 0, len1 = playlist.length; i < len1; i++) {\n    let flag = true\n    for(let j = 0, len2 = list.data.length; j < len2; j++) {\n      if(playlist[i].id === list.data[j].id){\n        flag = false\n        break\n      }\n    }\n    if(flag){\n      newData.push(playlist[i])\n    }\n  }\n\n  // 把数据插入数据库，需要单条插入\n  for (let i = 0, len = newData.length; i < len; i++) {\n    await playlistCollection.add({ // 给数据库集合添加数据\n      data: {\n        ...newData[i],\n        createTime: db.serverDate(), // db.serverDate() 获取服务器时间\n      }\n    }).then((res) => { // 数据添加成功\n      console.log('数据添加成功')\n    }).catch((err) => { // 失败\n      console.error(err)\n    })\n  }\n  return newData.length // 插入多少条数据\n}\n```\n\n\n\n##### [#]( #查询数据库)查询数据库\n\n```js\n//云函数中查询数据库的例子：\n\n// 云函数入口文件\nconst cloud = require('wx-server-sdk')\n\ncloud.init()\n\nconst TcbRouter = require('tcb-router')\nconst db = cloud.database() // 初始化数据库\nconst blogCollection = db.collection('blog') // 博客的数据库集合\n\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const app = new TcbRouter({ event }) // 初始化TcbRouter\n\n  app.router('list', async (ctx, next) => {\n    // skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序\n    ctx.body =  await blogCollection.skip(event.start).limit(event.count)\n    .orderBy('createTime', 'desc').get().then((res) => {\n      return res.data\n    })\n\n  })\n\n\n  return app.serve() // 必需返回\n}\n```\n\n\n\n##### [#]( #云函数调试)云函数调试\n\n云控制台中可会云函数进行云端测试\n\n在小程序调用云函数后，可查看云函数**日志**\n\n#### [#]( #定时触发云函数)定时触发云函数\n\n如果云函数需要定时 / 定期执行，也就是定时触发，我们可以使用云函数定时触发器。配置了定时触发器的云函数，会在相应时间点被自动触发，函数的返回结果不会返回给调用方\n\n云函数目录下新建 config.json\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html)\n\n```json\n{\n  \"triggers\": [\n    {\n      \"name\": \"myTriggers\",\n      \"type\": \"timer\",\n      \"config\":\"0 0 10,14,16,20 * * * *\" //表示每天的10点、14点、16点、20点触发一次\n    }\n  ]\n}\n```\n\n\n\n编辑好触发器之后，要在云函数目录 > 右键 > `上传触发器`\n\n#### [#]( #配置云函数超时时间)配置云函数超时时间\n\n当云函数比较复杂的时候，默认的超时时间3秒可能不能够满足需求，可以适当的设置更为合理的时间\n\n云开发控制台 > 云函数 > 配置 > 超时时间\n\n#### [#]( #上拉加载与下拉刷新)上拉加载与下拉刷新\n\n```js\npage页面json中：\n\"enablePullDownRefresh\": true\n\n\npage页面js中有这两个函数：\n\n /**\n   * 页面相关事件处理函数--监听用户下拉动作\n   */\n  onPullDownRefresh: function() {\n\t this.setData({\n      playlist: []\n    })\n    this._getPlaylist()\n  },\n\n  /**\n   * 页面上拉触底事件的处理函数\n   */\n  onReachBottom: function() {\n    this._getPlaylist()\n  },\n\n\n\n 下拉刷新请求完数据后\n wx.stopPullDownRefresh() // 停止下拉刷新动画\n```\n\n#### [#]( #云函数路由优化tcb-router)云函数路由优化tcb-router\n\n一个用户在一个云环境只能创建50个云函数\n\n假如小程序非常复杂，50个云函数不能够满足业务需求怎么办？\n\n相似的请求归类到同一个云函数处理\n\ntcb-router是一个koa风格的云函数路由库\n\n通俗理解就是可以把很多个接口归类到同一个云函数内。\n\ngithub-tcb-router: [https://github.com/TencentCloudBase/tcb-router(opens new window)](https://github.com/TencentCloudBase/tcb-router)\n\nkoa洋葱模型...\n\n安装：\n\n```sh\n在使用到tcb-router的云函数目录下打开命令行，输入命令进行安装\nnpm install --save tcb-router\n```\n\n\n\n```js\n// 云函数的 index.js\nconst TcbRouter = require('router'); // 必需\n\nexports.main = (event, context) => {\n    const app = new TcbRouter({ event });// 必需\n\n    // app.use 表示该中间件会适用于所有的路由(全局中间件) 非必需\n    app.use(async (ctx, next) => { // 这个中间件表示所有路由都会调用到，而路由中间件为单独调用\n        ctx.data = {}; // 获取要传给小程序端的数据\n        ctx.data.openId = event.userInfo.openId // 这里获取到的openId将分布到所有路由\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为数组表示，该中间件适用于 user 和 timer 两个路由\n    app.router(['user', 'timer'], async (ctx, next) => {\n        ctx.data.company = 'Tencent'; // 这里获取到的数据将分布到 user 和 timer 两个路由\n        await next(); // 执行下一中间件\n    });\n\n    // 路由为字符串，该中间件只适用于 user 路由\n    app.router('user', async (ctx, next) => {\n        ctx.data.name = 'heyli';  // 获取要传给小程序端的数据\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = 'male'; // 获取要传给小程序端的数据\n        await next(); // 执行下一中间件\n    }, async (ctx) => {\n        ctx.data.city = 'Foshan'; // 获取要传给小程序端的数据\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data};  // 要传给小程序端的数据\n    });\n\n    // 路由为字符串，该中间件只适用于 timer 路由\n    app.router('timer', async (ctx, next) => {\n        ctx.data.name = 'flytam';\n        await next(); // 执行下一中间件\n    }, async (ctx, next) => {\n        ctx.data.sex = await new Promise(resolve => {\n        // 等待500ms，再执行下一中间件\n        setTimeout(() => {\n            resolve('male');\n        }, 500);\n        });\n        await next(); // 执行下一中间件\n    }, async (ctx)=>  {\n        ctx.data.city = 'Taishan';\n\n        // ctx.body 返回数据到小程序端\n        ctx.body = { code: 0, data: ctx.data };\n    });\n\n    return app.serve(); // 必需\n\n}\n\n\n小程序端：\n\n// 调用名为 router 的云函数，路由名为 user\nwx.cloud.callFunction({\n    // 要调用的云函数名称\n    name: \"router\",\n    // 传递给云函数的参数\n    data: {\n        $url: \"user\", // 要调用的路由的路径，传入准确路径或者通配符*\n        other: \"xxx\"\n    }\n}).then((res) => {\n\tconsole.log(res)\n})\n```\n\n上面tcb-router代码会按照洋葱模型执行，即先从上往下逐个进入中间件，再从下往上逐个退出中间件。\n\n#### [#]( #本地存储-缓存)本地存储（缓存）\n\n```js\n// 存储：\nwx.setStorageSync(key, data) // 同步存储（存储成功再继续下一步操作）\nwx.setStorage(key, data) // 异步存储（即使存储没成功也会执行下一步代码）、\n\n// 读取：\nwx.getStorageSync(key) // 同步 （读取到数据在进行下一步操作）\nwx.setStorage(key) // 异步\n```\n\n\n\n#### [#]( #api设置title)api设置title\n\n```js\nwx.setNavigationBarTitle({\n      title: '',\n})\n```\n\n\n\n#### [#]( #背景播放音)背景播放音\n\n[BackgroundAudioManager (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html)全局唯一的背景音频管理器\n\n```json\n// 需要在app.json配置，才能使用后台音乐播放的能力\n\n\"requiredBackgroundModes\": [\"audio\", \"location\"]\n```\n\n\n\n```js\n// 获取全局唯一的背景音频管理器\nconst backgroundAudioManager = wx.getBackgroundAudioManager()\n\n\nbackgroundAudioManager.src = 音频链接\nbackgroundAudioManager.title = 音频标题\n```\n\n\n\n#### [#]( #createselectorquery查询节点信息)createSelectorQuery查询节点信息\n\n[createSelectorQuery (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html)小程序的方法，用于查询节点等操作\n\n```js\nconst query = wx.createSelectorQuery()\nquery.select('#the-id').boundingClientRect() // 节点的布局信息\nquery.selectViewport().scrollOffset()\nquery.exec(function(res){\n  res[0].top       // #the-id节点的上边界坐标\n  res[1].scrollTop // 显示区域的竖直滚动位置\n})\n```\n\n\n\n#### [#]( #组件内的方法)组件内的方法\n\n[Component(Object object)(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html)\n\n#### [#]( #组件生命周期)组件生命周期\n\n[lifetimes(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html)\n\n```js\n// 生命周期\nlifetimes: {\n    ready() { // 在组件在视图层布局完成后执行\n   \t ...\n    }\n},\n```\n\n\n\n##### [#]( #组件所在页面的生命周期)组件所在页面的生命周期\n\n```js\nComponent({\n  pageLifetimes: {\n    show: function() {\n      // 页面被展示\n    },\n    hide: function() {\n      // 页面被隐藏\n    },\n    resize: function(size) {\n      // 页面尺寸变化\n    }\n  }\n})\n```\n\n#### 对数据的监听\n\n[observers(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html)\n\n```js\nobservers: { // 对数据的监听(数据初次加载完成也会执行)\n    监听的数据对象(newData){\n      console.log(newData)\n    }\n},\n```\n\n\n\n#### [#]( #子组件自定义事件传递给父组件)子组件自定义事件传递给父组件\n\n```text\n子组件js：\n// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）\nthis.triggerEvent('自定义事件名', 参数x)\n\n\n父组件wxml：\n<子组件标签 bind:自定义事件名=\"执行的事件\" />\n\n父组件js：\n执行的事件(event) {\n\tconsole.log(event.detil.参数)\n}\n```\n\n\n\n#### [#]( #父组件自定义事件传递给子组件)父组件自定义事件传递给子组件\n\n```text\n父组件wxml：\n<子组件标签 class=\"子组件类名\">\n\n父组件JS：\n// 选择组件，并传入事件和参数\nthis.selectComponent('.子组件类名').自定义事件名(传入参数)\n\n子组件js：\nmethods: {\n\t自定义事件名(参数x){\n\t\tconsole.log(参数x)\n\t}\n}\n```\n\n\n\n#### [#]( #兄弟组件间传递事件和传值)兄弟组件间传递事件和传值\n\n```text\n例子：子组件1向子组件2传递参数\n\n父组件wxml中：\n<子组件标签1 bind:自定义事件名1=\"执行的事件\">\n<子组件标签2 class=\"子组件2类名\">\n\n父组件js：\n执行的事件(event) {\n\tthis.selectComponent('.子组件2类名').自定义事件名2(event.detil.参数x) // 向子组件2传值\n}\n\n子组件1js：\n// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）\nthis.triggerEvent('自定义事件名1', 参数x)\n\n\n\n子组件2js：\nmethods: {\n\t自定义事件名2(参数x){\n\t\tconsole.log(参数x)  // 接收父组件传入的值\n\t}\n}\n\n```\n\n#### [#]( #获取手机信息)获取手机信息\n\n[wx.getSystemInfo(Object object)(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html)\n\n```js\nwx.getSystemInfo({\n\tsuccess(res){\n\t\tconsole.log(res) //手机信息\n\t}\n})\n```\n\n#### [#]( #滚动组件)滚动组件\n\n[scroll-view(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html)\n\n```html\n<scroll-view scroll-y scroll-top=\"{{scrollTop}}\" scroll-with-animation=\"true\">\n</scroll-view>\n```\n\n\n\n#### [#]( #全局属性、方法-类似vuex)全局属性、方法（类似vuex）\n\n```text\n在app.js中：\n\nonLaunch: function () {\n\tthis.globalData = {// 设置全局属性、方法\n\t\ttest: 0\n\t}\n},\nsetGlobalData(dataItem, val) { // 设置全局属性\n\tthis.globalData[dataItem] = val\n},\ngetGlobalData(dataItem) { // 获取全局属性\n\treturn this.globalData[dataItem]\n}\n\n\n在需要调用的页面js中：\nconst app = getApp() // 在最顶部先调用app方法\n\n// 设置全局属性\napp.setGlobalData('test', 1)\n\n// 获取全局属性\napp.getGlobalData('test')\n```\n\n\n\n#### [#]( #消息提示框)消息提示框\n\n[showToast(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html)\n\n```js\nwx.showToast({\n  title: '成功',\n  icon: 'success', //图标： success 成功、loading 加载中、none 无\n  duration: 2000\n})\n```\n\n\n\n## [#]( #《发现》页面)《发现》页面\n\n#### [#]( #调用组件外部的样式)调用组件外部的样式\n\ncomponents内部的组件无法直接调用外部的样式。可通过以下方式调用组件外部样式：\n\n**方法一：**\n\n```text\n父组件wxml：\n<!-- iconfont 和 icon-sousuo 是传入组件内部的样式名称，iconfont（自定义名称）=\"iconfont（外部样式文件中定义的样式名）\"  -->\n<x-search iconfont=\"iconfont\" icon-sousuo=\"icon-sousuo\"/>\n\n\n子组件js:\n// 组件外部样式\n  externalClasses: [\n    'iconfont', // 对应的是上面等号前面的名称\n    'icon-sousuo'\n  ],\n\n 子组件wxml： 即可实现调用组件外的样式\n <i class=\"iconfont icon-sousuo\" />\n\n\n  注意：如果想在组件内部再次修改样式，不能够引用外部传进来的class名称进行修改，可以另起一个class名称进行修改。\n```\n\n\n\n**方法二：**\n\n[消除样式隔离(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#组件样式隔离)\n\n```js\n组件内:\nComponent({\n  options: {\n    styleIsolation: 'apply-shared'\n  }\n})\n```\n\n\n\n#### [#]( #组件插槽slot)组件插槽slot\n\n**单个插槽**\n\n```text\n父组件调用传入插槽内容:\n<组件标签>\n    <view>\n      <view>插槽内容</view>\n      <view>插槽内容</view>\n    </view>\n</组件标签>\n\n 组件内部定义slot标签:\n <view>\n    <!-- slot插槽 -->\n    <slot></slot>\n</view>\n```\n\n\n\n**如果需要实现多个插槽**\n\n```text\n父组件调用传入插槽内容:\n<组件标签>\n    <view slot=\"slot2\">\n      <view>插槽1内容</view>\n      <view>插槽1内容</view>\n    </view>\n\n     <view slot=\"slot1\">\n      <view>插槽2内容</view>\n      <view>插槽2内容</view>\n    </view>\n</组件标签>\n\n组件js :\noptions: {// 设置\n    multipleSlots: true // 打开多个插槽功能\n},\n\n\n组件内部定义slot标签:\n<view>\n    <!-- slot插槽 具名插槽-->\n    <slot name=\"slot1\"></slot>\n    <slot name=\"slot2\"></slot>\n</view>\n```\n\n\n\n#### [#]( #判断用户授权)判断用户授权\n\n[授权(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html)\n\n```js\n// 判断用户是否授权\n    wx.getSetting({\n      success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n        console.log(res)\n        if (res.authSetting['scope.userInfo']) { // 已授权\n         wx.getUserInfo({ // 获取用户信息\n           success(res) {\n             console.log(res)\n           }\n         })\n        } else { // 未授权\n\n        }\n      }\n    })\n```\n\n\n\n#### [#]( #button的开发能力-获取用户信息-1)button的开发能力（获取用户信息）1\n\n```js\n<button class=\"login\"\n    open-type=\"getUserInfo\"\n    bindgetuserinfo=\"onGetUserInfo\"     // bindgetuserinfo 为固定的\n>\n\t获取微信授权信息\n</button>\n\n\nbindgetuserinfo 事件会询问用户是否同意授权\n\n\njs中：\n    onGetUserInfo(event) { // 获取用户信息\n      const userInfo = event.detail.userInfo\n      if (userInfo) { // 用户允许授权\n        this.setData({\n          modalShow: false\n        })\n        this.triggerEvent('loginSuccess', userInfo) // 给父组件传用户数据\n      } else { // 用户拒绝授权\n        this.triggerEvent('loginFail')\n      }\n    }\n```\n\n\n\n#### [#]( #原生组件)原生组件\n\n[原生组件(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html)\n\n```html\nauto-focus 自动获取焦点\n\n<textarea\n    class=\"content\"\n    placeholder=\"分享新鲜事...\"\n    maxlength=\"140\"\n    auto-focus\n    bindinput=\"onInput\"\n    bindfocus=\"onFocus\"\n    bindblur=\"onBlur\"\n  ></textarea>\n```\n\n\n\n#### [#]( #选择上传图片)选择上传图片\n\n[上传图片(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html)\n\n```js\nlet max = 9 - this.data.images.length // 还能再选几张图片\nwx.chooseImage({\n      count: max, // 还能再选几张图片\n      sizeType: ['original', 'compressed'], // 初始值 and 压缩过的\n      sourceType: ['album', 'camera'], // 手机相册选择 and 拍照选择\n      success: (res) => { // 箭头函数改变this指向\n        console.log(res)\n      },\n    })\n```\n\n\n\n#### [#]( #图片裁剪)图片裁剪\n\n[图片裁剪(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n```html\n<!-- mode 图片裁剪 aspectFill 保证短边完整显示 -->\n<image class=\"image\" src=\"{{item}}\" mode=\"aspectFill\"></image>\n```\n\n\n\n#### [#]( #获取标签自定义属性data-删除图片的实现)获取标签自定义属性data-* （删除图片的实现）\n\n```text\n<!-- 显示图片 -->\n    <block wx:for=\"{{images}}\" wx:key=\"*this\">\n      <view class=\"image-wrap\">\n        <!-- mode 图片裁剪 aspectFill 保证短边完整显示 -->\n        <image class=\"image\" src=\"{{item}}\" mode=\"aspectFill\"></image>\n        <icon class=\"iconfont icon-shanchu\" bindtap=\"onDelImage\" data-index=\"{{index}}\"></icon>\n      </view>\n    </block>\n\n\n    // 删除图片\n  onDelImage(event) {\n  \t// event.target.dataset.index 获取标签属性data-index的值\n    this.data.images.splice(event.target.dataset.index, 1) // splice会改变原有数组\n    this.setData({\n      images: this.data.images\n    })\n  },\n```\n\n\n\n#### [#]( #全屏预览图片-点击图片放大预览)全屏预览图片(点击图片放大预览)\n\n[全屏预览图片(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html)\n\n```js\n// 全屏预览图片\n  onPreviewImage(event) {\n    wx.previewImage({\n      urls: this.data.images, // 图片地址列表\n      current: event.target.dataset.imgsrc // 当前预览图片地址\n    })\n  },\n```\n\n\n\n#### [#]( #文件上传云存储-发布博客例子)文件上传云存储（发布博客例子）\n\n[文件上传云存储(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html)\n\n```js\n //  结合'发布'的例子：\n  send() {\n    // 验证是否输入内容\n    if (content.trim() === '') { // trim() 去掉字符串空格\n      wx.showToast({\n        title: '请输入内容',\n        icon: 'none'\n      })\n      return\n    }\n    wx.showLoading({\n      title: '发布中',\n    })\n    /**\n     * 实现思路及步骤：\n     * 1、图片 -> 上传 云存储  -> 生成 图片fineID（云文件ID）\n     * 2、数据 -> 录入 云数据库\n     *    数据包括：文字内容、图片fineID、昵称、头像、发布时间、openId(用户唯一标识，在插入数据库是系统会自动添加_openId字段，不需要另外插入)\n     */\n    let promiseArr = []\n    let fileIds = []\n    // 图片上传云存储\n    this.data.images.forEach((item) => {\n      let p = new Promise((resolve, reject) => {\n        let suffix = /\\.\\w+$/.exec(item)[0] // 文件扩展名(文件后缀)\n        wx.cloud.uploadFile({ // 每次只能上传一个文件\n          /**\n           * cloudPath 云路径。如果路径相同，后上传的文件会覆盖原文件\n           * 路径：blog/云存储中的文件夹 + Date.now()时间戳 + Math.random()*1000000随机数 + 文件后缀\n           */\n          cloudPath: 'blog/' + Date.now() + '-' + Math.random() * 1000000 + suffix,\n          filePath: item, // 文件本地临时路径\n          success: (res) => {\n            fileIds.push(res.fileID)\n            resolve()\n          },\n          fail: (err) => {\n            console.error(err)\n            reject()\n          }\n        })\n      })\n      promiseArr.push(p)\n    })\n\n    // 存入云数据库\n    Promise.all(promiseArr).then((res) => {\n      db.collection('blog').add({\n        data: {\n          ...userInfo, // 昵称、头像\n          content, // 内容\n          img: fileIds, // 图片fileID列表\n          createTime: db.serverDate() // 创建时间，取服务端时间\n        }\n      }).then((res) => {\n        wx.hideLoading()\n        wx.showToast({\n          title: '发布成功',\n        })\n        // 返回博客页面，并刷新\n        wx.navigateBack()\n\n      })\n    }).catch((err) => {\n      wx.hideLoading()\n      wx.showToast({\n        title: '抱歉，发布失败',\n        icon: 'none'\n      })\n    })\n  },\n```\n\n\n\n#### [#]( #js模块化-时间格式化)js模块化 （时间格式化）\n\n在目录utils 中新建formatTime.js文件\n\n```js\n// 时间格式化 模块封装\nmodule.exports = (date) => { // date 数据格式为 date\n  let fmt = 'yyyy-MM-dd hh:mm:ss' // 预定格式\n  const o = {\n    // + 正则中的1个或多个\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds()\n  }\n\n  if (/(y+)/.test(fmt)) {\n    // $1 表示正则中的第一个，即(y+)\n    fmt = fmt.replace(RegExp.$1, date.getFullYear()) // replace 替换\n  }\n\n  for (let k in o) {\n    if (new RegExp('('+ k +')').test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, o[k].toString().length === 1 ? '0' + o[k] : o[k])\n    }\n  }\n\n  return fmt\n}\n\n```\n\n在组件引入js模块\n\n```js\nimport formatTime from '../../utils/formatTime.js'\n\n使用：\nformatTime(new Date('Wed Aug 28 2019 16:23:06 GMT+0800 (中国标准时间)'))\n```\n\n\n\n#### [#]( #阻止事件冒泡-2)阻止事件冒泡\n\n`bind` 和 `catch` 都可以绑定事件，它们的区别是 `bind` 有事件冒泡，而 `catch` 没有\n\n#### [#]( #返回上一个页面并执行方法)返回上一个页面并执行方法\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html)\n\n```js\n // 返回博客页面，并刷新\n wx.navigateBack()\n const pages = getCurrentPages() // 获取当前页面栈\n const prevPage = pages[pages.length - 2]  // 取到上一个页面\n prevPage.onPullDownRefresh() // 执行上一个页面的方法 onPullDownRefresh\n```\n\n\n\n#### [#]( #图片懒加载)图片懒加载\n\n[API(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/image.html)\n\n```html\n给image标签设置 lazy-load 为 true\n<image class=\"img\" src=\"{{item}}\" lazy-load=\"true\"></image>\n\n.img {\n  background: #eee;\n}\n```\n\n\n\n**懒加载占位图可以给image设置背景图或背景色**\n\n#### [#]( #模糊查询)模糊查询\n\n```js\n// 获取博客列表\n  app.router('blogList', async (ctx, next) => {\n    const keyword = event.keyword // 搜索关键字 调用接口时传递来的数据\n    let w = {}\n    if (keyword.trim() != '') {\n      w = {\n        content: db.RegExp({ // 正则\n          regexp: keyword,\n          options: 'i' // i表示忽略大小写\n        })\n      }\n    }\n\n    // where查询条件 skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序\n    ctx.body =  await blogCollection.where(w).skip(event.start).limit(event.count)\n    .orderBy('createTime', 'desc').get().then((res) => {\n      return res.data\n    })\n\n  })\n```\n\n\n\n#### [#]( #提升模糊查询的效率-添加索引-对数据量大的查询效果明显)提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）\n\n云开发控制台 > 数据库相应的集合 > 索引管理 > 添加索引 > 输入自定义索引名称、该字段的值是否唯一、被查询的字段名、升序/降序 > ok\n\n#### [#]( #小程序端调用云数据库)小程序端调用云数据库\n\n一般调用云数据库的操作都写在云函数内，其实小程序端也可以对数据库进行操作。\n\n小程序端一次最多只能查询20条数据，云函数端最多可查询100条数据，可使用多次查询拼接的方式突破限制。\n\n```js\n// 小程序端调用云数据库示例\n    const db = wx.cloud.database() // 初始化数据库\n    db.collection('blog').orderBy('createTime','deac').get().then((res) => {\n      console.log(res)\n    })\n```\n\n\n\n#### [#]( #云数据库权限管理-2)云数据库权限管理\n\n**注意：云控制台和服务端（云函数）始终有所有数据读写权限，**\n\n**但权限的管理仅对小程序端发起的请求有效。**\n\n- 仅创建者可写，所有人可读 （适合于文章）\n- 仅创建者可读写 (适用于私密内容)\n- 仅管理端可写，所有人可读（适用于商品信息）\n- 仅管理端可读写（适用于后台敏感数据）\n\n#### [#]( #数据库中1对n关系的三种设计方式)数据库中1对N关系的三种设计方式\n\n##### [#]( #第一种-n的数量较少-几十个以内)第一种：N的数量较少 几十个以内\n\n**1 条记录存储 N 个子数据**\n\n​\t如一条博客中，最多有9张图片，这9张图片可和其他数据放在一个记录中。\n\n```js\n[\n\t{\n\t\tid:...\n\t\timg:[\n\t\t'...', '...', '...', '...', '...', '...', '...', '...', '...'\n\t\t]\n\t}\n]\n```\n\n\n\n##### [#]( #第二种-n的数量较多-几十到几百个)第二种：N的数量较多 几十到几百个\n\n**1 存储 每个N的 id**\n\n可分两个数据库集合，\n\n一个为 '目录' 集合，存放 '详情' 集合下的每条数据的 id 目录\n\n一个为 '详情' 集合，每条数据对应一个单独的 id 和 详细数据\n\n```js\n目录集合：\n[\n\t{\n\t\t'id':\"11\",\n\t\t'name': '产品1',\n\t\t'xqs': ['111','222','333', ... ]  // 存放 详情集合 中的每条数据 id\n\t}\n]\n\n\n\n详情集合：\n[\n{'id':\"111\",name:'零件1',title:'...' ...},\n{'id':\"222\",name:'零件2',title:'...' ...},\n{'id':\"333\",name:'零件3',title:'...' ...},\n...\n]\n```\n\n\n\n如歌单列表，与歌曲详情的数据组合设计。\n\n##### [#]( #第三种-n的数量巨大-几百成千上万个)第三种：N的数量巨大 几百成千上万个\n\n**每个 N 都存储 1 的 id**\n\n如新浪博客中的一条博客下面有几千条评论\n\n```js\n一条新浪博客：\n[{\n\t'id':'11',\n\t'content':'博客内容'\n\t...\n}]\n\n\n上千条评价：\n[\n{\n\t'id':'111111'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容1'\n},\n{\n\t'id':'222222'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容2'\n},\n{\n\t'id':'33333'\n\t'blogId':'11', // 这个id对应的是那一条博客的id\n\t'content': '评价内容3'\n},\n...\n]\n```\n\n\n\n#### [#]( #云调用)云调用\n\n通过云函数调用服务端的开发接口\n\n这些接口如：模板消息推送、生成小程序码...\n\n#### [#]( #模板消息推送)模板消息推送\n\n**1、使用from表单才能触发消息推送，并设置report-submit=\"true\"**\n\n```html\n<form slot=\"modal-content\" report-submit=\"true\" bind:submit=\"onSend\">\n    <textarea name=\"content\" class=\"comment-content\" placeholder=\"写评论\" value=\"{{content}}\" fixed=\"true\"></textarea>\n    <button class=\"send\" form-type=\"submit\">发送</button>\n  </form>\n```\n\n\n\n**2、需要到微信公众平台做相应的设置：**\n\n微信公众平台 > 功能 > 模板消息 > 添加模板 > 选择相应的模板> 添加成功后会有一个模板ID\n\n**3、新建一个云函数，用于云调用。在该云函数下新建配置文件：config.json ，用于配置权限**\n\nconfig.json ：\n\n```json\n{\n  \"permissions\": {\n    \"openapi\": [\n      \"templateMessage.send\"\n    ]\n  }\n}\n```\n\n\n\n云函数设置消息推送：\n\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  // 获取openid\n  const { OPENID } = cloud.getWXContext()\n\n  // 模板推送消息\n  const result = await cloud.openapi.templateMessage.send({\n    touser: OPENID,\n    page: `/pages/blog-comment/blog-comment?blogId=${event.blogId}`, // 用户点击推送消息打开的页面\n    data: { // 模板的内容，keyword为在公众平台设置模板时对应的字段\n      keyword1: { // 评价内容\n        value: event.context\n      },\n      keyword2: { // 评价时间\n        value: event.time\n      }\n    },\n    templateId: 'LNwKMcYwlz-0HabgBhmZi6CWZrlNSBiNJ2h0SMorcxQ', // 模板id，到公众平台模板消息上获取\n    formId: event.formId // 触发消息推送的form表单的id\n  })\n\n  return result\n}\n```\n\n\n\n**4、在提交表单事件完成后调用消息推送云函数**\n\n```js\n wx.cloud.callFunction({\n          name: 'sendMessage',\n          data: {\n            content,\n            formId,\n            blogId: this.properties.blogId\n          }\n        }).then((res) => {\n          console.log(res)\n        })\n```\n\n\n\n#### [#]( #云函数多集合查询数据库)云函数多集合查询数据库\n\n```js\n// 博客详情(博客内容、评论)\n  app.router('blogDetail', async(ctx, next) => {\n    let blogId = event.blogId\n\n    // 博客内容\n    let detail = await blogCollection.where({\n      _id: blogId\n    }).get().then((res) => {\n      return res.data\n    })\n\n    // 评论查询\n    const countResult = await blogCollection.count()\n    const total = countResult.total\n    let commentList = {\n      data: []\n    }\n    if (total > 0) {\n      // 突破100条限制\n      const batchTimes = Math.ceil(total / MAX_LIMIT)\n      const tasks = []\n      for (let i = 0; i < batchTimes; i++) {\n        let promise = db.collection('blog-comment').skip(i * MAX_LIMIT)\n          .limit(MAX_LIMIT).where({\n            blogId\n          }).orderBy('createTime', 'desc').get()\n        tasks.push(promise)\n      }\n      if (tasks.length > 0) {\n        commentList = (await Promise.all(tasks)).reduce((acc, cur) => {\n          return {\n            data: acc.data.concat(cur.data)\n          }\n        })\n      }\n\n    }\n    ctx.body = {\n      detail,\n      commentList\n    }\n  })\n```\n\n\n\n#### [#]( #分享功能)分享功能\n\n分享功能需要button标签，设置open-type=\"share\"\n\n```html\n<button open-type=\"share\" data-blogid=\"{{blogId}}\" data-blog=\"{{blog}}\" class=\"share-btn\" hover-class=\"share-hover\">\n      <i class=\"iconfont icon-fenxiang icon\"></i>\n      <text>分享</text>\n    </button>\n```\n\n\n\n在js中有onShareAppMessage方法，点击button会自动执行此方法\n\n```js\nonShareAppMessage: function (event) {\n    console.log(event)\n\n    // 对分享卡片的设置\n    let blogObj = event.target.dataset.blog\n    return {\n      title: blogObj.content,\n      path: `/pages/blog-comment/blog-comment?blogId=${blogObj._id}`,\n      // imageUrl: '' // 自定义图片，不支持云存储的图片\n    }\n  }\n```\n\n\n\n#### [#]( #不同场景获取用户信息的方式)不同场景获取用户信息的方式\n\n##### [#]( #场景一-只想在界面上显示自己的昵称和头像)场景一：只想在界面上显示自己的昵称和头像\n\n以组件的方式：根据type类型获取不同用户数据\n\n**该方式不需要授权，只能用于在wxml显示自己的信息**\n\n[open-data(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html)\n\n```html\n<open-data type=\"userAvatarUrl\"></open-data>\n<open-data type=\"userNickName\"></open-data>\n...\n```\n\n\n\n##### [#]( #场景二-在js中获取用户信息)场景二：在JS中获取用户信息\n\n该方式要在用户授权以后才能获取用户信息\n\n[wx.getUserInfo(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\n```js\nwx.getUserInfo({\n      success: (res) => {\n        console.log(res)\n      }\n    })\n```\n\n\n\n在未授权的情况下需要用户先授权：\n\n```js\n// 判断用户是否授权\n      wx.getSetting({\n        success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n          if (res.authSetting['scope.userInfo']) { // 已授权\n            wx.getUserInfo({ // 获取用户信息\n              success: (res) => { // 这里使用箭头函数可改变内部this指向为外部的this\n\n                app.setGlobalData('userInfo', res.userInfo) // 设置app全局属性\n\n                this.onLoginSuccess({\n                  detail: res.userInfo\n                })\n              }\n            })\n          } else { // 未授权\n            this.setData({ // 打开弹出层，显示获取用户信息按钮\n              modalShow: true\n            })\n          }\n        }\n      })\n\n\n  授权按钮\n <button class=\"login\" open-type=\"getUserInfo\" bindgetuserinfo=\"onGetUserInfo\">获取微信授权信息</button>\n\n\n    onGetUserInfo(event) { // 获取用户信息\n      const userInfo = event.detail.userInfo\n      if (userInfo) { // 用户允许授权\n        this.setData({\n          modalShow: false\n        })\n        this.triggerEvent('loginSuccess', userInfo) // 给父组件传用户数据\n      } else { // 用户拒绝授权\n        this.triggerEvent('loginFail')\n      }\n    }\n```\n\n\n\n> 注意：上面这种方式没有获取到openId\n\n##### [#]( #场景三-获取openid)场景三：获取openId\n\n**获取openId不需要用户授权**\n\n1、传统开发方式获取openId，后台服务器由自己开发，没使用云开发\n\n小程序端 微信服务器 后端服务器\n\n步骤：\n\n小程序端 调用 wx.login 向微信服务器 获取code\n\n小程序端 调用 wx.request 将 code 传递给 后端服务器\n\n后端服务器 使用code 向微信服务器 换取openid和session_key\n\n后端服务器 将openid 发送给 小程序端\n\n2、云开发方式获取openId\n\n云函数login中\n\n```js\n// 获取 WX Context (微信调用上下文)，包括 OPENID、APPID、及 UNIONID（需满足 UNIONID 获取条件）\n  const wxContext = cloud.getWXContext()\n\n  return {\n    event,\n    openid: wxContext.OPENID,\n    appid: wxContext.APPID,\n    unionid: wxContext.UNIONID,\n  }\n```\n\n\n\n```js\n普通按钮\n<button bindtap=\"getOpenid\">获取openid</button>\n\ngetOpenid() {\n\twx.cloud.callFunction({\n\t\tname: 'login'\n\t}).then((res) => {\n\t\tconsole.log(res)\n\t})\n}\n```\n\n\n\n> openid 在小程序和公众号下是不一样的\n>\n> unionid 在小程序和公众号下都是一样的\n\n## [#]( #《我的》页面)《我的》页面\n\njson文件\n\n```js\n\"navigationBarTitleText\": \"我的\",\n  \"disableScroll\": true  // 使页面无法滚动\n```\n\n\n\n#### [#]( #导航页面链接跳转)导航页面链接跳转\n\n[navigator(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html)\n\n#### [#]( #背景图片)背景图片\n\nwxss背景图片不支持本地相对路径的图片，只支持网络图片和base64图片\n\n建议使用base64图片，图片文件最好不要太大。\n\n#### [#]( #每个页面都有的page标签)每个页面都有的page标签\n\n```js\npage {\n  background-color: #f1f1f1;\n}\n```\n\n\n\n#### [#]( #播放历史与本地存储)播放历史与本地存储\n\n方案一：播放历史存储在数据库当中，这样在不同设备访问都可查看播放历史。读取速度相对较慢\n\n方案二：播放历史存储在本地，仅当前设备可查看播放历史。读取速度较快\n\n本项目采用本地存储：\n\n使用openid作为本地存储的key，播放历史存入value\n\n在app.js中获取openid，即打开小程序就获取openid。\n\n```js\n// app.js\nonLaunch: function () {\n\tthis.getOpenid() // 获取openid并存储\n},\ngetOpenid() { // 获取openid并存储\n    wx.cloud.callFunction({\n      name: 'login'\n    }).then((res) => {\n      const openid = res.result.openid\n      this.globalData.openid = openid // 保存到全局变量\n      if (wx.getStorageSync(openid) == '') { // 该用户从未打开过小程序，未存储过openid在本地\n        wx.setStorageSync(openid, []) // 存储openid到本地\n      }\n    })\n  }\n```\n\n\n\n歌曲播放时\n\n```js\n// 保存播放历史到本地存储\n  savePlayHistory() {\n    const currentSong = musiclist[nowPlayingIndex] // 当前播放歌曲\n    const openid = app.globalData.openid // 从全局属性获取openid\n    const playHistory = wx.getStorageSync(openid) // 从本地存储获取播放历史数组\n\n    for (let i = 0, len = playHistory.length; i < len; i++) {\n      if (playHistory[i].id === currentSong.id) { // 当前播放歌曲已存在播放历史中\n        playHistory.splice(i, 1) // 删除原纪录\n        break\n      }\n    }\n\n    playHistory.unshift(currentSong) // 在数组开头插入\n    wx.setStorage({ // 存入本地\n      key: openid,\n      data: playHistory\n    })\n\n  },\n```\n\n\n\n播放历史页面获取\n\n```js\nonLoad: function (options) {\n\n    const openid = app.globalData.openid //从全局属性获取openid\n    const playHistory = wx.getStorageSync(openid) // 读取本地播放历史数据\n\n    if (playHistory.length !== 0) { // 有播放历史\n      this.setData({\n        playHistory\n      })\n      wx.setStorage({ // storage里把musiclist（播放列表）的内容换成播放历史的列表\n        key: 'musiclist',\n        data: playHistory,\n      })\n    }\n\n  },\n```\n\n\n\n#### [#]( #我的发现)我的发现\n\n代码分别演示了从云函数和小程序端获取数据，从小程序端获取数据享有**权限管理**的能力，不需要传openid。\n\n#### [#]( #小程序码)小程序码\n\n[获取小程序码(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html)\n\n本项目演示使用[接口 B：适用于需要的码数量极多的业务场景 (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)`云调用` 的方式。\n\n步骤：\n\n- 创建云函数 gteQRCode\n- gteQRCode云函数下创建config.json配置权限，代码如下：\n\n```json\n{\n  \"permissions\":{\n    \"openapi\":[\n      \"wxacode.getUnlimited\"\n    ]\n  }\n}\n```\n\n\n\n```js\n// 云函数入口函数\nexports.main = async (event, context) => {\n  const wxContext = cloud.getWXContext()\n\n  const result = await cloud.openapi.wxacode.getUnlimited({\n    scene: wxContext.OPENID, // 链接参数 不一定传openid，可传其他任意数据，然后通过此数据，在别人扫码进入时就可用于判断\n    // page: \"pages/blog/blog\" // 默认进入主页\n    // lineColor: { // 线条颜色\n    //   'r': 211,\n    //   'g': 60,\n    //   'b': 57\n    // },\n    // isHyaline: true // 是否透明\n  })\n\n  // result为二进制数据, 先上传到云存储\n\n  // 上传云存储\n  const upload = await cloud.uploadFile({\n    cloudPath: 'qrcode/qrcode' + Date.now() + Math.random() + '.png',\n    fileContent: result.buffer\n  })\n\n  return upload.fileID\n}\n```\n\n\n\n##### [#]( #判断是从扫码小程序码进入-以及参数获取)判断是从扫码小程序码进入，以及参数获取\n\n```js\n// 在从小程序码进入的页面js，onLoad方法中，\n\nonLoad: function (options) {\n\tconsole.log(options.scene) // 获取到小程序码进入的参数\n}\n```\n\n\n\n### [#]( #版本更新检测)版本更新检测\n\n```js\n// app.js\nonLaunch: function(options) {\n    this.checkUpate()\n},\ncheckUpate(){\n    const updateManager = wx.getUpdateManager()\n    // 检测版本更新\n    updateManager.onCheckForUpdate((res)=>{\n      if (res.hasUpdate){\n        updateManager.onUpdateReady(()=>{\n          wx.showModal({\n            title: '更新提示',\n            content: '新版本已经准备好，是否重启应用',\n            success(res){\n              if(res.confirm){\n                updateManager.applyUpdate()\n              }\n            }\n          })\n        })\n      }\n    })\n  },\n```\n\n\n\n### [#]( #性能优化)性能优化\n\n[官网文档优化建议(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html)\n\n使用开发者工具的调试器，Audits进行评分，然后根据提示针对项目进行优化。\n\n### [#]( #场景值scene的作用与应用场景)场景值scene的作用与应用场景\n\n[场景值(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html)\n\n场景值用来描述用户进入小程序的路径。完整场景值的含义请查看[场景值列表 (opens new window)](https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html)。\n\n可根据不同场景进入实现不同业务处理，比如一个点餐小程序，店家内贴了小程序码，用户通过扫码进入，可立即进入点餐页面，等等\n\n在app.js中的onLaunch(options) 、onShow(options)，options包含scene场景值\n\n**开发者工具中，切后台，可模拟进入场景。**\n\n### [#]( #小程序的-seo-页面收录sitemap)小程序的\"SEO\"---页面收录sitemap\n\n在app.js的同级目录下有sitemap.json文件，用于配置收录规则\n\n[stiemap配置(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html)\n\n作用：\n\n使小程序搜索可根据小程序的内容进行搜索到\n\n使用方法：\n\n1、在微信公众平台，小程序信息 > 页面收录设置 > 打开 (默认是已开启)\n\n2、打开sitemap.json文件，配置收录规则\n\n```json\n{\n  \"desc\": \"关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\",\n  \"rules\": [{ // 收录规则\n  \"action\": \"allow\",// 是否被收录，allow允许被收录，disallow不允许\n  \"page\": \"*\" // *星号表示所有页面都被收录\n  }]\n}\n```\n\n```json\n{\n  \"desc\": \"关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\",\n  \"rules\": [{ // 收录规则，可添加多条\n  \"action\": \"allow\", // 是否被收录\n  \"page\":\"pages/player/player\",  // 页面\n  \"params\": [\"musicId\",\"index\"], // 链接的动态参数\n   \"matching\":'exact' // 表示params的参数是否要准确的匹配\n  }，{\n  \"action\": \"disallow\", // 是否被收录\n  \"page\":\"*\",  /\n  }]\n}\n\n// 上面配置规则表示除了player页面被收录外，其他页面不被收录\n```\n\n\n\n### [#]( #小程序上线审核流程)小程序上线审核流程\n\n微信公众平台，版本管理>把小程序上传为体验版》提交审核》上线\n\n## [#]( #后台管理系统)后台管理系统\n\n#### [#]( #架构示意图)架构示意图\n\n​\t前端 后台 小程序云开发\n\nvue-admin-template <---通过ajax--> 基于Koa2；HTTP API 或 tcb-admin-node ---->云函数、云数据库、云存储\n\n\n\n#### [#]( #vue-admin-template构建管理系统前端)vue-admin-template构建管理系统前端\n\n[vue-element-admin (opens new window)](https://github.com/PanJiaChen/vue-element-admin)基于element的后台管理系统模板\n\n[vue-admin-template (opens new window)](https://github.com/PanJiaChen/vue-admin-template)是 [vue-element-admin (opens new window)](https://github.com/PanJiaChen/vue-element-admin)的简化版\n\n使用方法查看官方文档。\n\n#### [#]( #koa2构建管理系统后端)Koa2构建管理系统后端\n\n官网： [https://koa.bootcss.com/(opens new window)](https://koa.bootcss.com/)\n\n新建空文件夹wx-music-admin-backend，打开终端：\n\n```sh\n# 生成package.json文件，-y 表示默认的配置\nnpm init -y\n\n# 安装koa\nnpm install koa\n\n# 新建app.js文件 (win10系统命令)，作为项目入口文件\ntype nul > app.js\n```\n\n\n\napp.js:\n\n```js\nconst Koa = require('koa')\nconst chalk = require('chalk') // 使console.log打印文字有颜色的插件，需: npm i chalk\nconst app = new Koa()\n\napp.use(async (ctx) => {\n  ctx.body = 'Hello Wolrd'\n})\nconst port = 3000\napp.listen(port, () => { // 端口号，开启服务后的回调函数\n  console.log(chalk.green(`> 服务已开启，访问：http://localhost:${port}`))\n})\n```\n\n\n\n终端：\n\n```sh\n# node启动项目\nnode app.js\n\n# 访问：http://localhost:3000\n```\n\n\n\n#### [#]( #接口调用凭证-access-token-的缓存与更新)接口调用凭证 access_token 的缓存与更新\n\naccess_token，微信的接口调用凭证，详情：[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html)\n\n回到项目wx-music-admin-backend，打开终端：\n\n```sh\n# HTTP 请求 插件\nnpm i request\nnpm i request-promise\n```\n\n\n\n```js\n/**\n * 获取微信接口调用凭证\n * 详情：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html\n */\n\n\nconst rp = require('request-promise') // node发送http请求的插件\nconst fs = require('fs') // node文件模块\nconst path = require('path') // node 路径模块\n\n//fileName = __dirname 当前文件所在目录的绝对路径, 加上 './access_token.json'\nconst fileName = path.resolve(__dirname, './access_token.json')\n\n// 这两个参数的获取：微信公众平台>开发>开发设置\nconst APPID = 'wxc4e0b2d98063b103'\nconst APPSECRET = 'xxx' //小程序密钥，注意保密!\n\n// 微信 access_token 请求地址\nconst URL = `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${APPID}&secret=${APPSECRET}`\n\n// 发送请求获取AccessToken\nconst updateAccessToken = async () => {\n  const resStr = await rp(URL)\n  const res = JSON.parse(resStr)\n\n  if (res.access_token) {\n    // node写文件,参数：1 文件路径，2 文件内容, 首次写文件为新建，往后为覆盖\n    fs.writeFileSync(fileName, JSON.stringify({\n      access_token: res.access_token,\n      createTime: new Date()\n    }))\n  } else { // 如获取不到，再次获取\n    await updateAccessToken()\n  }\n}\n\n// 读取access_token\nconst getAccessToken = async () => {\n  try {\n     // node读取文件,参数：1 读取的文件，2 字符集\n    const readRes = fs.readFileSync(fileName, 'utf8')\n    const readObj = JSON.parse(readRes)\n\n    // 如果服务器宕机导致setInterval无法定时更新，这里需要再次判断access_token的有效性\n    const createTime = new Date(readObj.createTime).getTime()\n    const nowTime = new Date().getTime()\n    if((nowTime - createTime) / 1000 / 60 / 60 >= 2) {\n      await updateAccessToken()\n      await getAccessToken()\n      return\n    }\n    return readObj.access_token\n\n  } catch (error) { //捕获异常，在未创建文件时，先创建文件\n    await updateAccessToken()\n    await getAccessToken()\n  }\n}\n\n// access_token有效期为2个小时，定时更新\nsetInterval(async () => {\n  await updateAccessToken()\n}, (7200 - 300) * 1000)\n\nmodule.exports = getAccessToken\n```\n\n\n\n#### [#]( #后端代码通过http-api-触发云函数获取数据)后端代码通过HTTP API 触发云函数获取数据\n\n[HTTP API 触发云函数(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/functions/invokeCloudFunction.html)\n\n#### [#]( #产生跨域和后端解决跨域问题)产生跨域和后端解决跨域问题\n\n管理系统前端向管理系统后端请求数据，产生了跨域问题\n\n```js\n  // 产生跨域的几种情况\n  // http://www.a.com  https://www.a.com 协议不同\n  // http://www.a.com  http://www.b.com 域名不同\n  // http://www.a.com  http://news.a.com 主域与子域不同\n  // http://www.a.com:8080  http://www.a.com:3000 端口不同\n\n// 解决跨域的几种方法\n// jsonp\n// iframe\n// postMessage跨域\n// 跨域资源共享（CORS）\n```\n\n管理系统后端，安装\n\n```sh\n// 解决跨域问题的koa包\nnpm i koa2-cors\n```\n\napp.js\n\n```js\n//处理跨域\napp.use(cors({\n  origin: ['http://localhost:9528'], // 允许访问本服务的域\n  credentials: true\n}))\n```\n\n\n\n#### [#]( #云数据库的增删改查接口)云数据库的增删改查接口\n\n[数据库查询记录(opens new window)](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/database/databaseQuery.html)\n\n#### [#]( #后端获取前端post请求传来的数据)后端获取前端post请求传来的数据\n\nget请求可以直接通过ctx.request.query获取，但是post请求需要安装koa-body\n\n```sh\nnpm i koa-body\n```\n\napp.js\n\n```js\nconst koaBody = require('koa-body') // 对post请求前端传来的数据的获取，需要此依赖\n\n// 接收post参数解析\napp.use(koaBody({\n  multipart: true\n}))\n```\n\n接口.js\n\n```js\nrouter.post('/updatePlaylist', async (ctx, next) => {\n\n  const params = ctx.request.body // post请求获取前端传来的数据，需安装和配置koa-body\n\n})\n```\n\n\n\n#### [#]( #后端获取云存储图片)后端获取云存储图片\n\n云存储中上传图片，云数据库中新建图片的集合，并添加数据字段，字段包含云文件的fileid。\n\n后端项目通过调用云数据库的方式获取数据\n\n```js\nrouter.get('/list', async (ctx, next) => {\n  // 接口中读取数据库默认最多10条数据\n  const query = `db.collection('swiper').get()`\n  const res = await callCloudDB(ctx, 'databasequery', query)\n  console.log(res)\n\n})\n```\n\n\n\n但获取到的数据为fileid，并不能用于显示图片，需要通过微信HTTP API获取云存储的接口来获取图片地址","slug":"小程序开发学习笔记","published":1,"date":"2021-12-31T02:15:25.346Z","updated":"2021-12-31T02:14:06.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtrpxsl0008mc8ic30nctav","content":"<h1 id=\"小程序开发学习笔记\"><a href=\"#小程序开发学习笔记\" class=\"headerlink\" title=\"小程序开发学习笔记\"></a>小程序开发学习笔记</h1><h2 id=\"基础课程部分\"><a href=\"#基础课程部分\" class=\"headerlink\" title=\"基础课程部分\"></a>基础课程部分</h2><h4 id=\"微信公众平台\"><a href=\"#微信公众平台\" class=\"headerlink\" title=\"微信公众平台\"></a>微信公众平台</h4><p><a href=\"https://mp.weixin.qq.com/\">https://mp.weixin.qq.com/(opens new window)</a></p>\n<p>注册时可选择类型：订阅号、服务号、小程序、企业微信</p>\n<p><strong>每个邮箱仅能注册一个小程序。</strong></p>\n<p>个人类型小程序：无法使用微信支付、无法使用卡包功能</p>\n<h5 id=\"小程序文档API\"><a href=\"#小程序文档API\" class=\"headerlink\" title=\"小程序文档API\"></a>小程序文档API</h5><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/\">小程序开发文档(opens new window)</a></p>\n<h5 id=\"微信开放社区\"><a href=\"#微信开放社区\" class=\"headerlink\" title=\"微信开放社区\"></a>微信开放社区</h5><p><a href=\"https://developers.weixin.qq.com/community/develop/question\">微信开发社区(opens new window)</a></p>\n<h4 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"#目录说明\"></a><a href=\"#%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E\">#</a>目录说明</h4><p><strong>默认目录</strong></p>\n<p>pages———————–页面相关</p>\n<p>​    index —————– 首页文件夹</p>\n<p>​    index.js ————首页js</p>\n<p>​    index.json———首页配置</p>\n<p>​    index.wxml——-首页html</p>\n<p>​    index.wxss——–首页css</p>\n<p>utils————————工具相关</p>\n<p>app.js ———————-项目总js</p>\n<p>app.json——————-全局配置( 页面路由以及头部、底部导航的配置等)</p>\n<p>app.wxss —————–项目总样式css</p>\n<p>project.config.json —-项目配置</p>\n<p><strong>代码构成</strong></p>\n<p>.json ：配置文件，以json格式存储配置</p>\n<p>​    项目中有三种配置：项目配置（project.config.json）、全局配置（app.json）、页面配置（index.json）</p>\n<p>.wxml: 相当于html文件</p>\n<p>.wxss: 相当于css</p>\n<p>.js : 就是js</p>\n<h4 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"#文件说明\"></a><a href=\"#%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\">#</a>文件说明</h4><p><strong>project.config.json项目配置 部分代码说明</strong></p>\n<p>setting：{</p>\n<p>urlCheck 是否检测安全的域名</p>\n<p>es6 是否把es6转es5</p>\n<p>postcss 是否把css样式自动补全</p>\n<p>minified 是否压缩</p>\n<p>}</p>\n<p><strong>app.json 全局配置</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html\">全局配置API(opens new window)</a></p>\n<p><strong>wxml 相关介绍</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/\">wxmlAPI(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>循环渲染<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span><br>      &#123;&#123;index&#125;&#125; &#123;&#123;item&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>改变for循环item和index的名称<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">&quot;data&quot;</span> <span class=\"hljs-attr\">wx:for-index</span>=<span class=\"hljs-string\">&quot;inx&quot;</span>&gt;</span><br>\t&#123;&#123;inx&#125;&#125; &#123;&#123;data&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><br>条件渲染 (类似vue的v-if、v-else)<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:if</span>=<span class=\"hljs-string\">&quot;&#123;&#123;isLogin&#125;&#125;&quot;</span>&gt;</span>已登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:else</span>&gt;</span>请登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>条件显示（类似vue的v-show）<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">hidden</span>=<span class=\"hljs-string\">&quot;&#123;&#123;isLogin&#125;&#125;&quot;</span>&gt;</span>显示内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>绑定点击事件<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">“tapName”</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>Page(&#123;<br>  tapName: function(event) &#123;<br>    console.log(event)<br>  &#125;<br>&#125;)<br>...<br></code></pre></td></tr></table></figure>\n\n<p><strong>wxss 相关介绍</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html\">wxssAPI(opens new window)</a></p>\n<p>尺寸单位：rpx，根据屏幕宽度自适应。</p>\n<p>引入外部wxss：@import ’…‘</p>\n<p><strong>js相关介绍</strong></p>\n<p>WXS（WeiXin Script）是小程序的一套脚本语言</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/\">wxsAPI(opens new window)</a></p>\n<p>绑定点击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">“onTapHandler”</span>&gt;</span>点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Page(&#123;<br>  <span class=\"hljs-attr\">data</span>: &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;,<br>  <span class=\"hljs-attr\">onTapHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  \t<span class=\"hljs-built_in\">this</span>.setData(&#123;<br>  \t\t<span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.data.count++<br>  \t&#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"阻止事件冒泡\"><a href=\"#阻止事件冒泡\" class=\"headerlink\" title=\"#阻止事件冒泡\"></a><a href=\"#%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1\">#</a>阻止事件冒泡</h5><p>把绑定方式 bindtap 换成 catchtap 即可。</p>\n<h4 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"#第三方库\"></a><a href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93\">#</a>第三方库</h4><p><strong>WeUI</strong></p>\n<p>weUI是一套同微信原生视觉体验一致的基础样式库</p>\n<p><strong>iView Weapp</strong></p>\n<p>一套高质量的微信小程序UI组件库</p>\n<p><strong>Vant Weapp</strong></p>\n<p>轻量、可靠的小程序UI组件库</p>\n<h4 id=\"云开发\"><a href=\"#云开发\" class=\"headerlink\" title=\"#云开发\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91\">#</a>云开发</h4><p><strong>小程序传统开发模式</strong></p>\n<p>客户端 —–&gt; 服务端（后端代码、数据库）——&gt; 运维（DB维护、文件存储、内容加速、网络防护、容器服务、负载均衡、安全加固等…）</p>\n<p><strong>小程序云开发模式</strong></p>\n<p>客户端 —–&gt; 云开发（云函数、云数据库、云存储）</p>\n<p><strong>传统开发 VS 云开发</strong></p>\n<p>开发效率低 Serverless（无服务）</p>\n<p>运维成本高 开发者更关注业务逻辑</p>\n<p><strong>无服务（Serverless）开发是未来的发展趋势</strong></p>\n<h5 id=\"云开发三大基础能力\"><a href=\"#云开发三大基础能力\" class=\"headerlink\" title=\"#云开发三大基础能力\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E4%B8%89%E5%A4%A7%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B\">#</a><strong>云开发三大基础能力</strong></h5><h5 id=\"云函数\"><a href=\"#云函数\" class=\"headerlink\" title=\"#云函数\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0\">#</a>云函数</h5><p>（相当于传统开发中的后台接口）</p>\n<p>获取appid、获取openid、生成分享图、调用腾讯云SDK …</p>\n<h5 id=\"云数据库\"><a href=\"#云数据库\" class=\"headerlink\" title=\"#云数据库\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>云数据库</h5><p>数据的增、删、改、查 …</p>\n<h5 id=\"云存储\"><a href=\"#云存储\" class=\"headerlink\" title=\"#云存储\"></a><a href=\"#%E4%BA%91%E5%AD%98%E5%82%A8\">#</a>云存储</h5><p>管理文件、上传文件、下载文件、分享文件 …</p>\n<p><strong>每个小程序账号可免费创建两个环境，建议：开发环境、生成环境</strong></p>\n<h4 id=\"云数据库能力\"><a href=\"#云数据库能力\" class=\"headerlink\" title=\"#云数据库能力\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E8%83%BD%E5%8A%9B\">#</a>云数据库能力</h4><p>云开发提供了一个json数据库，提供2GB免费存储空间。</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"#数据类型\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">#</a>数据类型</h4><p>String 字符串</p>\n<p>Number 数字</p>\n<p>Object 对象</p>\n<p>Array 数组</p>\n<p>Boolean 布尔值</p>\n<p>GeoPoint 地理位置点</p>\n<p>Date 时间 （精确到毫秒ms，客户端时间）</p>\n<p>Null 空</p>\n<h4 id=\"操作云数据库\"><a href=\"#操作云数据库\" class=\"headerlink\" title=\"#操作云数据库\"></a><a href=\"#%E6%93%8D%E4%BD%9C%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>操作云数据库</h4><p>小程序控制（读写数据库受权限限制）</p>\n<p>云函数控制（拥有所有读写数据库的权限）</p>\n<p>控制台控制（拥有所有读写数据库的权限）</p>\n<h4 id=\"云数据库权限管理\"><a href=\"#云数据库权限管理\" class=\"headerlink\" title=\"#云数据库权限管理\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\">#</a>云数据库权限管理</h4><p>仅创建者可写，所有人可读 （适合于文章）</p>\n<p>仅创建者可读写 (适用于私密内容)</p>\n<p>仅管理端可写，所有人可读（适用于商品信息）</p>\n<p>仅管理端可读写（适用于后台敏感数据）</p>\n<h4 id=\"操作云数据库-1\"><a href=\"#操作云数据库-1\" class=\"headerlink\" title=\"#操作云数据库\"></a><a href=\"#%E6%93%8D%E4%BD%9C%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93-2\">#</a>操作云数据库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//初始化数据库</span><br><span class=\"hljs-keyword\">const</span> db = wx.cloud.database() <span class=\"hljs-comment\">// 小程序端初始化数据库，如果在云函数端不需要加wx</span><br><br><span class=\"hljs-comment\">//切换环境(开发环境/生产环境)</span><br><span class=\"hljs-keyword\">const</span> testDB = wx.cloud.database(&#123;<br>\t<span class=\"hljs-attr\">env</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实战课程部分\"><a href=\"#实战课程部分\" class=\"headerlink\" title=\"#实战课程部分\"></a><a href=\"#%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E9%83%A8%E5%88%86\">#</a>实战课程部分</h2><h4 id=\"serverless（无服务）\"><a href=\"#serverless（无服务）\" class=\"headerlink\" title=\"#serverless（无服务）\"></a><a href=\"#serverless-%E6%97%A0%E6%9C%8D%E5%8A%A1\">#</a>serverless（无服务）</h4><p>概念：函数即服务，当需要后端服务的时候，不需要关心后端的IP地址、域名，只需要像调用普通函数一样既可以实现调用。</p>\n<h4 id=\"云开发优势\"><a href=\"#云开发优势\" class=\"headerlink\" title=\"#云开发优势\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E4%BC%98%E5%8A%BF\">#</a>云开发优势</h4><p>快速上线、专注核心业务、独立开发一个完整的微信小程序、不需要学习新的语言，只需要会javascript、无需运维， 节约成本、数据安全、</p>\n<h4 id=\"云开发提供能力\"><a href=\"#云开发提供能力\" class=\"headerlink\" title=\"#云开发提供能力\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E6%8F%90%E4%BE%9B%E8%83%BD%E5%8A%9B\">#</a>云开发提供能力</h4><p>云函数：在云端运行的代码，微信私有协议天然鉴权 （理解：相当于后端部分）</p>\n<p>云数据库：一个既可以在小程序端操作又可以在云函数中操作的JSON数据库</p>\n<p>云存储：在云端存储文件，可以在云端控制台可视化管理</p>\n<p>云调用：基于云函数免鉴权使用小程序开放接口的能力（比如说给用户推送消息等）</p>\n<p>HTTP API：使用HTTP API开发者可在已有服务器上访问云资源，实现与云开发的互通（作用：对原有传统模式下开发的小程序，可以与云开发进行互通）</p>\n<h4 id=\"appID\"><a href=\"#appID\" class=\"headerlink\" title=\"#appID\"></a><a href=\"#appid\">#</a>appID</h4><p>每个小程序唯一的id</p>\n<h4 id=\"云开发项目默认目录结构\"><a href=\"#云开发项目默认目录结构\" class=\"headerlink\" title=\"#云开发项目默认目录结构\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">#</a>云开发项目默认目录结构</h4><p>cloudfunctions —————————-云函数</p>\n<p>​    callback ———————————- 回调函数</p>\n<p>​    config.json —————————</p>\n<p>​    index.js ——————————–</p>\n<p>​    package.json ————————</p>\n<p>​    echo —————————————-</p>\n<p>​    login —————————————-</p>\n<p>​    openapi ———————————–</p>\n<p>miniprogram ——————————- 小程序</p>\n<p>​    images ————————————- 图片</p>\n<p>​    pages ————————————— 页面</p>\n<p>​    style —————————————– 样式</p>\n<p>​    app.js ————————————— 项目js</p>\n<p>​    app.json ———————————– 全局配置</p>\n<p>​    app.wxss ———————————- 项目样式</p>\n<p>​    sitemap.json —————————– （小程序SEO相关）</p>\n<p>project.config.json ———————– 项目配置</p>\n<h4 id=\"云开发环境\"><a href=\"#云开发环境\" class=\"headerlink\" title=\"#云开发环境\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">#</a>云开发环境</h4><p>云开发可创建两个环境，建议一个为开发环境，一个为生产环境</p>\n<h4 id=\"开发前的准备\"><a href=\"#开发前的准备\" class=\"headerlink\" title=\"#开发前的准备\"></a><a href=\"#%E5%BC%80%E5%8F%91%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87\">#</a>开发前的准备</h4><p>开发工具 &gt; 右上角详情 &gt; 本地设置 &gt; 调试基础库 设置为最新版本</p>\n<p>app.js &gt; wx.cloud.init &gt; env 设置环境ID</p>\n<h4 id=\"project-config-json-文件说明\"><a href=\"#project-config-json-文件说明\" class=\"headerlink\" title=\"#project.config.json 文件说明\"></a><a href=\"#project-config-json-%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\">#</a>project.config.json 文件说明</h4><p>miniprogramRoot 小程序前端代码目录</p>\n<p>cloudfunctionRoot 云函数代码目录</p>\n<h4 id=\"app-json\"><a href=\"#app-json\" class=\"headerlink\" title=\"#app.json\"></a><a href=\"#app-json\">#</a>app.json</h4><p>pages 设置页面 ，设置后会自动在pages目录下生成相应的目录和文件</p>\n<p>设置底部导航按钮：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;tabBar&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#474747&quot;</span>, <span class=\"hljs-comment\">// 文字颜色</span><br>    <span class=\"hljs-attr\">&quot;selectedColor&quot;</span>: <span class=\"hljs-string\">&quot;#d43c43&quot;</span>, <span class=\"hljs-comment\">// 文字选中颜色</span><br>    <span class=\"hljs-attr\">&quot;list&quot;</span>: [&#123; <span class=\"hljs-comment\">// 按钮列表，2-5项</span><br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/playlist/playlist&quot;</span>, <span class=\"hljs-comment\">// 按钮对应页面</span><br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;音乐&quot;</span>, <span class=\"hljs-comment\">// 文字</span><br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/music.png&quot;</span>, <span class=\"hljs-comment\">// 图标路径</span><br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/music-actived.png&quot;</span> <span class=\"hljs-comment\">// 选中图标的路径</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/blog/blog&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;发现&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/blog.png&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/blog-actived.png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/profile/profile&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;我的&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/profile.png&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/profile-actived.png&quot;</span><br>    &#125;]<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>图标来自于 <a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn(opens new window)</a></p>\n<p>阿里巴巴图标库，包含矢量图标、字体图标、字体等</p>\n</blockquote>\n<h4 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"#代码规范\"></a><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\">#</a>代码规范</h4><p>很多公司借鉴的代码规范：<a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript(opens new window)</a></p>\n<h4 id=\"《音乐》页面开发\"><a href=\"#《音乐》页面开发\" class=\"headerlink\" title=\"#《音乐》页面开发\"></a><a href=\"#%E3%80%8A%E9%9F%B3%E4%B9%90%E3%80%8B%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91\">#</a>《音乐》页面开发</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> <span class=\"hljs-comment\">&lt;!-- 轮播图组件 参数：indicator-dots 小圆点，autoplay 自动播放, interval 间隔时间，duration 动画时长 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper</span> <span class=\"hljs-attr\">indicator-dots</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">circular</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;3000&quot;</span> <span class=\"hljs-attr\">duration</span>=<span class=\"hljs-string\">&quot;500&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;swiperImgUrls&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 空节点 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper-item</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item.url&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;widthFix&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper-item</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"#自定义组件\"></a><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6\">#</a>自定义组件</h4><p><strong>创建组件</strong></p>\n<p>创建目录 components &gt; 组件目录名称 &gt; 右键 <code>新建Component</code></p>\n<h5 id=\"引入组件\"><a href=\"#引入组件\" class=\"headerlink\" title=\"#引入组件\"></a><a href=\"#%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6\">#</a><strong>引入组件</strong></h5><p>在page的json文件中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;usingComponents&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;x-playlist&quot;</span>:<span class=\"hljs-string\">&quot;/components/playlist/playlist&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在page的wxml中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>页面引入组件以及组件内部在引用子组件的方法是一样的，同样需要设置json文件。</strong></p>\n<h5 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"#组件传值\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\">#</a><strong>组件传值</strong></h5><p>父组件中：在引入组件的时候自定义属性名称，并把数据传入子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 参数：playlist 自定义名称，传入组件的数据 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span> <span class=\"hljs-attr\">playlist</span>=<span class=\"hljs-string\">&quot;&#123;&#123;传入的数据&#125;&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>子组件中： 子组件的js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 组件的属性列表</span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-attr\">properties</span>: &#123;<br>   <span class=\"hljs-attr\">playlist</span>:&#123; <span class=\"hljs-comment\">// 接收父组件传输的数据</span><br>     <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// 数据类型</span><br>   &#125;<br>  &#125;,<br><br><span class=\"hljs-comment\">//子组件的wxml文件可直接引入数据&#123;&#123;playlist&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"wx-key-的使用\"><a href=\"#wx-key-的使用\" class=\"headerlink\" title=\"#wx:key 的使用\"></a><a href=\"#wx-key-%E7%9A%84%E4%BD%BF%E7%94%A8\">#</a>wx:key 的使用</h4><p>key的值不建议使用index，因为当数据发生变化会dom结构产生变化时，使用index的地方不会随之变化。</p>\n<p>可以使用数据内部每项不一样的一个数值，如id</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;swiperImgUrls&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span> 这里url不需要双大括号，如使用index则需要&#123;&#123;&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item.url&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;widthFix&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;playlist-container&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;playlist&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;_id&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 参数：playlist 自定义名称，传入组件的数据 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span> <span class=\"hljs-attr\">playlist</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"async-await-语法\"><a href=\"#async-await-语法\" class=\"headerlink\" title=\"#async/await 语法\"></a><a href=\"#async-await-%E8%AF%AD%E6%B3%95\">#</a>async/await 语法</h4><p>目前，在云函数里，由于 Node 版本最低是 8.9，因此是天然支持 async/await 语法的。而在小程序端则不然。在微信开发者工具里，以及 Android 端手机（浏览器内核是 QQ浏览器的 X5），async/await是天然支持的，但 iOS 端手机在较低版本则不支持，因此需要引入额外的 文件。</p>\n<p>可把这个 <a href=\"https://github.com/xiecheng328/miniprogram/blob/master/regenerator/runtime.js\">runtime.js (opens new window)</a>文件引用到有使用 async/await 的文件当中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 注意，必须命名为 regeneratorRuntime</span><br><span class=\"hljs-keyword\">import</span> regeneratorRuntime <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../utils/runtime.js&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云函数的使用\"><a href=\"#云函数的使用\" class=\"headerlink\" title=\"#云函数的使用\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\">#</a>云函数的使用</h4><p>cloudfunctions目录 右键 <code>新建 Node.js 云函数</code> &gt; 输入目录名 <code>getPlaylist</code></p>\n<p>在云函数中向第三方服务器发送请求要依赖第三方库</p>\n<p><strong>安装依赖包</strong></p>\n<p>云函数目录 <code>getPlaylist</code> 右键 <code>在终端打开</code> 打开命令行 输入命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install --save request<br>npm install --save request-promise<br></code></pre></td></tr></table></figure>\n\n\n\n<p>github request-promise：<a href=\"https://github.com/request/request-promise\">https://github.com/request/request-promise(opens new window)</a></p>\n<p>然后写相应代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// 需安装依赖包</span><br><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">&#x27;http://musicapi.xiecheng.live/personalized&#x27;</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> playlist = <span class=\"hljs-keyword\">await</span> rp(URL).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(res).result<br>  &#125;)<br>  <span class=\"hljs-built_in\">console</span>.log(playlist)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>写完代码，云函数目录 <code>getPlaylist</code> 右键 <code>上传并部署：云端安装依赖（不上传node_modules）</code> 进行上传部署代码到云端，等待上传成功，打开云开发控制台即可看到已经上传的云函数，并可对云函数进行测试。</p>\n<h5 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"#数据库操作\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\">#</a>数据库操作</h5><p>数据库&gt; 创建集合 &gt; playlist</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> db = cloud.database() <span class=\"hljs-comment\">// 初始化数据库,如果在小程序端初始化数据库需要在前面加wx.</span><br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// 需安装依赖包</span><br><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">&#x27;http://musicapi.xiecheng.live/personalized&#x27;</span> <span class=\"hljs-comment\">// 第三方服务器地址（老师从网易云获取的数据部署在其服务器，每天的数据会更新）</span><br><br><span class=\"hljs-keyword\">const</span> playlistCollection = db.collection(<span class=\"hljs-string\">&#x27;playlist&#x27;</span>) <span class=\"hljs-comment\">// 获取到数据库playlist集合</span><br><br><span class=\"hljs-keyword\">const</span> MAX_LIMIT = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">// 定义常量，获取数据库条数最大的限制</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 注：</span><br><span class=\"hljs-comment\">   * - 关于数据库的操作都是异步操作，都需添加await关键字</span><br><span class=\"hljs-comment\">   * - console.log 打印在云开发控制台 云函数测试内查看</span><br><span class=\"hljs-comment\">   * - 单次获取数据库数据有条数限制，云函数端最多获取100条，小程序端最多获取20条</span><br><span class=\"hljs-comment\">   */</span><br><br>  <span class=\"hljs-comment\">// const list = await playlistCollection.get() // 获取数据库集合的数据 （因为有条数限制，不直接用此方法）</span><br><br>  <span class=\"hljs-comment\">// 突破条数限制 （为了读取到全部数据然后与第三方服务器获取的数据进行对比去重）</span><br>  <span class=\"hljs-keyword\">const</span> countResult = <span class=\"hljs-keyword\">await</span> playlistCollection.count() <span class=\"hljs-comment\">// 获取数据总条数 返回为对象</span><br>  <span class=\"hljs-keyword\">const</span> total = countResult.total <span class=\"hljs-comment\">// 取得总条数</span><br>  <span class=\"hljs-keyword\">const</span> batchTimes = <span class=\"hljs-built_in\">Math</span>.ceil(total / MAX_LIMIT)<br>  <span class=\"hljs-keyword\">const</span> tasks = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; batchTimes; i++) &#123;<br>    <span class=\"hljs-keyword\">let</span> promise = playlistCollection.skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() <span class=\"hljs-comment\">// 从第 skip 条开始取，最多取 limit 条数据</span><br>    tasks.push(promise)<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> list = &#123;<br>    <span class=\"hljs-attr\">data</span>: []<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (tasks.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    list = (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(tasks)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// reduce数组方法 累积拼接</span><br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">data</span>: acc.data.concat(cur.data)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 获取第三方服务器端数据</span><br>  <span class=\"hljs-keyword\">const</span> playlist = <span class=\"hljs-keyword\">await</span> rp(URL).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(res).result<br>  &#125;)<br><br>  <span class=\"hljs-comment\">// 数据库与服务器数据对比去重（数据已存在数据库的无需再重复添加）</span><br>  <span class=\"hljs-keyword\">const</span> newData = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len1 = playlist.length; i &lt; len1; i++) &#123;<br>    <span class=\"hljs-keyword\">let</span> flag = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>, len2 = list.data.length; j &lt; len2; j++) &#123;<br>      <span class=\"hljs-keyword\">if</span>(playlist[i].id === list.data[j].id)&#123;<br>        flag = <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-keyword\">break</span><br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(flag)&#123;<br>      newData.push(playlist[i])<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 把数据插入数据库，需要单条插入</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = newData.length; i &lt; len; i++) &#123;<br>    <span class=\"hljs-keyword\">await</span> playlistCollection.add(&#123; <span class=\"hljs-comment\">// 给数据库集合添加数据</span><br>      <span class=\"hljs-attr\">data</span>: &#123;<br>        ...newData[i],<br>        <span class=\"hljs-attr\">createTime</span>: db.serverDate(), <span class=\"hljs-comment\">// db.serverDate() 获取服务器时间</span><br>      &#125;<br>    &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 数据添加成功</span><br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;数据添加成功&#x27;</span>)<br>    &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 失败</span><br>      <span class=\"hljs-built_in\">console</span>.error(err)<br>    &#125;)<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> newData.length <span class=\"hljs-comment\">// 插入多少条数据</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"查询数据库\"><a href=\"#查询数据库\" class=\"headerlink\" title=\"#查询数据库\"></a><a href=\"#%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>查询数据库</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//云函数中查询数据库的例子：</span><br><br><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> TcbRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;tcb-router&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> db = cloud.database() <span class=\"hljs-comment\">// 初始化数据库</span><br><span class=\"hljs-keyword\">const</span> blogCollection = db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>) <span class=\"hljs-comment\">// 博客的数据库集合</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> TcbRouter(&#123; event &#125;) <span class=\"hljs-comment\">// 初始化TcbRouter</span><br><br>  app.router(<span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-comment\">// skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序</span><br>    ctx.body =  <span class=\"hljs-keyword\">await</span> blogCollection.skip(event.start).limit(event.count)<br>    .orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>  &#125;)<br><br><br>  <span class=\"hljs-keyword\">return</span> app.serve() <span class=\"hljs-comment\">// 必需返回</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"云函数调试\"><a href=\"#云函数调试\" class=\"headerlink\" title=\"#云函数调试\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E8%B0%83%E8%AF%95\">#</a>云函数调试</h5><p>云控制台中可会云函数进行云端测试</p>\n<p>在小程序调用云函数后，可查看云函数<strong>日志</strong></p>\n<h4 id=\"定时触发云函数\"><a href=\"#定时触发云函数\" class=\"headerlink\" title=\"#定时触发云函数\"></a><a href=\"#%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91%E4%BA%91%E5%87%BD%E6%95%B0\">#</a>定时触发云函数</h4><p>如果云函数需要定时 / 定期执行，也就是定时触发，我们可以使用云函数定时触发器。配置了定时触发器的云函数，会在相应时间点被自动触发，函数的返回结果不会返回给调用方</p>\n<p>云函数目录下新建 config.json</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html\">API(opens new window)</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;triggers&quot;</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;myTriggers&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;timer&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;config&quot;</span>:<span class=\"hljs-string\">&quot;0 0 10,14,16,20 * * * *&quot;</span> <span class=\"hljs-comment\">//表示每天的10点、14点、16点、20点触发一次</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>编辑好触发器之后，要在云函数目录 &gt; 右键 &gt; <code>上传触发器</code></p>\n<h4 id=\"配置云函数超时时间\"><a href=\"#配置云函数超时时间\" class=\"headerlink\" title=\"#配置云函数超时时间\"></a><a href=\"#%E9%85%8D%E7%BD%AE%E4%BA%91%E5%87%BD%E6%95%B0%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4\">#</a>配置云函数超时时间</h4><p>当云函数比较复杂的时候，默认的超时时间3秒可能不能够满足需求，可以适当的设置更为合理的时间</p>\n<p>云开发控制台 &gt; 云函数 &gt; 配置 &gt; 超时时间</p>\n<h4 id=\"上拉加载与下拉刷新\"><a href=\"#上拉加载与下拉刷新\" class=\"headerlink\" title=\"#上拉加载与下拉刷新\"></a><a href=\"#%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0\">#</a>上拉加载与下拉刷新</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">page页面json中：<br><span class=\"hljs-string\">&quot;enablePullDownRefresh&quot;</span>: <span class=\"hljs-literal\">true</span><br><br><br>page页面js中有这两个函数：<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">onPullDownRefresh</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>      <span class=\"hljs-attr\">playlist</span>: []<br>    &#125;)<br>    <span class=\"hljs-built_in\">this</span>._getPlaylist()<br>  &#125;,<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面上拉触底事件的处理函数</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">onReachBottom</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>._getPlaylist()<br>  &#125;,<br><br><br><br> 下拉刷新请求完数据后<br> wx.stopPullDownRefresh() <span class=\"hljs-comment\">// 停止下拉刷新动画</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"云函数路由优化tcb-router\"><a href=\"#云函数路由优化tcb-router\" class=\"headerlink\" title=\"#云函数路由优化tcb-router\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E8%B7%AF%E7%94%B1%E4%BC%98%E5%8C%96tcb-router\">#</a>云函数路由优化tcb-router</h4><p>一个用户在一个云环境只能创建50个云函数</p>\n<p>假如小程序非常复杂，50个云函数不能够满足业务需求怎么办？</p>\n<p>相似的请求归类到同一个云函数处理</p>\n<p>tcb-router是一个koa风格的云函数路由库</p>\n<p>通俗理解就是可以把很多个接口归类到同一个云函数内。</p>\n<p>github-tcb-router: <a href=\"https://github.com/TencentCloudBase/tcb-router\">https://github.com/TencentCloudBase/tcb-router(opens new window)</a></p>\n<p>koa洋葱模型…</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">在使用到tcb-router的云函数目录下打开命令行，输入命令进行安装<br>npm install --save tcb-router<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数的 index.js</span><br><span class=\"hljs-keyword\">const</span> TcbRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;router&#x27;</span>); <span class=\"hljs-comment\">// 必需</span><br><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> TcbRouter(&#123; event &#125;);<span class=\"hljs-comment\">// 必需</span><br><br>    <span class=\"hljs-comment\">// app.use 表示该中间件会适用于所有的路由(全局中间件) 非必需</span><br>    app.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123; <span class=\"hljs-comment\">// 这个中间件表示所有路由都会调用到，而路由中间件为单独调用</span><br>        ctx.data = &#123;&#125;; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        ctx.data.openId = event.userInfo.openId <span class=\"hljs-comment\">// 这里获取到的openId将分布到所有路由</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为数组表示，该中间件适用于 user 和 timer 两个路由</span><br>    app.router([<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-string\">&#x27;timer&#x27;</span>], <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.company = <span class=\"hljs-string\">&#x27;Tencent&#x27;</span>; <span class=\"hljs-comment\">// 这里获取到的数据将分布到 user 和 timer 两个路由</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为字符串，该中间件只适用于 user 路由</span><br>    app.router(<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.name = <span class=\"hljs-string\">&#x27;heyli&#x27;</span>;  <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.sex = <span class=\"hljs-string\">&#x27;male&#x27;</span>; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>        ctx.data.city = <span class=\"hljs-string\">&#x27;Foshan&#x27;</span>; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-comment\">// ctx.body 返回数据到小程序端</span><br>        ctx.body = &#123; <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">data</span>: ctx.data&#125;;  <span class=\"hljs-comment\">// 要传给小程序端的数据</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为字符串，该中间件只适用于 timer 路由</span><br>    app.router(<span class=\"hljs-string\">&#x27;timer&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.name = <span class=\"hljs-string\">&#x27;flytam&#x27;</span>;<br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.sex = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 等待500ms，再执行下一中间件</span><br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            resolve(<span class=\"hljs-string\">&#x27;male&#x27;</span>);<br>        &#125;, <span class=\"hljs-number\">500</span>);<br>        &#125;);<br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx)=&gt;  &#123;<br>        ctx.data.city = <span class=\"hljs-string\">&#x27;Taishan&#x27;</span>;<br><br>        <span class=\"hljs-comment\">// ctx.body 返回数据到小程序端</span><br>        ctx.body = &#123; <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">data</span>: ctx.data &#125;;<br>    &#125;);<br><br>    <span class=\"hljs-keyword\">return</span> app.serve(); <span class=\"hljs-comment\">// 必需</span><br><br>&#125;<br><br><br>小程序端：<br><br><span class=\"hljs-comment\">// 调用名为 router 的云函数，路由名为 user</span><br>wx.cloud.callFunction(&#123;<br>    <span class=\"hljs-comment\">// 要调用的云函数名称</span><br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;router&quot;</span>,<br>    <span class=\"hljs-comment\">// 传递给云函数的参数</span><br>    <span class=\"hljs-attr\">data</span>: &#123;<br>        <span class=\"hljs-attr\">$url</span>: <span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-comment\">// 要调用的路由的路径，传入准确路径或者通配符*</span><br>        <span class=\"hljs-attr\">other</span>: <span class=\"hljs-string\">&quot;xxx&quot;</span><br>    &#125;<br>&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>上面tcb-router代码会按照洋葱模型执行，即先从上往下逐个进入中间件，再从下往上逐个退出中间件。</p>\n<h4 id=\"本地存储（缓存）\"><a href=\"#本地存储（缓存）\" class=\"headerlink\" title=\"#本地存储（缓存）\"></a><a href=\"#%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8-%E7%BC%93%E5%AD%98\">#</a>本地存储（缓存）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 存储：</span><br>wx.setStorageSync(key, data) <span class=\"hljs-comment\">// 同步存储（存储成功再继续下一步操作）</span><br>wx.setStorage(key, data) <span class=\"hljs-comment\">// 异步存储（即使存储没成功也会执行下一步代码）、</span><br><br><span class=\"hljs-comment\">// 读取：</span><br>wx.getStorageSync(key) <span class=\"hljs-comment\">// 同步 （读取到数据在进行下一步操作）</span><br>wx.setStorage(key) <span class=\"hljs-comment\">// 异步</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"api设置title\"><a href=\"#api设置title\" class=\"headerlink\" title=\"#api设置title\"></a><a href=\"#api%E8%AE%BE%E7%BD%AEtitle\">#</a>api设置title</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.setNavigationBarTitle(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"背景播放音\"><a href=\"#背景播放音\" class=\"headerlink\" title=\"#背景播放音\"></a><a href=\"#%E8%83%8C%E6%99%AF%E6%92%AD%E6%94%BE%E9%9F%B3\">#</a>背景播放音</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html\">BackgroundAudioManager (opens new window)</a>全局唯一的背景音频管理器</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// 需要在app.json配置，才能使用后台音乐播放的能力</span><br><br><span class=\"hljs-string\">&quot;requiredBackgroundModes&quot;</span>: [<span class=\"hljs-string\">&quot;audio&quot;</span>, <span class=\"hljs-string\">&quot;location&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取全局唯一的背景音频管理器</span><br><span class=\"hljs-keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager()<br><br><br>backgroundAudioManager.src = 音频链接<br>backgroundAudioManager.title = 音频标题<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"createSelectorQuery查询节点信息\"><a href=\"#createSelectorQuery查询节点信息\" class=\"headerlink\" title=\"#createSelectorQuery查询节点信息\"></a><a href=\"#createselectorquery%E6%9F%A5%E8%AF%A2%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF\">#</a>createSelectorQuery查询节点信息</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html\">createSelectorQuery (opens new window)</a>小程序的方法，用于查询节点等操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> query = wx.createSelectorQuery()<br>query.select(<span class=\"hljs-string\">&#x27;#the-id&#x27;</span>).boundingClientRect() <span class=\"hljs-comment\">// 节点的布局信息</span><br>query.selectViewport().scrollOffset()<br>query.exec(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>  res[<span class=\"hljs-number\">0</span>].top       <span class=\"hljs-comment\">// #the-id节点的上边界坐标</span><br>  res[<span class=\"hljs-number\">1</span>].scrollTop <span class=\"hljs-comment\">// 显示区域的竖直滚动位置</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"组件内的方法\"><a href=\"#组件内的方法\" class=\"headerlink\" title=\"#组件内的方法\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E6%96%B9%E6%B3%95\">#</a>组件内的方法</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html\">Component(Object object)(opens new window)</a></p>\n<h4 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"#组件生命周期\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">#</a>组件生命周期</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html\">lifetimes(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 生命周期</span><br><span class=\"hljs-attr\">lifetimes</span>: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ready</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 在组件在视图层布局完成后执行</span><br>   \t ...<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"组件所在页面的生命周期\"><a href=\"#组件所在页面的生命周期\" class=\"headerlink\" title=\"#组件所在页面的生命周期\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E6%89%80%E5%9C%A8%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">#</a>组件所在页面的生命周期</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Component(&#123;<br>  <span class=\"hljs-attr\">pageLifetimes</span>: &#123;<br>    <span class=\"hljs-attr\">show</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面被展示</span><br>    &#125;,<br>    <span class=\"hljs-attr\">hide</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面被隐藏</span><br>    &#125;,<br>    <span class=\"hljs-attr\">resize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">size</span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面尺寸变化</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"对数据的监听\"><a href=\"#对数据的监听\" class=\"headerlink\" title=\"对数据的监听\"></a>对数据的监听</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html\">observers(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">observers: &#123; <span class=\"hljs-comment\">// 对数据的监听(数据初次加载完成也会执行)</span><br>    监听的数据对象(newData)&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(newData)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"子组件自定义事件传递给父组件\"><a href=\"#子组件自定义事件传递给父组件\" class=\"headerlink\" title=\"#子组件自定义事件传递给父组件\"></a><a href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6\">#</a>子组件自定义事件传递给父组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">子组件js：<br>// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）<br>this.triggerEvent(&#x27;自定义事件名&#x27;, 参数x)<br><br><br>父组件wxml：<br>&lt;子组件标签 bind:自定义事件名=&quot;执行的事件&quot; /&gt;<br><br>父组件js：<br>执行的事件(event) &#123;<br>\tconsole.log(event.detil.参数)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"父组件自定义事件传递给子组件\"><a href=\"#父组件自定义事件传递给子组件\" class=\"headerlink\" title=\"#父组件自定义事件传递给子组件\"></a><a href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6\">#</a>父组件自定义事件传递给子组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件wxml：<br>&lt;子组件标签 class=&quot;子组件类名&quot;&gt;<br><br>父组件JS：<br>// 选择组件，并传入事件和参数<br>this.selectComponent(&#x27;.子组件类名&#x27;).自定义事件名(传入参数)<br><br>子组件js：<br>methods: &#123;<br>\t自定义事件名(参数x)&#123;<br>\t\tconsole.log(参数x)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"兄弟组件间传递事件和传值\"><a href=\"#兄弟组件间传递事件和传值\" class=\"headerlink\" title=\"#兄弟组件间传递事件和传值\"></a><a href=\"#%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6%E5%92%8C%E4%BC%A0%E5%80%BC\">#</a>兄弟组件间传递事件和传值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">例子：子组件1向子组件2传递参数<br><br>父组件wxml中：<br>&lt;子组件标签1 bind:自定义事件名1=&quot;执行的事件&quot;&gt;<br>&lt;子组件标签2 class=&quot;子组件2类名&quot;&gt;<br><br>父组件js：<br>执行的事件(event) &#123;<br>\tthis.selectComponent(&#x27;.子组件2类名&#x27;).自定义事件名2(event.detil.参数x) // 向子组件2传值<br>&#125;<br><br>子组件1js：<br>// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）<br>this.triggerEvent(&#x27;自定义事件名1&#x27;, 参数x)<br><br><br><br>子组件2js：<br>methods: &#123;<br>\t自定义事件名2(参数x)&#123;<br>\t\tconsole.log(参数x)  // 接收父组件传入的值<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取手机信息\"><a href=\"#获取手机信息\" class=\"headerlink\" title=\"#获取手机信息\"></a><a href=\"#%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E4%BF%A1%E6%81%AF\">#</a>获取手机信息</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html\">wx.getSystemInfo(Object object)(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.getSystemInfo(&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>\t\t<span class=\"hljs-built_in\">console</span>.log(res) <span class=\"hljs-comment\">//手机信息</span><br>\t&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"滚动组件\"><a href=\"#滚动组件\" class=\"headerlink\" title=\"#滚动组件\"></a><a href=\"#%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6\">#</a>滚动组件</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\">scroll-view(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span> <span class=\"hljs-attr\">scroll-y</span> <span class=\"hljs-attr\">scroll-top</span>=<span class=\"hljs-string\">&quot;&#123;&#123;scrollTop&#125;&#125;&quot;</span> <span class=\"hljs-attr\">scroll-with-animation</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全局属性、方法（类似vuex）\"><a href=\"#全局属性、方法（类似vuex）\" class=\"headerlink\" title=\"#全局属性、方法（类似vuex）\"></a><a href=\"#%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7%E3%80%81%E6%96%B9%E6%B3%95-%E7%B1%BB%E4%BC%BCvuex\">#</a>全局属性、方法（类似vuex）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">在app.js中：<br><br>onLaunch: function () &#123;<br>\tthis.globalData = &#123;// 设置全局属性、方法<br>\t\ttest: 0<br>\t&#125;<br>&#125;,<br>setGlobalData(dataItem, val) &#123; // 设置全局属性<br>\tthis.globalData[dataItem] = val<br>&#125;,<br>getGlobalData(dataItem) &#123; // 获取全局属性<br>\treturn this.globalData[dataItem]<br>&#125;<br><br><br>在需要调用的页面js中：<br>const app = getApp() // 在最顶部先调用app方法<br><br>// 设置全局属性<br>app.setGlobalData(&#x27;test&#x27;, 1)<br><br>// 获取全局属性<br>app.getGlobalData(&#x27;test&#x27;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"消息提示框\"><a href=\"#消息提示框\" class=\"headerlink\" title=\"#消息提示框\"></a><a href=\"#%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86\">#</a>消息提示框</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">showToast(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.showToast(&#123;<br>  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;成功&#x27;</span>,<br>  <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span>, <span class=\"hljs-comment\">//图标： success 成功、loading 加载中、none 无</span><br>  <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">2000</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"《发现》页面\"><a href=\"#《发现》页面\" class=\"headerlink\" title=\"#《发现》页面\"></a><a href=\"#%E3%80%8A%E5%8F%91%E7%8E%B0%E3%80%8B%E9%A1%B5%E9%9D%A2\">#</a>《发现》页面</h2><h4 id=\"调用组件外部的样式\"><a href=\"#调用组件外部的样式\" class=\"headerlink\" title=\"#调用组件外部的样式\"></a><a href=\"#%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%E5%A4%96%E9%83%A8%E7%9A%84%E6%A0%B7%E5%BC%8F\">#</a>调用组件外部的样式</h4><p>components内部的组件无法直接调用外部的样式。可通过以下方式调用组件外部样式：</p>\n<p><strong>方法一：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件wxml：<br>&lt;!-- iconfont 和 icon-sousuo 是传入组件内部的样式名称，iconfont（自定义名称）=&quot;iconfont（外部样式文件中定义的样式名）&quot;  --&gt;<br>&lt;x-search iconfont=&quot;iconfont&quot; icon-sousuo=&quot;icon-sousuo&quot;/&gt;<br><br><br>子组件js:<br>// 组件外部样式<br>  externalClasses: [<br>    &#x27;iconfont&#x27;, // 对应的是上面等号前面的名称<br>    &#x27;icon-sousuo&#x27;<br>  ],<br><br> 子组件wxml： 即可实现调用组件外的样式<br> &lt;i class=&quot;iconfont icon-sousuo&quot; /&gt;<br><br><br>  注意：如果想在组件内部再次修改样式，不能够引用外部传进来的class名称进行修改，可以另起一个class名称进行修改。<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>方法二：</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB\">消除样式隔离(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">组件内:<br>Component(&#123;<br>  <span class=\"hljs-attr\">options</span>: &#123;<br>    <span class=\"hljs-attr\">styleIsolation</span>: <span class=\"hljs-string\">&#x27;apply-shared&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"组件插槽slot\"><a href=\"#组件插槽slot\" class=\"headerlink\" title=\"#组件插槽slot\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E6%8F%92%E6%A7%BDslot\">#</a>组件插槽slot</h4><p><strong>单个插槽</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件调用传入插槽内容:<br>&lt;组件标签&gt;<br>    &lt;view&gt;<br>      &lt;view&gt;插槽内容&lt;/view&gt;<br>      &lt;view&gt;插槽内容&lt;/view&gt;<br>    &lt;/view&gt;<br>&lt;/组件标签&gt;<br><br> 组件内部定义slot标签:<br> &lt;view&gt;<br>    &lt;!-- slot插槽 --&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>如果需要实现多个插槽</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件调用传入插槽内容:<br>&lt;组件标签&gt;<br>    &lt;view slot=&quot;slot2&quot;&gt;<br>      &lt;view&gt;插槽1内容&lt;/view&gt;<br>      &lt;view&gt;插槽1内容&lt;/view&gt;<br>    &lt;/view&gt;<br><br>     &lt;view slot=&quot;slot1&quot;&gt;<br>      &lt;view&gt;插槽2内容&lt;/view&gt;<br>      &lt;view&gt;插槽2内容&lt;/view&gt;<br>    &lt;/view&gt;<br>&lt;/组件标签&gt;<br><br>组件js :<br>options: &#123;// 设置<br>    multipleSlots: true // 打开多个插槽功能<br>&#125;,<br><br><br>组件内部定义slot标签:<br>&lt;view&gt;<br>    &lt;!-- slot插槽 具名插槽--&gt;<br>    &lt;slot name=&quot;slot1&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;slot2&quot;&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"判断用户授权\"><a href=\"#判断用户授权\" class=\"headerlink\" title=\"#判断用户授权\"></a><a href=\"#%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83\">#</a>判断用户授权</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html\">授权(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 判断用户是否授权</span><br>    wx.getSetting(&#123;<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>        <span class=\"hljs-keyword\">if</span> (res.authSetting[<span class=\"hljs-string\">&#x27;scope.userInfo&#x27;</span>]) &#123; <span class=\"hljs-comment\">// 已授权</span><br>         wx.getUserInfo(&#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>           <span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span> &#123;<br>             <span class=\"hljs-built_in\">console</span>.log(res)<br>           &#125;<br>         &#125;)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 未授权</span><br><br>        &#125;<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"button的开发能力（获取用户信息）1\"><a href=\"#button的开发能力（获取用户信息）1\" class=\"headerlink\" title=\"#button的开发能力（获取用户信息）1\"></a><a href=\"#button%E7%9A%84%E5%BC%80%E5%8F%91%E8%83%BD%E5%8A%9B-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF-1\">#</a>button的开发能力（获取用户信息）1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;login&quot;</span><br>    open-type=<span class=\"hljs-string\">&quot;getUserInfo&quot;</span><br>    bindgetuserinfo=<span class=\"hljs-string\">&quot;onGetUserInfo&quot;</span>     <span class=\"hljs-comment\">// bindgetuserinfo 为固定的</span><br>&gt;<br>\t获取微信授权信息<br>&lt;/button&gt;<br><br><br>bindgetuserinfo 事件会询问用户是否同意授权<br><br><br>js中：<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">onGetUserInfo</span>(<span class=\"hljs-params\">event</span>)</span> &#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>      <span class=\"hljs-keyword\">const</span> userInfo = event.detail.userInfo<br>      <span class=\"hljs-keyword\">if</span> (userInfo) &#123; <span class=\"hljs-comment\">// 用户允许授权</span><br>        <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>          <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">false</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginSuccess&#x27;</span>, userInfo) <span class=\"hljs-comment\">// 给父组件传用户数据</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 用户拒绝授权</span><br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginFail&#x27;</span>)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"原生组件\"><a href=\"#原生组件\" class=\"headerlink\" title=\"#原生组件\"></a><a href=\"#%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6\">#</a>原生组件</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html\">原生组件(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">auto-focus 自动获取焦点<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;分享新鲜事...&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;140&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">auto-focus</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">&quot;onInput&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindfocus</span>=<span class=\"hljs-string\">&quot;onFocus&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindblur</span>=<span class=\"hljs-string\">&quot;onBlur&quot;</span></span><br><span class=\"hljs-tag\">  &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"选择上传图片\"><a href=\"#选择上传图片\" class=\"headerlink\" title=\"#选择上传图片\"></a><a href=\"#%E9%80%89%E6%8B%A9%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87\">#</a>选择上传图片</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">上传图片(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> max = <span class=\"hljs-number\">9</span> - <span class=\"hljs-built_in\">this</span>.data.images.length <span class=\"hljs-comment\">// 还能再选几张图片</span><br>wx.chooseImage(&#123;<br>      <span class=\"hljs-attr\">count</span>: max, <span class=\"hljs-comment\">// 还能再选几张图片</span><br>      <span class=\"hljs-attr\">sizeType</span>: [<span class=\"hljs-string\">&#x27;original&#x27;</span>, <span class=\"hljs-string\">&#x27;compressed&#x27;</span>], <span class=\"hljs-comment\">// 初始值 and 压缩过的</span><br>      <span class=\"hljs-attr\">sourceType</span>: [<span class=\"hljs-string\">&#x27;album&#x27;</span>, <span class=\"hljs-string\">&#x27;camera&#x27;</span>], <span class=\"hljs-comment\">// 手机相册选择 and 拍照选择</span><br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 箭头函数改变this指向</span><br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>      &#125;,<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"#图片裁剪\"></a><a href=\"#%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA\">#</a>图片裁剪</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">图片裁剪(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- mode 图片裁剪 aspectFill 保证短边完整显示 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;image&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;aspectFill&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"获取标签自定义属性data-（删除图片的实现）\"><a href=\"#获取标签自定义属性data-（删除图片的实现）\" class=\"headerlink\" title=\"#获取标签自定义属性data-* （删除图片的实现）\"></a><a href=\"#%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7data-%E5%88%A0%E9%99%A4%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0\">#</a>获取标签自定义属性data-* （删除图片的实现）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">&lt;!-- 显示图片 --&gt;<br>    &lt;block wx:for=&quot;&#123;&#123;images&#125;&#125;&quot; wx:key=&quot;*this&quot;&gt;<br>      &lt;view class=&quot;image-wrap&quot;&gt;<br>        &lt;!-- mode 图片裁剪 aspectFill 保证短边完整显示 --&gt;<br>        &lt;image class=&quot;image&quot; src=&quot;&#123;&#123;item&#125;&#125;&quot; mode=&quot;aspectFill&quot;&gt;&lt;/image&gt;<br>        &lt;icon class=&quot;iconfont icon-shanchu&quot; bindtap=&quot;onDelImage&quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;/icon&gt;<br>      &lt;/view&gt;<br>    &lt;/block&gt;<br><br><br>    // 删除图片<br>  onDelImage(event) &#123;<br>  \t// event.target.dataset.index 获取标签属性data-index的值<br>    this.data.images.splice(event.target.dataset.index, 1) // splice会改变原有数组<br>    this.setData(&#123;<br>      images: this.data.images<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全屏预览图片-点击图片放大预览\"><a href=\"#全屏预览图片-点击图片放大预览\" class=\"headerlink\" title=\"#)全屏预览图片(点击图片放大预览)\"></a><a href=\"#%E5%85%A8%E5%B1%8F%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87-%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%A2%84%E8%A7%88\">#</a>)全屏预览图片(点击图片放大预览)</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html\">全屏预览图片(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 全屏预览图片</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">onPreviewImage</span>(<span class=\"hljs-params\">event</span>)</span> &#123;<br>    wx.previewImage(&#123;<br>      <span class=\"hljs-attr\">urls</span>: <span class=\"hljs-built_in\">this</span>.data.images, <span class=\"hljs-comment\">// 图片地址列表</span><br>      <span class=\"hljs-attr\">current</span>: event.target.dataset.imgsrc <span class=\"hljs-comment\">// 当前预览图片地址</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"文件上传云存储（发布博客例子）\"><a href=\"#文件上传云存储（发布博客例子）\" class=\"headerlink\" title=\"#文件上传云存储（发布博客例子）\"></a><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BA%91%E5%AD%98%E5%82%A8-%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E4%BE%8B%E5%AD%90\">#</a>文件上传云存储（发布博客例子）</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html\">文件上传云存储(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//  结合&#x27;发布&#x27;的例子：</span><br> <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>   <span class=\"hljs-comment\">// 验证是否输入内容</span><br>   <span class=\"hljs-keyword\">if</span> (content.trim() === <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">// trim() 去掉字符串空格</span><br>     wx.showToast(&#123;<br>       <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;请输入内容&#x27;</span>,<br>       <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span><br>     &#125;)<br>     <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   wx.showLoading(&#123;<br>     <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;发布中&#x27;</span>,<br>   &#125;)<br>   <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 实现思路及步骤：</span><br><span class=\"hljs-comment\">    * 1、图片 -&gt; 上传 云存储  -&gt; 生成 图片fineID（云文件ID）</span><br><span class=\"hljs-comment\">    * 2、数据 -&gt; 录入 云数据库</span><br><span class=\"hljs-comment\">    *    数据包括：文字内容、图片fineID、昵称、头像、发布时间、openId(用户唯一标识，在插入数据库是系统会自动添加_openId字段，不需要另外插入)</span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">let</span> promiseArr = []<br>   <span class=\"hljs-keyword\">let</span> fileIds = []<br>   <span class=\"hljs-comment\">// 图片上传云存储</span><br>   <span class=\"hljs-built_in\">this</span>.data.images.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>     <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>       <span class=\"hljs-keyword\">let</span> suffix = <span class=\"hljs-regexp\">/\\.\\w+$/</span>.exec(item)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// 文件扩展名(文件后缀)</span><br>       wx.cloud.uploadFile(&#123; <span class=\"hljs-comment\">// 每次只能上传一个文件</span><br>         <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">          * cloudPath 云路径。如果路径相同，后上传的文件会覆盖原文件</span><br><span class=\"hljs-comment\">          * 路径：blog/云存储中的文件夹 + Date.now()时间戳 + Math.random()*1000000随机数 + 文件后缀</span><br><span class=\"hljs-comment\">          */</span><br>         <span class=\"hljs-attr\">cloudPath</span>: <span class=\"hljs-string\">&#x27;blog/&#x27;</span> + <span class=\"hljs-built_in\">Date</span>.now() + <span class=\"hljs-string\">&#x27;-&#x27;</span> + <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">1000000</span> + suffix,<br>         <span class=\"hljs-attr\">filePath</span>: item, <span class=\"hljs-comment\">// 文件本地临时路径</span><br>         <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>           fileIds.push(res.fileID)<br>           resolve()<br>         &#125;,<br>         <span class=\"hljs-attr\">fail</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>           <span class=\"hljs-built_in\">console</span>.error(err)<br>           reject()<br>         &#125;<br>       &#125;)<br>     &#125;)<br>     promiseArr.push(p)<br>   &#125;)<br><br>   <span class=\"hljs-comment\">// 存入云数据库</span><br>   <span class=\"hljs-built_in\">Promise</span>.all(promiseArr).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>     db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>).add(&#123;<br>       <span class=\"hljs-attr\">data</span>: &#123;<br>         ...userInfo, <span class=\"hljs-comment\">// 昵称、头像</span><br>         content, <span class=\"hljs-comment\">// 内容</span><br>         <span class=\"hljs-attr\">img</span>: fileIds, <span class=\"hljs-comment\">// 图片fileID列表</span><br>         <span class=\"hljs-attr\">createTime</span>: db.serverDate() <span class=\"hljs-comment\">// 创建时间，取服务端时间</span><br>       &#125;<br>     &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>       wx.hideLoading()<br>       wx.showToast(&#123;<br>         <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;发布成功&#x27;</span>,<br>       &#125;)<br>       <span class=\"hljs-comment\">// 返回博客页面，并刷新</span><br>       wx.navigateBack()<br><br>     &#125;)<br>   &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>     wx.hideLoading()<br>     wx.showToast(&#123;<br>       <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;抱歉，发布失败&#x27;</span>,<br>       <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span><br>     &#125;)<br>   &#125;)<br> &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"js模块化-（时间格式化）\"><a href=\"#js模块化-（时间格式化）\" class=\"headerlink\" title=\"#js模块化 （时间格式化）\"></a><a href=\"#js%E6%A8%A1%E5%9D%97%E5%8C%96-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96\">#</a>js模块化 （时间格式化）</h4><p>在目录utils 中新建formatTime.js文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 时间格式化 模块封装</span><br><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">date</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// date 数据格式为 date</span><br>  <span class=\"hljs-keyword\">let</span> fmt = <span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm:ss&#x27;</span> <span class=\"hljs-comment\">// 预定格式</span><br>  <span class=\"hljs-keyword\">const</span> o = &#123;<br>    <span class=\"hljs-comment\">// + 正则中的1个或多个</span><br>    <span class=\"hljs-string\">&#x27;M+&#x27;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&#x27;d+&#x27;</span>: date.getDate(),<br>    <span class=\"hljs-string\">&#x27;h+&#x27;</span>: date.getHours(),<br>    <span class=\"hljs-string\">&#x27;m+&#x27;</span>: date.getMinutes(),<br>    <span class=\"hljs-string\">&#x27;s+&#x27;</span>: date.getSeconds()<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/(y+)/</span>.test(fmt)) &#123;<br>    <span class=\"hljs-comment\">// $1 表示正则中的第一个，即(y+)</span><br>    fmt = fmt.replace(<span class=\"hljs-built_in\">RegExp</span>.$1, date.getFullYear()) <span class=\"hljs-comment\">// replace 替换</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> o) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;(&#x27;</span>+ k +<span class=\"hljs-string\">&#x27;)&#x27;</span>).test(fmt)) &#123;<br>      fmt = fmt.replace(<span class=\"hljs-built_in\">RegExp</span>.$1, o[k].toString().length === <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">&#x27;0&#x27;</span> + o[k] : o[k])<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> fmt<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在组件引入js模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> formatTime <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../utils/formatTime.js&#x27;</span><br><br>使用：<br>formatTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Aug 28 2019 16:23:06 GMT+0800 (中国标准时间)&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"阻止事件冒泡-1\"><a href=\"#阻止事件冒泡-1\" class=\"headerlink\" title=\"#阻止事件冒泡\"></a><a href=\"#%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-2\">#</a>阻止事件冒泡</h4><p><code>bind</code> 和 <code>catch</code> 都可以绑定事件，它们的区别是 <code>bind</code> 有事件冒泡，而 <code>catch</code> 没有</p>\n<h4 id=\"返回上一个页面并执行方法\"><a href=\"#返回上一个页面并执行方法\" class=\"headerlink\" title=\"#返回上一个页面并执行方法\"></a><a href=\"#%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E5%B9%B6%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95\">#</a>返回上一个页面并执行方法</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">API(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 返回博客页面，并刷新</span><br>wx.navigateBack()<br><span class=\"hljs-keyword\">const</span> pages = getCurrentPages() <span class=\"hljs-comment\">// 获取当前页面栈</span><br><span class=\"hljs-keyword\">const</span> prevPage = pages[pages.length - <span class=\"hljs-number\">2</span>]  <span class=\"hljs-comment\">// 取到上一个页面</span><br>prevPage.onPullDownRefresh() <span class=\"hljs-comment\">// 执行上一个页面的方法 onPullDownRefresh</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"图片懒加载\"><a href=\"#图片懒加载\" class=\"headerlink\" title=\"#图片懒加载\"></a><a href=\"#%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD\">#</a>图片懒加载</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">API(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">给image标签设置 lazy-load 为 true<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class=\"hljs-attr\">lazy-load</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br><br>.img &#123;<br>  background: #eee;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>懒加载占位图可以给image设置背景图或背景色</strong></p>\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"#模糊查询\"></a><a href=\"#%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2\">#</a>模糊查询</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取博客列表</span><br>  app.router(<span class=\"hljs-string\">&#x27;blogList&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> keyword = event.keyword <span class=\"hljs-comment\">// 搜索关键字 调用接口时传递来的数据</span><br>    <span class=\"hljs-keyword\">let</span> w = &#123;&#125;<br>    <span class=\"hljs-keyword\">if</span> (keyword.trim() != <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>      w = &#123;<br>        <span class=\"hljs-attr\">content</span>: db.RegExp(&#123; <span class=\"hljs-comment\">// 正则</span><br>          <span class=\"hljs-attr\">regexp</span>: keyword,<br>          <span class=\"hljs-attr\">options</span>: <span class=\"hljs-string\">&#x27;i&#x27;</span> <span class=\"hljs-comment\">// i表示忽略大小写</span><br>        &#125;)<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// where查询条件 skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序</span><br>    ctx.body =  <span class=\"hljs-keyword\">await</span> blogCollection.where(w).skip(event.start).limit(event.count)<br>    .orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>  &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"提升模糊查询的效率-（添加索引，对数据量大的查询效果明显）\"><a href=\"#提升模糊查询的效率-（添加索引，对数据量大的查询效果明显）\" class=\"headerlink\" title=\"#提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）\"></a><a href=\"#%E6%8F%90%E5%8D%87%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%95%88%E7%8E%87-%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95-%E5%AF%B9%E6%95%B0%E6%8D%AE%E9%87%8F%E5%A4%A7%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%95%88%E6%9E%9C%E6%98%8E%E6%98%BE\">#</a>提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）</h4><p>云开发控制台 &gt; 数据库相应的集合 &gt; 索引管理 &gt; 添加索引 &gt; 输入自定义索引名称、该字段的值是否唯一、被查询的字段名、升序/降序 &gt; ok</p>\n<h4 id=\"小程序端调用云数据库\"><a href=\"#小程序端调用云数据库\" class=\"headerlink\" title=\"#小程序端调用云数据库\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E8%B0%83%E7%94%A8%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>小程序端调用云数据库</h4><p>一般调用云数据库的操作都写在云函数内，其实小程序端也可以对数据库进行操作。</p>\n<p>小程序端一次最多只能查询20条数据，云函数端最多可查询100条数据，可使用多次查询拼接的方式突破限制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 小程序端调用云数据库示例</span><br>    <span class=\"hljs-keyword\">const</span> db = wx.cloud.database() <span class=\"hljs-comment\">// 初始化数据库</span><br>    db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>).orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>,<span class=\"hljs-string\">&#x27;deac&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云数据库权限管理-1\"><a href=\"#云数据库权限管理-1\" class=\"headerlink\" title=\"#云数据库权限管理\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-2\">#</a>云数据库权限管理</h4><p><strong>注意：云控制台和服务端（云函数）始终有所有数据读写权限，</strong></p>\n<p><strong>但权限的管理仅对小程序端发起的请求有效。</strong></p>\n<ul>\n<li>仅创建者可写，所有人可读 （适合于文章）</li>\n<li>仅创建者可读写 (适用于私密内容)</li>\n<li>仅管理端可写，所有人可读（适用于商品信息）</li>\n<li>仅管理端可读写（适用于后台敏感数据）</li>\n</ul>\n<h4 id=\"数据库中1对N关系的三种设计方式\"><a href=\"#数据库中1对N关系的三种设计方式\" class=\"headerlink\" title=\"#数据库中1对N关系的三种设计方式\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD1%E5%AF%B9n%E5%85%B3%E7%B3%BB%E7%9A%84%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F\">#</a>数据库中1对N关系的三种设计方式</h4><h5 id=\"第一种：N的数量较少-几十个以内\"><a href=\"#第一种：N的数量较少-几十个以内\" class=\"headerlink\" title=\"#第一种：N的数量较少 几十个以内\"></a><a href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E8%BE%83%E5%B0%91-%E5%87%A0%E5%8D%81%E4%B8%AA%E4%BB%A5%E5%86%85\">#</a>第一种：N的数量较少 几十个以内</h5><p><strong>1 条记录存储 N 个子数据</strong></p>\n<p>​    如一条博客中，最多有9张图片，这9张图片可和其他数据放在一个记录中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<br>\t&#123;<br>\t\t<span class=\"hljs-attr\">id</span>:...<br>\t\t<span class=\"hljs-attr\">img</span>:[<br>\t\t<span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span><br>\t\t]<br>\t&#125;<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"第二种：N的数量较多-几十到几百个\"><a href=\"#第二种：N的数量较多-几十到几百个\" class=\"headerlink\" title=\"#第二种：N的数量较多 几十到几百个\"></a><a href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E8%BE%83%E5%A4%9A-%E5%87%A0%E5%8D%81%E5%88%B0%E5%87%A0%E7%99%BE%E4%B8%AA\">#</a>第二种：N的数量较多 几十到几百个</h5><p><strong>1 存储 每个N的 id</strong></p>\n<p>可分两个数据库集合，</p>\n<p>一个为 ‘目录’ 集合，存放 ‘详情’ 集合下的每条数据的 id 目录</p>\n<p>一个为 ‘详情’ 集合，每条数据对应一个单独的 id 和 详细数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">目录集合：<br>[<br>\t&#123;<br>\t\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<br>\t\t<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;产品1&#x27;</span>,<br>\t\t<span class=\"hljs-string\">&#x27;xqs&#x27;</span>: [<span class=\"hljs-string\">&#x27;111&#x27;</span>,<span class=\"hljs-string\">&#x27;222&#x27;</span>,<span class=\"hljs-string\">&#x27;333&#x27;</span>, ... ]  <span class=\"hljs-comment\">// 存放 详情集合 中的每条数据 id</span><br>\t&#125;<br>]<br><br><br><br>详情集合：<br>[<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;111&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件1&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;222&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件2&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;333&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件3&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>...<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<p>如歌单列表，与歌曲详情的数据组合设计。</p>\n<h5 id=\"第三种：N的数量巨大-几百成千上万个\"><a href=\"#第三种：N的数量巨大-几百成千上万个\" class=\"headerlink\" title=\"#第三种：N的数量巨大 几百成千上万个\"></a><a href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E5%B7%A8%E5%A4%A7-%E5%87%A0%E7%99%BE%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E4%B8%AA\">#</a>第三种：N的数量巨大 几百成千上万个</h5><p><strong>每个 N 都存储 1 的 id</strong></p>\n<p>如新浪博客中的一条博客下面有几千条评论</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">一条新浪博客：<br>[&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>,<br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>:<span class=\"hljs-string\">&#x27;博客内容&#x27;</span><br>\t...<br>&#125;]<br><br><br>上千条评价：<br>[<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;111111&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容1&#x27;</span><br>&#125;,<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;222222&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容2&#x27;</span><br>&#125;,<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;33333&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容3&#x27;</span><br>&#125;,<br>...<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云调用\"><a href=\"#云调用\" class=\"headerlink\" title=\"#云调用\"></a><a href=\"#%E4%BA%91%E8%B0%83%E7%94%A8\">#</a>云调用</h4><p>通过云函数调用服务端的开发接口</p>\n<p>这些接口如：模板消息推送、生成小程序码…</p>\n<h4 id=\"模板消息推送\"><a href=\"#模板消息推送\" class=\"headerlink\" title=\"#模板消息推送\"></a><a href=\"#%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81\">#</a>模板消息推送</h4><p><strong>1、使用from表单才能触发消息推送，并设置report-submit=”true”</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;modal-content&quot;</span> <span class=\"hljs-attr\">report-submit</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">bind:submit</span>=<span class=\"hljs-string\">&quot;onSend&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;comment-content&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;写评论&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;&#123;content&#125;&#125;&quot;</span> <span class=\"hljs-attr\">fixed</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;send&quot;</span> <span class=\"hljs-attr\">form-type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>发送<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、需要到微信公众平台做相应的设置：</strong></p>\n<p>微信公众平台 &gt; 功能 &gt; 模板消息 &gt; 添加模板 &gt; 选择相应的模板&gt; 添加成功后会有一个模板ID</p>\n<p><strong>3、新建一个云函数，用于云调用。在该云函数下新建配置文件：config.json ，用于配置权限</strong></p>\n<p>config.json ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;permissions&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;openapi&quot;</span>: [<br>      <span class=\"hljs-string\">&quot;templateMessage.send&quot;</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>云函数设置消息推送：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 获取openid</span><br>  <span class=\"hljs-keyword\">const</span> &#123; OPENID &#125; = cloud.getWXContext()<br><br>  <span class=\"hljs-comment\">// 模板推送消息</span><br>  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> cloud.openapi.templateMessage.send(&#123;<br>    <span class=\"hljs-attr\">touser</span>: OPENID,<br>    <span class=\"hljs-attr\">page</span>: <span class=\"hljs-string\">`/pages/blog-comment/blog-comment?blogId=<span class=\"hljs-subst\">$&#123;event.blogId&#125;</span>`</span>, <span class=\"hljs-comment\">// 用户点击推送消息打开的页面</span><br>    <span class=\"hljs-attr\">data</span>: &#123; <span class=\"hljs-comment\">// 模板的内容，keyword为在公众平台设置模板时对应的字段</span><br>      <span class=\"hljs-attr\">keyword1</span>: &#123; <span class=\"hljs-comment\">// 评价内容</span><br>        <span class=\"hljs-attr\">value</span>: event.context<br>      &#125;,<br>      <span class=\"hljs-attr\">keyword2</span>: &#123; <span class=\"hljs-comment\">// 评价时间</span><br>        <span class=\"hljs-attr\">value</span>: event.time<br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">templateId</span>: <span class=\"hljs-string\">&#x27;LNwKMcYwlz-0HabgBhmZi6CWZrlNSBiNJ2h0SMorcxQ&#x27;</span>, <span class=\"hljs-comment\">// 模板id，到公众平台模板消息上获取</span><br>    <span class=\"hljs-attr\">formId</span>: event.formId <span class=\"hljs-comment\">// 触发消息推送的form表单的id</span><br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>4、在提交表单事件完成后调用消息推送云函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.cloud.callFunction(&#123;<br>         <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;sendMessage&#x27;</span>,<br>         <span class=\"hljs-attr\">data</span>: &#123;<br>           content,<br>           formId,<br>           <span class=\"hljs-attr\">blogId</span>: <span class=\"hljs-built_in\">this</span>.properties.blogId<br>         &#125;<br>       &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">console</span>.log(res)<br>       &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云函数多集合查询数据库\"><a href=\"#云函数多集合查询数据库\" class=\"headerlink\" title=\"#云函数多集合查询数据库\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E5%A4%9A%E9%9B%86%E5%90%88%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>云函数多集合查询数据库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 博客详情(博客内容、评论)</span><br>  app.router(<span class=\"hljs-string\">&#x27;blogDetail&#x27;</span>, <span class=\"hljs-keyword\">async</span>(ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">let</span> blogId = event.blogId<br><br>    <span class=\"hljs-comment\">// 博客内容</span><br>    <span class=\"hljs-keyword\">let</span> detail = <span class=\"hljs-keyword\">await</span> blogCollection.where(&#123;<br>      <span class=\"hljs-attr\">_id</span>: blogId<br>    &#125;).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// 评论查询</span><br>    <span class=\"hljs-keyword\">const</span> countResult = <span class=\"hljs-keyword\">await</span> blogCollection.count()<br>    <span class=\"hljs-keyword\">const</span> total = countResult.total<br>    <span class=\"hljs-keyword\">let</span> commentList = &#123;<br>      <span class=\"hljs-attr\">data</span>: []<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (total &gt; <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-comment\">// 突破100条限制</span><br>      <span class=\"hljs-keyword\">const</span> batchTimes = <span class=\"hljs-built_in\">Math</span>.ceil(total / MAX_LIMIT)<br>      <span class=\"hljs-keyword\">const</span> tasks = []<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; batchTimes; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> promise = db.collection(<span class=\"hljs-string\">&#x27;blog-comment&#x27;</span>).skip(i * MAX_LIMIT)<br>          .limit(MAX_LIMIT).where(&#123;<br>            blogId<br>          &#125;).orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get()<br>        tasks.push(promise)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (tasks.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        commentList = (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(tasks)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-attr\">data</span>: acc.data.concat(cur.data)<br>          &#125;<br>        &#125;)<br>      &#125;<br><br>    &#125;<br>    ctx.body = &#123;<br>      detail,<br>      commentList<br>    &#125;<br>  &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"#分享功能\"></a><a href=\"#%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD\">#</a>分享功能</h4><p>分享功能需要button标签，设置open-type=”share”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">open-type</span>=<span class=\"hljs-string\">&quot;share&quot;</span> <span class=\"hljs-attr\">data-blogid</span>=<span class=\"hljs-string\">&quot;&#123;&#123;blogId&#125;&#125;&quot;</span> <span class=\"hljs-attr\">data-blog</span>=<span class=\"hljs-string\">&quot;&#123;&#123;blog&#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;share-btn&quot;</span> <span class=\"hljs-attr\">hover-class</span>=<span class=\"hljs-string\">&quot;share-hover&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;iconfont icon-fenxiang icon&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span>&gt;</span>分享<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在js中有onShareAppMessage方法，点击button会自动执行此方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">onShareAppMessage: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(event)<br><br>    <span class=\"hljs-comment\">// 对分享卡片的设置</span><br>    <span class=\"hljs-keyword\">let</span> blogObj = event.target.dataset.blog<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">title</span>: blogObj.content,<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">`/pages/blog-comment/blog-comment?blogId=<span class=\"hljs-subst\">$&#123;blogObj._id&#125;</span>`</span>,<br>      <span class=\"hljs-comment\">// imageUrl: &#x27;&#x27; // 自定义图片，不支持云存储的图片</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"不同场景获取用户信息的方式\"><a href=\"#不同场景获取用户信息的方式\" class=\"headerlink\" title=\"#不同场景获取用户信息的方式\"></a><a href=\"#%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E5%BC%8F\">#</a>不同场景获取用户信息的方式</h4><h5 id=\"场景一：只想在界面上显示自己的昵称和头像\"><a href=\"#场景一：只想在界面上显示自己的昵称和头像\" class=\"headerlink\" title=\"#场景一：只想在界面上显示自己的昵称和头像\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%B8%80-%E5%8F%AA%E6%83%B3%E5%9C%A8%E7%95%8C%E9%9D%A2%E4%B8%8A%E6%98%BE%E7%A4%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%98%B5%E7%A7%B0%E5%92%8C%E5%A4%B4%E5%83%8F\">#</a>场景一：只想在界面上显示自己的昵称和头像</h5><p>以组件的方式：根据type类型获取不同用户数据</p>\n<p><strong>该方式不需要授权，只能用于在wxml显示自己的信息</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html\">open-data(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">open-data</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;userAvatarUrl&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">open-data</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">open-data</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;userNickName&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">open-data</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"场景二：在JS中获取用户信息\"><a href=\"#场景二：在JS中获取用户信息\" class=\"headerlink\" title=\"#场景二：在JS中获取用户信息\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%BA%8C-%E5%9C%A8js%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF\">#</a>场景二：在JS中获取用户信息</h5><p>该方式要在用户授权以后才能获取用户信息</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\">wx.getUserInfo(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.getUserInfo(&#123;<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在未授权的情况下需要用户先授权：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 判断用户是否授权</span><br>      wx.getSetting(&#123;<br>        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br>          <span class=\"hljs-keyword\">if</span> (res.authSetting[<span class=\"hljs-string\">&#x27;scope.userInfo&#x27;</span>]) &#123; <span class=\"hljs-comment\">// 已授权</span><br>            wx.getUserInfo(&#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>              <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br><br>                app.setGlobalData(<span class=\"hljs-string\">&#x27;userInfo&#x27;</span>, res.userInfo) <span class=\"hljs-comment\">// 设置app全局属性</span><br><br>                <span class=\"hljs-built_in\">this</span>.onLoginSuccess(&#123;<br>                  <span class=\"hljs-attr\">detail</span>: res.userInfo<br>                &#125;)<br>              &#125;<br>            &#125;)<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 未授权</span><br>            <span class=\"hljs-built_in\">this</span>.setData(&#123; <span class=\"hljs-comment\">// 打开弹出层，显示获取用户信息按钮</span><br>              <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">true</span><br>            &#125;)<br>          &#125;<br>        &#125;<br>      &#125;)<br><br><br>  授权按钮<br> &lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;login&quot;</span> open-type=<span class=\"hljs-string\">&quot;getUserInfo&quot;</span> bindgetuserinfo=<span class=\"hljs-string\">&quot;onGetUserInfo&quot;</span>&gt;获取微信授权信息&lt;/button&gt;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">onGetUserInfo</span>(<span class=\"hljs-params\">event</span>)</span> &#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>      <span class=\"hljs-keyword\">const</span> userInfo = event.detail.userInfo<br>      <span class=\"hljs-keyword\">if</span> (userInfo) &#123; <span class=\"hljs-comment\">// 用户允许授权</span><br>        <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>          <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">false</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginSuccess&#x27;</span>, userInfo) <span class=\"hljs-comment\">// 给父组件传用户数据</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 用户拒绝授权</span><br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginFail&#x27;</span>)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：上面这种方式没有获取到openId</p>\n</blockquote>\n<h5 id=\"场景三：获取openId\"><a href=\"#场景三：获取openId\" class=\"headerlink\" title=\"#场景三：获取openId\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%B8%89-%E8%8E%B7%E5%8F%96openid\">#</a>场景三：获取openId</h5><p><strong>获取openId不需要用户授权</strong></p>\n<p>1、传统开发方式获取openId，后台服务器由自己开发，没使用云开发</p>\n<p>小程序端 微信服务器 后端服务器</p>\n<p>步骤：</p>\n<p>小程序端 调用 wx.login 向微信服务器 获取code</p>\n<p>小程序端 调用 wx.request 将 code 传递给 后端服务器</p>\n<p>后端服务器 使用code 向微信服务器 换取openid和session_key</p>\n<p>后端服务器 将openid 发送给 小程序端</p>\n<p>2、云开发方式获取openId</p>\n<p>云函数login中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取 WX Context (微信调用上下文)，包括 OPENID、APPID、及 UNIONID（需满足 UNIONID 获取条件）</span><br>  <span class=\"hljs-keyword\">const</span> wxContext = cloud.getWXContext()<br><br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    event,<br>    <span class=\"hljs-attr\">openid</span>: wxContext.OPENID,<br>    <span class=\"hljs-attr\">appid</span>: wxContext.APPID,<br>    <span class=\"hljs-attr\">unionid</span>: wxContext.UNIONID,<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">普通按钮<br>&lt;button bindtap=<span class=\"hljs-string\">&quot;getOpenid&quot;</span>&gt;获取openid&lt;/button&gt;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">getOpenid</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>\twx.cloud.callFunction(&#123;<br>\t\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span><br>\t&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">console</span>.log(res)<br>\t&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>openid 在小程序和公众号下是不一样的</p>\n<p>unionid 在小程序和公众号下都是一样的</p>\n</blockquote>\n<h2 id=\"《我的》页面\"><a href=\"#《我的》页面\" class=\"headerlink\" title=\"#《我的》页面\"></a><a href=\"#%E3%80%8A%E6%88%91%E7%9A%84%E3%80%8B%E9%A1%B5%E9%9D%A2\">#</a>《我的》页面</h2><p>json文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;navigationBarTitleText&quot;</span>: <span class=\"hljs-string\">&quot;我的&quot;</span>,<br>  <span class=\"hljs-string\">&quot;disableScroll&quot;</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 使页面无法滚动</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"导航页面链接跳转\"><a href=\"#导航页面链接跳转\" class=\"headerlink\" title=\"#导航页面链接跳转\"></a><a href=\"#%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC\">#</a>导航页面链接跳转</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator(opens new window)</a></p>\n<h4 id=\"背景图片\"><a href=\"#背景图片\" class=\"headerlink\" title=\"#背景图片\"></a><a href=\"#%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87\">#</a>背景图片</h4><p>wxss背景图片不支持本地相对路径的图片，只支持网络图片和base64图片</p>\n<p>建议使用base64图片，图片文件最好不要太大。</p>\n<h4 id=\"每个页面都有的page标签\"><a href=\"#每个页面都有的page标签\" class=\"headerlink\" title=\"#每个页面都有的page标签\"></a><a href=\"#%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%83%BD%E6%9C%89%E7%9A%84page%E6%A0%87%E7%AD%BE\">#</a>每个页面都有的page标签</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">page &#123;<br>  background-color: #f1f1f1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"播放历史与本地存储\"><a href=\"#播放历史与本地存储\" class=\"headerlink\" title=\"#播放历史与本地存储\"></a><a href=\"#%E6%92%AD%E6%94%BE%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\">#</a>播放历史与本地存储</h4><p>方案一：播放历史存储在数据库当中，这样在不同设备访问都可查看播放历史。读取速度相对较慢</p>\n<p>方案二：播放历史存储在本地，仅当前设备可查看播放历史。读取速度较快</p>\n<p>本项目采用本地存储：</p>\n<p>使用openid作为本地存储的key，播放历史存入value</p>\n<p>在app.js中获取openid，即打开小程序就获取openid。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// app.js</span><br><span class=\"hljs-attr\">onLaunch</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>\t<span class=\"hljs-built_in\">this</span>.getOpenid() <span class=\"hljs-comment\">// 获取openid并存储</span><br>&#125;,<br><span class=\"hljs-function\"><span class=\"hljs-title\">getOpenid</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 获取openid并存储</span><br>    wx.cloud.callFunction(&#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span><br>    &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> openid = res.result.openid<br>      <span class=\"hljs-built_in\">this</span>.globalData.openid = openid <span class=\"hljs-comment\">// 保存到全局变量</span><br>      <span class=\"hljs-keyword\">if</span> (wx.getStorageSync(openid) == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">// 该用户从未打开过小程序，未存储过openid在本地</span><br>        wx.setStorageSync(openid, []) <span class=\"hljs-comment\">// 存储openid到本地</span><br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>歌曲播放时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 保存播放历史到本地存储</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">savePlayHistory</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> currentSong = musiclist[nowPlayingIndex] <span class=\"hljs-comment\">// 当前播放歌曲</span><br>    <span class=\"hljs-keyword\">const</span> openid = app.globalData.openid <span class=\"hljs-comment\">// 从全局属性获取openid</span><br>    <span class=\"hljs-keyword\">const</span> playHistory = wx.getStorageSync(openid) <span class=\"hljs-comment\">// 从本地存储获取播放历史数组</span><br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = playHistory.length; i &lt; len; i++) &#123;<br>      <span class=\"hljs-keyword\">if</span> (playHistory[i].id === currentSong.id) &#123; <span class=\"hljs-comment\">// 当前播放歌曲已存在播放历史中</span><br>        playHistory.splice(i, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 删除原纪录</span><br>        <span class=\"hljs-keyword\">break</span><br>      &#125;<br>    &#125;<br><br>    playHistory.unshift(currentSong) <span class=\"hljs-comment\">// 在数组开头插入</span><br>    wx.setStorage(&#123; <span class=\"hljs-comment\">// 存入本地</span><br>      <span class=\"hljs-attr\">key</span>: openid,<br>      <span class=\"hljs-attr\">data</span>: playHistory<br>    &#125;)<br><br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<p>播放历史页面获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">onLoad: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> openid = app.globalData.openid <span class=\"hljs-comment\">//从全局属性获取openid</span><br>    <span class=\"hljs-keyword\">const</span> playHistory = wx.getStorageSync(openid) <span class=\"hljs-comment\">// 读取本地播放历史数据</span><br><br>    <span class=\"hljs-keyword\">if</span> (playHistory.length !== <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">// 有播放历史</span><br>      <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>        playHistory<br>      &#125;)<br>      wx.setStorage(&#123; <span class=\"hljs-comment\">// storage里把musiclist（播放列表）的内容换成播放历史的列表</span><br>        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;musiclist&#x27;</span>,<br>        <span class=\"hljs-attr\">data</span>: playHistory,<br>      &#125;)<br>    &#125;<br><br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"我的发现\"><a href=\"#我的发现\" class=\"headerlink\" title=\"#我的发现\"></a><a href=\"#%E6%88%91%E7%9A%84%E5%8F%91%E7%8E%B0\">#</a>我的发现</h4><p>代码分别演示了从云函数和小程序端获取数据，从小程序端获取数据享有<strong>权限管理</strong>的能力，不需要传openid。</p>\n<h4 id=\"小程序码\"><a href=\"#小程序码\" class=\"headerlink\" title=\"#小程序码\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81\">#</a>小程序码</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html\">获取小程序码(opens new window)</a></p>\n<p>本项目演示使用<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\">接口 B：适用于需要的码数量极多的业务场景 (opens new window)</a><code>云调用</code> 的方式。</p>\n<p>步骤：</p>\n<ul>\n<li>创建云函数 gteQRCode</li>\n<li>gteQRCode云函数下创建config.json配置权限，代码如下：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;permissions&quot;</span>:&#123;<br>    <span class=\"hljs-attr\">&quot;openapi&quot;</span>:[<br>      <span class=\"hljs-string\">&quot;wxacode.getUnlimited&quot;</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> wxContext = cloud.getWXContext()<br><br>  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> cloud.openapi.wxacode.getUnlimited(&#123;<br>    <span class=\"hljs-attr\">scene</span>: wxContext.OPENID, <span class=\"hljs-comment\">// 链接参数 不一定传openid，可传其他任意数据，然后通过此数据，在别人扫码进入时就可用于判断</span><br>    <span class=\"hljs-comment\">// page: &quot;pages/blog/blog&quot; // 默认进入主页</span><br>    <span class=\"hljs-comment\">// lineColor: &#123; // 线条颜色</span><br>    <span class=\"hljs-comment\">//   &#x27;r&#x27;: 211,</span><br>    <span class=\"hljs-comment\">//   &#x27;g&#x27;: 60,</span><br>    <span class=\"hljs-comment\">//   &#x27;b&#x27;: 57</span><br>    <span class=\"hljs-comment\">// &#125;,</span><br>    <span class=\"hljs-comment\">// isHyaline: true // 是否透明</span><br>  &#125;)<br><br>  <span class=\"hljs-comment\">// result为二进制数据, 先上传到云存储</span><br><br>  <span class=\"hljs-comment\">// 上传云存储</span><br>  <span class=\"hljs-keyword\">const</span> upload = <span class=\"hljs-keyword\">await</span> cloud.uploadFile(&#123;<br>    <span class=\"hljs-attr\">cloudPath</span>: <span class=\"hljs-string\">&#x27;qrcode/qrcode&#x27;</span> + <span class=\"hljs-built_in\">Date</span>.now() + <span class=\"hljs-built_in\">Math</span>.random() + <span class=\"hljs-string\">&#x27;.png&#x27;</span>,<br>    <span class=\"hljs-attr\">fileContent</span>: result.buffer<br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> upload.fileID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"判断是从扫码小程序码进入，以及参数获取\"><a href=\"#判断是从扫码小程序码进入，以及参数获取\" class=\"headerlink\" title=\"#判断是从扫码小程序码进入，以及参数获取\"></a><a href=\"#%E5%88%A4%E6%96%AD%E6%98%AF%E4%BB%8E%E6%89%AB%E7%A0%81%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81%E8%BF%9B%E5%85%A5-%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\">#</a>判断是从扫码小程序码进入，以及参数获取</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在从小程序码进入的页面js，onLoad方法中，</span><br><br><span class=\"hljs-attr\">onLoad</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(options.scene) <span class=\"hljs-comment\">// 获取到小程序码进入的参数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"版本更新检测\"><a href=\"#版本更新检测\" class=\"headerlink\" title=\"#版本更新检测\"></a><a href=\"#%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\">#</a>版本更新检测</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// app.js</span><br><span class=\"hljs-attr\">onLaunch</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.checkUpate()<br>&#125;,<br><span class=\"hljs-function\"><span class=\"hljs-title\">checkUpate</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> updateManager = wx.getUpdateManager()<br>    <span class=\"hljs-comment\">// 检测版本更新</span><br>    updateManager.onCheckForUpdate(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (res.hasUpdate)&#123;<br>        updateManager.onUpdateReady(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>          wx.showModal(&#123;<br>            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;更新提示&#x27;</span>,<br>            <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;新版本已经准备好，是否重启应用&#x27;</span>,<br>            <span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>              <span class=\"hljs-keyword\">if</span>(res.confirm)&#123;<br>                updateManager.applyUpdate()<br>              &#125;<br>            &#125;<br>          &#125;)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"#性能优化\"></a><a href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">#</a>性能优化</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html\">官网文档优化建议(opens new window)</a></p>\n<p>使用开发者工具的调试器，Audits进行评分，然后根据提示针对项目进行优化。</p>\n<h3 id=\"场景值scene的作用与应用场景\"><a href=\"#场景值scene的作用与应用场景\" class=\"headerlink\" title=\"#场景值scene的作用与应用场景\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E5%80%BCscene%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">#</a>场景值scene的作用与应用场景</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html\">场景值(opens new window)</a></p>\n<p>场景值用来描述用户进入小程序的路径。完整场景值的含义请查看<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html\">场景值列表 (opens new window)</a>。</p>\n<p>可根据不同场景进入实现不同业务处理，比如一个点餐小程序，店家内贴了小程序码，用户通过扫码进入，可立即进入点餐页面，等等</p>\n<p>在app.js中的onLaunch(options) 、onShow(options)，options包含scene场景值</p>\n<p><strong>开发者工具中，切后台，可模拟进入场景。</strong></p>\n<h3 id=\"小程序的”SEO”—页面收录sitemap\"><a href=\"#小程序的”SEO”—页面收录sitemap\" class=\"headerlink\" title=\"#小程序的”SEO”—页面收录sitemap\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84-seo-%E9%A1%B5%E9%9D%A2%E6%94%B6%E5%BD%95sitemap\">#</a>小程序的”SEO”—页面收录sitemap</h3><p>在app.js的同级目录下有sitemap.json文件，用于配置收录规则</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\">stiemap配置(opens new window)</a></p>\n<p>作用：</p>\n<p>使小程序搜索可根据小程序的内容进行搜索到</p>\n<p>使用方法：</p>\n<p>1、在微信公众平台，小程序信息 &gt; 页面收录设置 &gt; 打开 (默认是已开启)</p>\n<p>2、打开sitemap.json文件，配置收录规则</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;desc&quot;</span>: <span class=\"hljs-string\">&quot;关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;rules&quot;</span>: [&#123; <span class=\"hljs-comment\">// 收录规则</span><br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;allow&quot;</span>,<span class=\"hljs-comment\">// 是否被收录，allow允许被收录，disallow不允许</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-comment\">// *星号表示所有页面都被收录</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;desc&quot;</span>: <span class=\"hljs-string\">&quot;关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;rules&quot;</span>: [&#123; <span class=\"hljs-comment\">// 收录规则，可添加多条</span><br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;allow&quot;</span>, <span class=\"hljs-comment\">// 是否被收录</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>:<span class=\"hljs-string\">&quot;pages/player/player&quot;</span>,  <span class=\"hljs-comment\">// 页面</span><br>  <span class=\"hljs-attr\">&quot;params&quot;</span>: [<span class=\"hljs-string\">&quot;musicId&quot;</span>,<span class=\"hljs-string\">&quot;index&quot;</span>], <span class=\"hljs-comment\">// 链接的动态参数</span><br>   <span class=\"hljs-attr\">&quot;matching&quot;</span>:&#x27;exact&#x27; <span class=\"hljs-comment\">// 表示params的参数是否要准确的匹配</span><br>  &#125;，&#123;<br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;disallow&quot;</span>, <span class=\"hljs-comment\">// 是否被收录</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>:<span class=\"hljs-string\">&quot;*&quot;</span>,  /<br>  &#125;]<br>&#125;<br><br><span class=\"hljs-comment\">// 上面配置规则表示除了player页面被收录外，其他页面不被收录</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小程序上线审核流程\"><a href=\"#小程序上线审核流程\" class=\"headerlink\" title=\"#小程序上线审核流程\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B\">#</a>小程序上线审核流程</h3><p>微信公众平台，版本管理&gt;把小程序上传为体验版》提交审核》上线</p>\n<h2 id=\"后台管理系统\"><a href=\"#后台管理系统\" class=\"headerlink\" title=\"#后台管理系统\"></a><a href=\"#%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\">#</a>后台管理系统</h2><h4 id=\"架构示意图\"><a href=\"#架构示意图\" class=\"headerlink\" title=\"#架构示意图\"></a><a href=\"#%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE\">#</a>架构示意图</h4><p>​    前端 后台 小程序云开发</p>\n<p>vue-admin-template &lt;—通过ajax–&gt; 基于Koa2；HTTP API 或 tcb-admin-node —-&gt;云函数、云数据库、云存储</p>\n<h4 id=\"vue-admin-template构建管理系统前端\"><a href=\"#vue-admin-template构建管理系统前端\" class=\"headerlink\" title=\"#vue-admin-template构建管理系统前端\"></a><a href=\"#vue-admin-template%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF\">#</a>vue-admin-template构建管理系统前端</h4><p><a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin (opens new window)</a>基于element的后台管理系统模板</p>\n<p><a href=\"https://github.com/PanJiaChen/vue-admin-template\">vue-admin-template (opens new window)</a>是 <a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin (opens new window)</a>的简化版</p>\n<p>使用方法查看官方文档。</p>\n<h4 id=\"Koa2构建管理系统后端\"><a href=\"#Koa2构建管理系统后端\" class=\"headerlink\" title=\"#Koa2构建管理系统后端\"></a><a href=\"#koa2%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%AB%AF\">#</a>Koa2构建管理系统后端</h4><p>官网： <a href=\"https://koa.bootcss.com/\">https://koa.bootcss.com/(opens new window)</a></p>\n<p>新建空文件夹wx-music-admin-backend，打开终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成package.json文件，-y 表示默认的配置</span><br>npm init -y<br><br><span class=\"hljs-comment\"># 安装koa</span><br>npm install koa<br><br><span class=\"hljs-comment\"># 新建app.js文件 (win10系统命令)，作为项目入口文件</span><br><span class=\"hljs-built_in\">type</span> nul &gt; app.js<br></code></pre></td></tr></table></figure>\n\n\n\n<p>app.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;chalk&#x27;</span>) <span class=\"hljs-comment\">// 使console.log打印文字有颜色的插件，需: npm i chalk</span><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()<br><br>app.use(<span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>  ctx.body = <span class=\"hljs-string\">&#x27;Hello Wolrd&#x27;</span><br>&#125;)<br><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span><br>app.listen(port, <span class=\"hljs-function\">() =&gt;</span> &#123; <span class=\"hljs-comment\">// 端口号，开启服务后的回调函数</span><br>  <span class=\"hljs-built_in\">console</span>.log(chalk.green(<span class=\"hljs-string\">`&gt; 服务已开启，访问：http://localhost:<span class=\"hljs-subst\">$&#123;port&#125;</span>`</span>))<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># node启动项目</span><br>node app.js<br><br><span class=\"hljs-comment\"># 访问：http://localhost:3000</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"接口调用凭证-access-token-的缓存与更新\"><a href=\"#接口调用凭证-access-token-的缓存与更新\" class=\"headerlink\" title=\"#接口调用凭证 access_token 的缓存与更新\"></a><a href=\"#%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%AD%E8%AF%81-access-token-%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%8E%E6%9B%B4%E6%96%B0\">#</a>接口调用凭证 access_token 的缓存与更新</h4><p>access_token，微信的接口调用凭证，详情：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html\">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html(opens new window)</a></p>\n<p>回到项目wx-music-admin-backend，打开终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># HTTP 请求 插件</span><br>npm i request<br>npm i request-promise<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 获取微信接口调用凭证</span><br><span class=\"hljs-comment\"> * 详情：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html</span><br><span class=\"hljs-comment\"> */</span><br><br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// node发送http请求的插件</span><br><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>) <span class=\"hljs-comment\">// node文件模块</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>) <span class=\"hljs-comment\">// node 路径模块</span><br><br><span class=\"hljs-comment\">//fileName = __dirname 当前文件所在目录的绝对路径, 加上 &#x27;./access_token.json&#x27;</span><br><span class=\"hljs-keyword\">const</span> fileName = path.resolve(__dirname, <span class=\"hljs-string\">&#x27;./access_token.json&#x27;</span>)<br><br><span class=\"hljs-comment\">// 这两个参数的获取：微信公众平台&gt;开发&gt;开发设置</span><br><span class=\"hljs-keyword\">const</span> APPID = <span class=\"hljs-string\">&#x27;wxc4e0b2d98063b103&#x27;</span><br><span class=\"hljs-keyword\">const</span> APPSECRET = <span class=\"hljs-string\">&#x27;xxx&#x27;</span> <span class=\"hljs-comment\">//小程序密钥，注意保密!</span><br><br><span class=\"hljs-comment\">// 微信 access_token 请求地址</span><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class=\"hljs-subst\">$&#123;APPID&#125;</span>&amp;secret=<span class=\"hljs-subst\">$&#123;APPSECRET&#125;</span>`</span><br><br><span class=\"hljs-comment\">// 发送请求获取AccessToken</span><br><span class=\"hljs-keyword\">const</span> updateAccessToken = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> resStr = <span class=\"hljs-keyword\">await</span> rp(URL)<br>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-built_in\">JSON</span>.parse(resStr)<br><br>  <span class=\"hljs-keyword\">if</span> (res.access_token) &#123;<br>    <span class=\"hljs-comment\">// node写文件,参数：1 文件路径，2 文件内容, 首次写文件为新建，往后为覆盖</span><br>    fs.writeFileSync(fileName, <span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<br>      <span class=\"hljs-attr\">access_token</span>: res.access_token,<br>      <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    &#125;))<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 如获取不到，再次获取</span><br>    <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 读取access_token</span><br><span class=\"hljs-keyword\">const</span> getAccessToken = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>     <span class=\"hljs-comment\">// node读取文件,参数：1 读取的文件，2 字符集</span><br>    <span class=\"hljs-keyword\">const</span> readRes = fs.readFileSync(fileName, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)<br>    <span class=\"hljs-keyword\">const</span> readObj = <span class=\"hljs-built_in\">JSON</span>.parse(readRes)<br><br>    <span class=\"hljs-comment\">// 如果服务器宕机导致setInterval无法定时更新，这里需要再次判断access_token的有效性</span><br>    <span class=\"hljs-keyword\">const</span> createTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(readObj.createTime).getTime()<br>    <span class=\"hljs-keyword\">const</span> nowTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()<br>    <span class=\"hljs-keyword\">if</span>((nowTime - createTime) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> &gt;= <span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>      <span class=\"hljs-keyword\">await</span> getAccessToken()<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> readObj.access_token<br><br>  &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <span class=\"hljs-comment\">//捕获异常，在未创建文件时，先创建文件</span><br>    <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>    <span class=\"hljs-keyword\">await</span> getAccessToken()<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// access_token有效期为2个小时，定时更新</span><br><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>&#125;, (<span class=\"hljs-number\">7200</span> - <span class=\"hljs-number\">300</span>) * <span class=\"hljs-number\">1000</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = getAccessToken<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"后端代码通过HTTP-API-触发云函数获取数据\"><a href=\"#后端代码通过HTTP-API-触发云函数获取数据\" class=\"headerlink\" title=\"#后端代码通过HTTP API 触发云函数获取数据\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E9%80%9A%E8%BF%87http-api-%E8%A7%A6%E5%8F%91%E4%BA%91%E5%87%BD%E6%95%B0%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">#</a>后端代码通过HTTP API 触发云函数获取数据</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/functions/invokeCloudFunction.html\">HTTP API 触发云函数(opens new window)</a></p>\n<h4 id=\"产生跨域和后端解决跨域问题\"><a href=\"#产生跨域和后端解决跨域问题\" class=\"headerlink\" title=\"#产生跨域和后端解决跨域问题\"></a><a href=\"#%E4%BA%A7%E7%94%9F%E8%B7%A8%E5%9F%9F%E5%92%8C%E5%90%8E%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">#</a>产生跨域和后端解决跨域问题</h4><p>管理系统前端向管理系统后端请求数据，产生了跨域问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">  <span class=\"hljs-comment\">// 产生跨域的几种情况</span><br>  <span class=\"hljs-comment\">// http://www.a.com  https://www.a.com 协议不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com  http://www.b.com 域名不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com  http://news.a.com 主域与子域不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com:8080  http://www.a.com:3000 端口不同</span><br><br><span class=\"hljs-comment\">// 解决跨域的几种方法</span><br><span class=\"hljs-comment\">// jsonp</span><br><span class=\"hljs-comment\">// iframe</span><br><span class=\"hljs-comment\">// postMessage跨域</span><br><span class=\"hljs-comment\">// 跨域资源共享（CORS）</span><br></code></pre></td></tr></table></figure>\n\n<p>管理系统后端，安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">// 解决跨域问题的koa包<br>npm i koa2-cors<br></code></pre></td></tr></table></figure>\n\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//处理跨域</span><br>app.use(cors(&#123;<br>  <span class=\"hljs-attr\">origin</span>: [<span class=\"hljs-string\">&#x27;http://localhost:9528&#x27;</span>], <span class=\"hljs-comment\">// 允许访问本服务的域</span><br>  <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-literal\">true</span><br>&#125;))<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云数据库的增删改查接口\"><a href=\"#云数据库的增删改查接口\" class=\"headerlink\" title=\"#云数据库的增删改查接口\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%8E%A5%E5%8F%A3\">#</a>云数据库的增删改查接口</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/database/databaseQuery.html\">数据库查询记录(opens new window)</a></p>\n<h4 id=\"后端获取前端post请求传来的数据\"><a href=\"#后端获取前端post请求传来的数据\" class=\"headerlink\" title=\"#后端获取前端post请求传来的数据\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AFpost%E8%AF%B7%E6%B1%82%E4%BC%A0%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE\">#</a>后端获取前端post请求传来的数据</h4><p>get请求可以直接通过ctx.request.query获取，但是post请求需要安装koa-body</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm i koa-body<br></code></pre></td></tr></table></figure>\n\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> koaBody = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa-body&#x27;</span>) <span class=\"hljs-comment\">// 对post请求前端传来的数据的获取，需要此依赖</span><br><br><span class=\"hljs-comment\">// 接收post参数解析</span><br>app.use(koaBody(&#123;<br>  <span class=\"hljs-attr\">multipart</span>: <span class=\"hljs-literal\">true</span><br>&#125;))<br></code></pre></td></tr></table></figure>\n\n<p>接口.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.post(<span class=\"hljs-string\">&#x27;/updatePlaylist&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br><br>  <span class=\"hljs-keyword\">const</span> params = ctx.request.body <span class=\"hljs-comment\">// post请求获取前端传来的数据，需安装和配置koa-body</span><br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"后端获取云存储图片\"><a href=\"#后端获取云存储图片\" class=\"headerlink\" title=\"#后端获取云存储图片\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E4%BA%91%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87\">#</a>后端获取云存储图片</h4><p>云存储中上传图片，云数据库中新建图片的集合，并添加数据字段，字段包含云文件的fileid。</p>\n<p>后端项目通过调用云数据库的方式获取数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">&#x27;/list&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 接口中读取数据库默认最多10条数据</span><br>  <span class=\"hljs-keyword\">const</span> query = <span class=\"hljs-string\">`db.collection(&#x27;swiper&#x27;).get()`</span><br>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> callCloudDB(ctx, <span class=\"hljs-string\">&#x27;databasequery&#x27;</span>, query)<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>但获取到的数据为fileid，并不能用于显示图片，需要通过微信HTTP API获取云存储的接口来获取图片地址</p>\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]},{"name":"济南日记","cover":"/images/theme/post-image.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg","/images/theme/post-image.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"小程序开发学习笔记\"><a href=\"#小程序开发学习笔记\" class=\"headerlink\" title=\"小程序开发学习笔记\"></a>小程序开发学习笔记</h1><h2 id=\"基础课程部分\"><a href=\"#基础课程部分\" class=\"headerlink\" title=\"基础课程部分\"></a>基础课程部分</h2><h4 id=\"微信公众平台\"><a href=\"#微信公众平台\" class=\"headerlink\" title=\"微信公众平台\"></a>微信公众平台</h4><p><a href=\"https://mp.weixin.qq.com/\">https://mp.weixin.qq.com/(opens new window)</a></p>\n<p>注册时可选择类型：订阅号、服务号、小程序、企业微信</p>\n<p><strong>每个邮箱仅能注册一个小程序。</strong></p>\n<p>个人类型小程序：无法使用微信支付、无法使用卡包功能</p>\n<h5 id=\"小程序文档API\"><a href=\"#小程序文档API\" class=\"headerlink\" title=\"小程序文档API\"></a>小程序文档API</h5><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/\">小程序开发文档(opens new window)</a></p>\n<h5 id=\"微信开放社区\"><a href=\"#微信开放社区\" class=\"headerlink\" title=\"微信开放社区\"></a>微信开放社区</h5><p><a href=\"https://developers.weixin.qq.com/community/develop/question\">微信开发社区(opens new window)</a></p>\n<h4 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"#目录说明\"></a><a href=\"#%E7%9B%AE%E5%BD%95%E8%AF%B4%E6%98%8E\">#</a>目录说明</h4><p><strong>默认目录</strong></p>\n<p>pages———————–页面相关</p>\n<p>​    index —————– 首页文件夹</p>\n<p>​    index.js ————首页js</p>\n<p>​    index.json———首页配置</p>\n<p>​    index.wxml——-首页html</p>\n<p>​    index.wxss——–首页css</p>\n<p>utils————————工具相关</p>\n<p>app.js ———————-项目总js</p>\n<p>app.json——————-全局配置( 页面路由以及头部、底部导航的配置等)</p>\n<p>app.wxss —————–项目总样式css</p>\n<p>project.config.json —-项目配置</p>\n<p><strong>代码构成</strong></p>\n<p>.json ：配置文件，以json格式存储配置</p>\n<p>​    项目中有三种配置：项目配置（project.config.json）、全局配置（app.json）、页面配置（index.json）</p>\n<p>.wxml: 相当于html文件</p>\n<p>.wxss: 相当于css</p>\n<p>.js : 就是js</p>\n<h4 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"#文件说明\"></a><a href=\"#%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\">#</a>文件说明</h4><p><strong>project.config.json项目配置 部分代码说明</strong></p>\n<p>setting：{</p>\n<p>urlCheck 是否检测安全的域名</p>\n<p>es6 是否把es6转es5</p>\n<p>postcss 是否把css样式自动补全</p>\n<p>minified 是否压缩</p>\n<p>}</p>\n<p><strong>app.json 全局配置</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html\">全局配置API(opens new window)</a></p>\n<p><strong>wxml 相关介绍</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/\">wxmlAPI(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>&#123;&#123;motto&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>循环渲染<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span><br>      &#123;&#123;index&#125;&#125; &#123;&#123;item&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>改变for循环item和index的名称<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:for-item</span>=<span class=\"hljs-string\">&quot;data&quot;</span> <span class=\"hljs-attr\">wx:for-index</span>=<span class=\"hljs-string\">&quot;inx&quot;</span>&gt;</span><br>\t&#123;&#123;inx&#125;&#125; &#123;&#123;data&#125;&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><br>条件渲染 (类似vue的v-if、v-else)<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:if</span>=<span class=\"hljs-string\">&quot;&#123;&#123;isLogin&#125;&#125;&quot;</span>&gt;</span>已登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:else</span>&gt;</span>请登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>条件显示（类似vue的v-show）<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">hidden</span>=<span class=\"hljs-string\">&quot;&#123;&#123;isLogin&#125;&#125;&quot;</span>&gt;</span>显示内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><br>绑定点击事件<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">“tapName”</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><br>Page(&#123;<br>  tapName: function(event) &#123;<br>    console.log(event)<br>  &#125;<br>&#125;)<br>...<br></code></pre></td></tr></table></figure>\n\n<p><strong>wxss 相关介绍</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html\">wxssAPI(opens new window)</a></p>\n<p>尺寸单位：rpx，根据屏幕宽度自适应。</p>\n<p>引入外部wxss：@import ’…‘</p>\n<p><strong>js相关介绍</strong></p>\n<p>WXS（WeiXin Script）是小程序的一套脚本语言</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/\">wxsAPI(opens new window)</a></p>\n<p>绑定点击事件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">“onTapHandler”</span>&gt;</span>点我+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Page(&#123;<br>  <span class=\"hljs-attr\">data</span>: &#123;<br>    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span><br>  &#125;,<br>  <span class=\"hljs-attr\">onTapHandler</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>  \t<span class=\"hljs-built_in\">this</span>.setData(&#123;<br>  \t\t<span class=\"hljs-attr\">count</span>: <span class=\"hljs-built_in\">this</span>.data.count++<br>  \t&#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"阻止事件冒泡\"><a href=\"#阻止事件冒泡\" class=\"headerlink\" title=\"#阻止事件冒泡\"></a><a href=\"#%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1\">#</a>阻止事件冒泡</h5><p>把绑定方式 bindtap 换成 catchtap 即可。</p>\n<h4 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"#第三方库\"></a><a href=\"#%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93\">#</a>第三方库</h4><p><strong>WeUI</strong></p>\n<p>weUI是一套同微信原生视觉体验一致的基础样式库</p>\n<p><strong>iView Weapp</strong></p>\n<p>一套高质量的微信小程序UI组件库</p>\n<p><strong>Vant Weapp</strong></p>\n<p>轻量、可靠的小程序UI组件库</p>\n<h4 id=\"云开发\"><a href=\"#云开发\" class=\"headerlink\" title=\"#云开发\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91\">#</a>云开发</h4><p><strong>小程序传统开发模式</strong></p>\n<p>客户端 —–&gt; 服务端（后端代码、数据库）——&gt; 运维（DB维护、文件存储、内容加速、网络防护、容器服务、负载均衡、安全加固等…）</p>\n<p><strong>小程序云开发模式</strong></p>\n<p>客户端 —–&gt; 云开发（云函数、云数据库、云存储）</p>\n<p><strong>传统开发 VS 云开发</strong></p>\n<p>开发效率低 Serverless（无服务）</p>\n<p>运维成本高 开发者更关注业务逻辑</p>\n<p><strong>无服务（Serverless）开发是未来的发展趋势</strong></p>\n<h5 id=\"云开发三大基础能力\"><a href=\"#云开发三大基础能力\" class=\"headerlink\" title=\"#云开发三大基础能力\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E4%B8%89%E5%A4%A7%E5%9F%BA%E7%A1%80%E8%83%BD%E5%8A%9B\">#</a><strong>云开发三大基础能力</strong></h5><h5 id=\"云函数\"><a href=\"#云函数\" class=\"headerlink\" title=\"#云函数\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0\">#</a>云函数</h5><p>（相当于传统开发中的后台接口）</p>\n<p>获取appid、获取openid、生成分享图、调用腾讯云SDK …</p>\n<h5 id=\"云数据库\"><a href=\"#云数据库\" class=\"headerlink\" title=\"#云数据库\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>云数据库</h5><p>数据的增、删、改、查 …</p>\n<h5 id=\"云存储\"><a href=\"#云存储\" class=\"headerlink\" title=\"#云存储\"></a><a href=\"#%E4%BA%91%E5%AD%98%E5%82%A8\">#</a>云存储</h5><p>管理文件、上传文件、下载文件、分享文件 …</p>\n<p><strong>每个小程序账号可免费创建两个环境，建议：开发环境、生成环境</strong></p>\n<h4 id=\"云数据库能力\"><a href=\"#云数据库能力\" class=\"headerlink\" title=\"#云数据库能力\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E8%83%BD%E5%8A%9B\">#</a>云数据库能力</h4><p>云开发提供了一个json数据库，提供2GB免费存储空间。</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"#数据类型\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">#</a>数据类型</h4><p>String 字符串</p>\n<p>Number 数字</p>\n<p>Object 对象</p>\n<p>Array 数组</p>\n<p>Boolean 布尔值</p>\n<p>GeoPoint 地理位置点</p>\n<p>Date 时间 （精确到毫秒ms，客户端时间）</p>\n<p>Null 空</p>\n<h4 id=\"操作云数据库\"><a href=\"#操作云数据库\" class=\"headerlink\" title=\"#操作云数据库\"></a><a href=\"#%E6%93%8D%E4%BD%9C%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>操作云数据库</h4><p>小程序控制（读写数据库受权限限制）</p>\n<p>云函数控制（拥有所有读写数据库的权限）</p>\n<p>控制台控制（拥有所有读写数据库的权限）</p>\n<h4 id=\"云数据库权限管理\"><a href=\"#云数据库权限管理\" class=\"headerlink\" title=\"#云数据库权限管理\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\">#</a>云数据库权限管理</h4><p>仅创建者可写，所有人可读 （适合于文章）</p>\n<p>仅创建者可读写 (适用于私密内容)</p>\n<p>仅管理端可写，所有人可读（适用于商品信息）</p>\n<p>仅管理端可读写（适用于后台敏感数据）</p>\n<h4 id=\"操作云数据库-1\"><a href=\"#操作云数据库-1\" class=\"headerlink\" title=\"#操作云数据库\"></a><a href=\"#%E6%93%8D%E4%BD%9C%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93-2\">#</a>操作云数据库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//初始化数据库</span><br><span class=\"hljs-keyword\">const</span> db = wx.cloud.database() <span class=\"hljs-comment\">// 小程序端初始化数据库，如果在云函数端不需要加wx</span><br><br><span class=\"hljs-comment\">//切换环境(开发环境/生产环境)</span><br><span class=\"hljs-keyword\">const</span> testDB = wx.cloud.database(&#123;<br>\t<span class=\"hljs-attr\">env</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实战课程部分\"><a href=\"#实战课程部分\" class=\"headerlink\" title=\"#实战课程部分\"></a><a href=\"#%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E9%83%A8%E5%88%86\">#</a>实战课程部分</h2><h4 id=\"serverless（无服务）\"><a href=\"#serverless（无服务）\" class=\"headerlink\" title=\"#serverless（无服务）\"></a><a href=\"#serverless-%E6%97%A0%E6%9C%8D%E5%8A%A1\">#</a>serverless（无服务）</h4><p>概念：函数即服务，当需要后端服务的时候，不需要关心后端的IP地址、域名，只需要像调用普通函数一样既可以实现调用。</p>\n<h4 id=\"云开发优势\"><a href=\"#云开发优势\" class=\"headerlink\" title=\"#云开发优势\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E4%BC%98%E5%8A%BF\">#</a>云开发优势</h4><p>快速上线、专注核心业务、独立开发一个完整的微信小程序、不需要学习新的语言，只需要会javascript、无需运维， 节约成本、数据安全、</p>\n<h4 id=\"云开发提供能力\"><a href=\"#云开发提供能力\" class=\"headerlink\" title=\"#云开发提供能力\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E6%8F%90%E4%BE%9B%E8%83%BD%E5%8A%9B\">#</a>云开发提供能力</h4><p>云函数：在云端运行的代码，微信私有协议天然鉴权 （理解：相当于后端部分）</p>\n<p>云数据库：一个既可以在小程序端操作又可以在云函数中操作的JSON数据库</p>\n<p>云存储：在云端存储文件，可以在云端控制台可视化管理</p>\n<p>云调用：基于云函数免鉴权使用小程序开放接口的能力（比如说给用户推送消息等）</p>\n<p>HTTP API：使用HTTP API开发者可在已有服务器上访问云资源，实现与云开发的互通（作用：对原有传统模式下开发的小程序，可以与云开发进行互通）</p>\n<h4 id=\"appID\"><a href=\"#appID\" class=\"headerlink\" title=\"#appID\"></a><a href=\"#appid\">#</a>appID</h4><p>每个小程序唯一的id</p>\n<h4 id=\"云开发项目默认目录结构\"><a href=\"#云开发项目默认目录结构\" class=\"headerlink\" title=\"#云开发项目默认目录结构\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">#</a>云开发项目默认目录结构</h4><p>cloudfunctions —————————-云函数</p>\n<p>​    callback ———————————- 回调函数</p>\n<p>​    config.json —————————</p>\n<p>​    index.js ——————————–</p>\n<p>​    package.json ————————</p>\n<p>​    echo —————————————-</p>\n<p>​    login —————————————-</p>\n<p>​    openapi ———————————–</p>\n<p>miniprogram ——————————- 小程序</p>\n<p>​    images ————————————- 图片</p>\n<p>​    pages ————————————— 页面</p>\n<p>​    style —————————————– 样式</p>\n<p>​    app.js ————————————— 项目js</p>\n<p>​    app.json ———————————– 全局配置</p>\n<p>​    app.wxss ———————————- 项目样式</p>\n<p>​    sitemap.json —————————– （小程序SEO相关）</p>\n<p>project.config.json ———————– 项目配置</p>\n<h4 id=\"云开发环境\"><a href=\"#云开发环境\" class=\"headerlink\" title=\"#云开发环境\"></a><a href=\"#%E4%BA%91%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">#</a>云开发环境</h4><p>云开发可创建两个环境，建议一个为开发环境，一个为生产环境</p>\n<h4 id=\"开发前的准备\"><a href=\"#开发前的准备\" class=\"headerlink\" title=\"#开发前的准备\"></a><a href=\"#%E5%BC%80%E5%8F%91%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87\">#</a>开发前的准备</h4><p>开发工具 &gt; 右上角详情 &gt; 本地设置 &gt; 调试基础库 设置为最新版本</p>\n<p>app.js &gt; wx.cloud.init &gt; env 设置环境ID</p>\n<h4 id=\"project-config-json-文件说明\"><a href=\"#project-config-json-文件说明\" class=\"headerlink\" title=\"#project.config.json 文件说明\"></a><a href=\"#project-config-json-%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E\">#</a>project.config.json 文件说明</h4><p>miniprogramRoot 小程序前端代码目录</p>\n<p>cloudfunctionRoot 云函数代码目录</p>\n<h4 id=\"app-json\"><a href=\"#app-json\" class=\"headerlink\" title=\"#app.json\"></a><a href=\"#app-json\">#</a>app.json</h4><p>pages 设置页面 ，设置后会自动在pages目录下生成相应的目录和文件</p>\n<p>设置底部导航按钮：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-string\">&quot;tabBar&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;color&quot;</span>: <span class=\"hljs-string\">&quot;#474747&quot;</span>, <span class=\"hljs-comment\">// 文字颜色</span><br>    <span class=\"hljs-attr\">&quot;selectedColor&quot;</span>: <span class=\"hljs-string\">&quot;#d43c43&quot;</span>, <span class=\"hljs-comment\">// 文字选中颜色</span><br>    <span class=\"hljs-attr\">&quot;list&quot;</span>: [&#123; <span class=\"hljs-comment\">// 按钮列表，2-5项</span><br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/playlist/playlist&quot;</span>, <span class=\"hljs-comment\">// 按钮对应页面</span><br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;音乐&quot;</span>, <span class=\"hljs-comment\">// 文字</span><br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/music.png&quot;</span>, <span class=\"hljs-comment\">// 图标路径</span><br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/music-actived.png&quot;</span> <span class=\"hljs-comment\">// 选中图标的路径</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/blog/blog&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;发现&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/blog.png&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/blog-actived.png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;pagePath&quot;</span>: <span class=\"hljs-string\">&quot;pages/profile/profile&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;text&quot;</span>: <span class=\"hljs-string\">&quot;我的&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;iconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/profile.png&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;selectedIconPath&quot;</span>: <span class=\"hljs-string\">&quot;images/profile-actived.png&quot;</span><br>    &#125;]<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>图标来自于 <a href=\"https://www.iconfont.cn/\">https://www.iconfont.cn(opens new window)</a></p>\n<p>阿里巴巴图标库，包含矢量图标、字体图标、字体等</p>\n</blockquote>\n<h4 id=\"代码规范\"><a href=\"#代码规范\" class=\"headerlink\" title=\"#代码规范\"></a><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\">#</a>代码规范</h4><p>很多公司借鉴的代码规范：<a href=\"https://github.com/airbnb/javascript\">https://github.com/airbnb/javascript(opens new window)</a></p>\n<h4 id=\"《音乐》页面开发\"><a href=\"#《音乐》页面开发\" class=\"headerlink\" title=\"#《音乐》页面开发\"></a><a href=\"#%E3%80%8A%E9%9F%B3%E4%B9%90%E3%80%8B%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91\">#</a>《音乐》页面开发</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> <span class=\"hljs-comment\">&lt;!-- 轮播图组件 参数：indicator-dots 小圆点，autoplay 自动播放, interval 间隔时间，duration 动画时长 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper</span> <span class=\"hljs-attr\">indicator-dots</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">circular</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">interval</span>=<span class=\"hljs-string\">&quot;3000&quot;</span> <span class=\"hljs-attr\">duration</span>=<span class=\"hljs-string\">&quot;500&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;swiperImgUrls&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- 空节点 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">swiper-item</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item.url&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;widthFix&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper-item</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">swiper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"#自定义组件\"></a><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6\">#</a>自定义组件</h4><p><strong>创建组件</strong></p>\n<p>创建目录 components &gt; 组件目录名称 &gt; 右键 <code>新建Component</code></p>\n<h5 id=\"引入组件\"><a href=\"#引入组件\" class=\"headerlink\" title=\"#引入组件\"></a><a href=\"#%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6\">#</a><strong>引入组件</strong></h5><p>在page的json文件中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;usingComponents&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;x-playlist&quot;</span>:<span class=\"hljs-string\">&quot;/components/playlist/playlist&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在page的wxml中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>页面引入组件以及组件内部在引用子组件的方法是一样的，同样需要设置json文件。</strong></p>\n<h5 id=\"组件传值\"><a href=\"#组件传值\" class=\"headerlink\" title=\"#组件传值\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\">#</a><strong>组件传值</strong></h5><p>父组件中：在引入组件的时候自定义属性名称，并把数据传入子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 参数：playlist 自定义名称，传入组件的数据 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span> <span class=\"hljs-attr\">playlist</span>=<span class=\"hljs-string\">&quot;&#123;&#123;传入的数据&#125;&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>子组件中： 子组件的js文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 组件的属性列表</span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-attr\">properties</span>: &#123;<br>   <span class=\"hljs-attr\">playlist</span>:&#123; <span class=\"hljs-comment\">// 接收父组件传输的数据</span><br>     <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// 数据类型</span><br>   &#125;<br>  &#125;,<br><br><span class=\"hljs-comment\">//子组件的wxml文件可直接引入数据&#123;&#123;playlist&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"wx-key-的使用\"><a href=\"#wx-key-的使用\" class=\"headerlink\" title=\"#wx:key 的使用\"></a><a href=\"#wx-key-%E7%9A%84%E4%BD%BF%E7%94%A8\">#</a>wx:key 的使用</h4><p>key的值不建议使用index，因为当数据发生变化会dom结构产生变化时，使用index的地方不会随之变化。</p>\n<p>可以使用数据内部每项不一样的一个数值，如id</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;swiperImgUrls&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span> 这里url不需要双大括号，如使用index则需要&#123;&#123;&#125;&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item.url&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;widthFix&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;playlist-container&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">block</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;playlist&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;_id&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 参数：playlist 自定义名称，传入组件的数据 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">x-playlist</span> <span class=\"hljs-attr\">playlist</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">x-playlist</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">block</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"async-await-语法\"><a href=\"#async-await-语法\" class=\"headerlink\" title=\"#async/await 语法\"></a><a href=\"#async-await-%E8%AF%AD%E6%B3%95\">#</a>async/await 语法</h4><p>目前，在云函数里，由于 Node 版本最低是 8.9，因此是天然支持 async/await 语法的。而在小程序端则不然。在微信开发者工具里，以及 Android 端手机（浏览器内核是 QQ浏览器的 X5），async/await是天然支持的，但 iOS 端手机在较低版本则不支持，因此需要引入额外的 文件。</p>\n<p>可把这个 <a href=\"https://github.com/xiecheng328/miniprogram/blob/master/regenerator/runtime.js\">runtime.js (opens new window)</a>文件引用到有使用 async/await 的文件当中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 注意，必须命名为 regeneratorRuntime</span><br><span class=\"hljs-keyword\">import</span> regeneratorRuntime <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../utils/runtime.js&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云函数的使用\"><a href=\"#云函数的使用\" class=\"headerlink\" title=\"#云函数的使用\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\">#</a>云函数的使用</h4><p>cloudfunctions目录 右键 <code>新建 Node.js 云函数</code> &gt; 输入目录名 <code>getPlaylist</code></p>\n<p>在云函数中向第三方服务器发送请求要依赖第三方库</p>\n<p><strong>安装依赖包</strong></p>\n<p>云函数目录 <code>getPlaylist</code> 右键 <code>在终端打开</code> 打开命令行 输入命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm install --save request<br>npm install --save request-promise<br></code></pre></td></tr></table></figure>\n\n\n\n<p>github request-promise：<a href=\"https://github.com/request/request-promise\">https://github.com/request/request-promise(opens new window)</a></p>\n<p>然后写相应代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// 需安装依赖包</span><br><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">&#x27;http://musicapi.xiecheng.live/personalized&#x27;</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> playlist = <span class=\"hljs-keyword\">await</span> rp(URL).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(res).result<br>  &#125;)<br>  <span class=\"hljs-built_in\">console</span>.log(playlist)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>写完代码，云函数目录 <code>getPlaylist</code> 右键 <code>上传并部署：云端安装依赖（不上传node_modules）</code> 进行上传部署代码到云端，等待上传成功，打开云开发控制台即可看到已经上传的云函数，并可对云函数进行测试。</p>\n<h5 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"#数据库操作\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C\">#</a>数据库操作</h5><p>数据库&gt; 创建集合 &gt; playlist</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> db = cloud.database() <span class=\"hljs-comment\">// 初始化数据库,如果在小程序端初始化数据库需要在前面加wx.</span><br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// 需安装依赖包</span><br><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">&#x27;http://musicapi.xiecheng.live/personalized&#x27;</span> <span class=\"hljs-comment\">// 第三方服务器地址（老师从网易云获取的数据部署在其服务器，每天的数据会更新）</span><br><br><span class=\"hljs-keyword\">const</span> playlistCollection = db.collection(<span class=\"hljs-string\">&#x27;playlist&#x27;</span>) <span class=\"hljs-comment\">// 获取到数据库playlist集合</span><br><br><span class=\"hljs-keyword\">const</span> MAX_LIMIT = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">// 定义常量，获取数据库条数最大的限制</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 注：</span><br><span class=\"hljs-comment\">   * - 关于数据库的操作都是异步操作，都需添加await关键字</span><br><span class=\"hljs-comment\">   * - console.log 打印在云开发控制台 云函数测试内查看</span><br><span class=\"hljs-comment\">   * - 单次获取数据库数据有条数限制，云函数端最多获取100条，小程序端最多获取20条</span><br><span class=\"hljs-comment\">   */</span><br><br>  <span class=\"hljs-comment\">// const list = await playlistCollection.get() // 获取数据库集合的数据 （因为有条数限制，不直接用此方法）</span><br><br>  <span class=\"hljs-comment\">// 突破条数限制 （为了读取到全部数据然后与第三方服务器获取的数据进行对比去重）</span><br>  <span class=\"hljs-keyword\">const</span> countResult = <span class=\"hljs-keyword\">await</span> playlistCollection.count() <span class=\"hljs-comment\">// 获取数据总条数 返回为对象</span><br>  <span class=\"hljs-keyword\">const</span> total = countResult.total <span class=\"hljs-comment\">// 取得总条数</span><br>  <span class=\"hljs-keyword\">const</span> batchTimes = <span class=\"hljs-built_in\">Math</span>.ceil(total / MAX_LIMIT)<br>  <span class=\"hljs-keyword\">const</span> tasks = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; batchTimes; i++) &#123;<br>    <span class=\"hljs-keyword\">let</span> promise = playlistCollection.skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() <span class=\"hljs-comment\">// 从第 skip 条开始取，最多取 limit 条数据</span><br>    tasks.push(promise)<br>  &#125;<br>  <span class=\"hljs-keyword\">let</span> list = &#123;<br>    <span class=\"hljs-attr\">data</span>: []<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (tasks.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    list = (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(tasks)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// reduce数组方法 累积拼接</span><br>      <span class=\"hljs-keyword\">return</span> &#123;<br>        <span class=\"hljs-attr\">data</span>: acc.data.concat(cur.data)<br>      &#125;<br>    &#125;)<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 获取第三方服务器端数据</span><br>  <span class=\"hljs-keyword\">const</span> playlist = <span class=\"hljs-keyword\">await</span> rp(URL).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(res).result<br>  &#125;)<br><br>  <span class=\"hljs-comment\">// 数据库与服务器数据对比去重（数据已存在数据库的无需再重复添加）</span><br>  <span class=\"hljs-keyword\">const</span> newData = []<br>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len1 = playlist.length; i &lt; len1; i++) &#123;<br>    <span class=\"hljs-keyword\">let</span> flag = <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>, len2 = list.data.length; j &lt; len2; j++) &#123;<br>      <span class=\"hljs-keyword\">if</span>(playlist[i].id === list.data[j].id)&#123;<br>        flag = <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-keyword\">break</span><br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span>(flag)&#123;<br>      newData.push(playlist[i])<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 把数据插入数据库，需要单条插入</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = newData.length; i &lt; len; i++) &#123;<br>    <span class=\"hljs-keyword\">await</span> playlistCollection.add(&#123; <span class=\"hljs-comment\">// 给数据库集合添加数据</span><br>      <span class=\"hljs-attr\">data</span>: &#123;<br>        ...newData[i],<br>        <span class=\"hljs-attr\">createTime</span>: db.serverDate(), <span class=\"hljs-comment\">// db.serverDate() 获取服务器时间</span><br>      &#125;<br>    &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 数据添加成功</span><br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;数据添加成功&#x27;</span>)<br>    &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 失败</span><br>      <span class=\"hljs-built_in\">console</span>.error(err)<br>    &#125;)<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> newData.length <span class=\"hljs-comment\">// 插入多少条数据</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"查询数据库\"><a href=\"#查询数据库\" class=\"headerlink\" title=\"#查询数据库\"></a><a href=\"#%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>查询数据库</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//云函数中查询数据库的例子：</span><br><br><span class=\"hljs-comment\">// 云函数入口文件</span><br><span class=\"hljs-keyword\">const</span> cloud = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;wx-server-sdk&#x27;</span>)<br><br>cloud.init()<br><br><span class=\"hljs-keyword\">const</span> TcbRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;tcb-router&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> db = cloud.database() <span class=\"hljs-comment\">// 初始化数据库</span><br><span class=\"hljs-keyword\">const</span> blogCollection = db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>) <span class=\"hljs-comment\">// 博客的数据库集合</span><br><br><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> TcbRouter(&#123; event &#125;) <span class=\"hljs-comment\">// 初始化TcbRouter</span><br><br>  app.router(<span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-comment\">// skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序</span><br>    ctx.body =  <span class=\"hljs-keyword\">await</span> blogCollection.skip(event.start).limit(event.count)<br>    .orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>  &#125;)<br><br><br>  <span class=\"hljs-keyword\">return</span> app.serve() <span class=\"hljs-comment\">// 必需返回</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"云函数调试\"><a href=\"#云函数调试\" class=\"headerlink\" title=\"#云函数调试\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E8%B0%83%E8%AF%95\">#</a>云函数调试</h5><p>云控制台中可会云函数进行云端测试</p>\n<p>在小程序调用云函数后，可查看云函数<strong>日志</strong></p>\n<h4 id=\"定时触发云函数\"><a href=\"#定时触发云函数\" class=\"headerlink\" title=\"#定时触发云函数\"></a><a href=\"#%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91%E4%BA%91%E5%87%BD%E6%95%B0\">#</a>定时触发云函数</h4><p>如果云函数需要定时 / 定期执行，也就是定时触发，我们可以使用云函数定时触发器。配置了定时触发器的云函数，会在相应时间点被自动触发，函数的返回结果不会返回给调用方</p>\n<p>云函数目录下新建 config.json</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/triggers.html\">API(opens new window)</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;triggers&quot;</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;myTriggers&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;timer&quot;</span>,<br>      <span class=\"hljs-attr\">&quot;config&quot;</span>:<span class=\"hljs-string\">&quot;0 0 10,14,16,20 * * * *&quot;</span> <span class=\"hljs-comment\">//表示每天的10点、14点、16点、20点触发一次</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>编辑好触发器之后，要在云函数目录 &gt; 右键 &gt; <code>上传触发器</code></p>\n<h4 id=\"配置云函数超时时间\"><a href=\"#配置云函数超时时间\" class=\"headerlink\" title=\"#配置云函数超时时间\"></a><a href=\"#%E9%85%8D%E7%BD%AE%E4%BA%91%E5%87%BD%E6%95%B0%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4\">#</a>配置云函数超时时间</h4><p>当云函数比较复杂的时候，默认的超时时间3秒可能不能够满足需求，可以适当的设置更为合理的时间</p>\n<p>云开发控制台 &gt; 云函数 &gt; 配置 &gt; 超时时间</p>\n<h4 id=\"上拉加载与下拉刷新\"><a href=\"#上拉加载与下拉刷新\" class=\"headerlink\" title=\"#上拉加载与下拉刷新\"></a><a href=\"#%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E4%B8%8E%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0\">#</a>上拉加载与下拉刷新</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">page页面json中：<br><span class=\"hljs-string\">&quot;enablePullDownRefresh&quot;</span>: <span class=\"hljs-literal\">true</span><br><br><br>page页面js中有这两个函数：<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">onPullDownRefresh</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>      <span class=\"hljs-attr\">playlist</span>: []<br>    &#125;)<br>    <span class=\"hljs-built_in\">this</span>._getPlaylist()<br>  &#125;,<br><br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面上拉触底事件的处理函数</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">onReachBottom</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>._getPlaylist()<br>  &#125;,<br><br><br><br> 下拉刷新请求完数据后<br> wx.stopPullDownRefresh() <span class=\"hljs-comment\">// 停止下拉刷新动画</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"云函数路由优化tcb-router\"><a href=\"#云函数路由优化tcb-router\" class=\"headerlink\" title=\"#云函数路由优化tcb-router\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E8%B7%AF%E7%94%B1%E4%BC%98%E5%8C%96tcb-router\">#</a>云函数路由优化tcb-router</h4><p>一个用户在一个云环境只能创建50个云函数</p>\n<p>假如小程序非常复杂，50个云函数不能够满足业务需求怎么办？</p>\n<p>相似的请求归类到同一个云函数处理</p>\n<p>tcb-router是一个koa风格的云函数路由库</p>\n<p>通俗理解就是可以把很多个接口归类到同一个云函数内。</p>\n<p>github-tcb-router: <a href=\"https://github.com/TencentCloudBase/tcb-router\">https://github.com/TencentCloudBase/tcb-router(opens new window)</a></p>\n<p>koa洋葱模型…</p>\n<p>安装：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">在使用到tcb-router的云函数目录下打开命令行，输入命令进行安装<br>npm install --save tcb-router<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数的 index.js</span><br><span class=\"hljs-keyword\">const</span> TcbRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;router&#x27;</span>); <span class=\"hljs-comment\">// 必需</span><br><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, context</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> TcbRouter(&#123; event &#125;);<span class=\"hljs-comment\">// 必需</span><br><br>    <span class=\"hljs-comment\">// app.use 表示该中间件会适用于所有的路由(全局中间件) 非必需</span><br>    app.use(<span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123; <span class=\"hljs-comment\">// 这个中间件表示所有路由都会调用到，而路由中间件为单独调用</span><br>        ctx.data = &#123;&#125;; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        ctx.data.openId = event.userInfo.openId <span class=\"hljs-comment\">// 这里获取到的openId将分布到所有路由</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为数组表示，该中间件适用于 user 和 timer 两个路由</span><br>    app.router([<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-string\">&#x27;timer&#x27;</span>], <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.company = <span class=\"hljs-string\">&#x27;Tencent&#x27;</span>; <span class=\"hljs-comment\">// 这里获取到的数据将分布到 user 和 timer 两个路由</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为字符串，该中间件只适用于 user 路由</span><br>    app.router(<span class=\"hljs-string\">&#x27;user&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.name = <span class=\"hljs-string\">&#x27;heyli&#x27;</span>;  <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.sex = <span class=\"hljs-string\">&#x27;male&#x27;</span>; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>        ctx.data.city = <span class=\"hljs-string\">&#x27;Foshan&#x27;</span>; <span class=\"hljs-comment\">// 获取要传给小程序端的数据</span><br>        <span class=\"hljs-comment\">// ctx.body 返回数据到小程序端</span><br>        ctx.body = &#123; <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">data</span>: ctx.data&#125;;  <span class=\"hljs-comment\">// 要传给小程序端的数据</span><br>    &#125;);<br><br>    <span class=\"hljs-comment\">// 路由为字符串，该中间件只适用于 timer 路由</span><br>    app.router(<span class=\"hljs-string\">&#x27;timer&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.name = <span class=\"hljs-string\">&#x27;flytam&#x27;</span>;<br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>        ctx.data.sex = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> &#123;<br>        <span class=\"hljs-comment\">// 等待500ms，再执行下一中间件</span><br>        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            resolve(<span class=\"hljs-string\">&#x27;male&#x27;</span>);<br>        &#125;, <span class=\"hljs-number\">500</span>);<br>        &#125;);<br>        <span class=\"hljs-keyword\">await</span> next(); <span class=\"hljs-comment\">// 执行下一中间件</span><br>    &#125;, <span class=\"hljs-keyword\">async</span> (ctx)=&gt;  &#123;<br>        ctx.data.city = <span class=\"hljs-string\">&#x27;Taishan&#x27;</span>;<br><br>        <span class=\"hljs-comment\">// ctx.body 返回数据到小程序端</span><br>        ctx.body = &#123; <span class=\"hljs-attr\">code</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">data</span>: ctx.data &#125;;<br>    &#125;);<br><br>    <span class=\"hljs-keyword\">return</span> app.serve(); <span class=\"hljs-comment\">// 必需</span><br><br>&#125;<br><br><br>小程序端：<br><br><span class=\"hljs-comment\">// 调用名为 router 的云函数，路由名为 user</span><br>wx.cloud.callFunction(&#123;<br>    <span class=\"hljs-comment\">// 要调用的云函数名称</span><br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;router&quot;</span>,<br>    <span class=\"hljs-comment\">// 传递给云函数的参数</span><br>    <span class=\"hljs-attr\">data</span>: &#123;<br>        <span class=\"hljs-attr\">$url</span>: <span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-comment\">// 要调用的路由的路径，传入准确路径或者通配符*</span><br>        <span class=\"hljs-attr\">other</span>: <span class=\"hljs-string\">&quot;xxx&quot;</span><br>    &#125;<br>&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(res)<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>上面tcb-router代码会按照洋葱模型执行，即先从上往下逐个进入中间件，再从下往上逐个退出中间件。</p>\n<h4 id=\"本地存储（缓存）\"><a href=\"#本地存储（缓存）\" class=\"headerlink\" title=\"#本地存储（缓存）\"></a><a href=\"#%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8-%E7%BC%93%E5%AD%98\">#</a>本地存储（缓存）</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 存储：</span><br>wx.setStorageSync(key, data) <span class=\"hljs-comment\">// 同步存储（存储成功再继续下一步操作）</span><br>wx.setStorage(key, data) <span class=\"hljs-comment\">// 异步存储（即使存储没成功也会执行下一步代码）、</span><br><br><span class=\"hljs-comment\">// 读取：</span><br>wx.getStorageSync(key) <span class=\"hljs-comment\">// 同步 （读取到数据在进行下一步操作）</span><br>wx.setStorage(key) <span class=\"hljs-comment\">// 异步</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"api设置title\"><a href=\"#api设置title\" class=\"headerlink\" title=\"#api设置title\"></a><a href=\"#api%E8%AE%BE%E7%BD%AEtitle\">#</a>api设置title</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.setNavigationBarTitle(&#123;<br>      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"背景播放音\"><a href=\"#背景播放音\" class=\"headerlink\" title=\"#背景播放音\"></a><a href=\"#%E8%83%8C%E6%99%AF%E6%92%AD%E6%94%BE%E9%9F%B3\">#</a>背景播放音</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/background-audio/BackgroundAudioManager.html\">BackgroundAudioManager (opens new window)</a>全局唯一的背景音频管理器</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-comment\">// 需要在app.json配置，才能使用后台音乐播放的能力</span><br><br><span class=\"hljs-string\">&quot;requiredBackgroundModes&quot;</span>: [<span class=\"hljs-string\">&quot;audio&quot;</span>, <span class=\"hljs-string\">&quot;location&quot;</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取全局唯一的背景音频管理器</span><br><span class=\"hljs-keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager()<br><br><br>backgroundAudioManager.src = 音频链接<br>backgroundAudioManager.title = 音频标题<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"createSelectorQuery查询节点信息\"><a href=\"#createSelectorQuery查询节点信息\" class=\"headerlink\" title=\"#createSelectorQuery查询节点信息\"></a><a href=\"#createselectorquery%E6%9F%A5%E8%AF%A2%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AF\">#</a>createSelectorQuery查询节点信息</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html\">createSelectorQuery (opens new window)</a>小程序的方法，用于查询节点等操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> query = wx.createSelectorQuery()<br>query.select(<span class=\"hljs-string\">&#x27;#the-id&#x27;</span>).boundingClientRect() <span class=\"hljs-comment\">// 节点的布局信息</span><br>query.selectViewport().scrollOffset()<br>query.exec(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>  res[<span class=\"hljs-number\">0</span>].top       <span class=\"hljs-comment\">// #the-id节点的上边界坐标</span><br>  res[<span class=\"hljs-number\">1</span>].scrollTop <span class=\"hljs-comment\">// 显示区域的竖直滚动位置</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"组件内的方法\"><a href=\"#组件内的方法\" class=\"headerlink\" title=\"#组件内的方法\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E6%96%B9%E6%B3%95\">#</a>组件内的方法</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/api/Component.html\">Component(Object object)(opens new window)</a></p>\n<h4 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"#组件生命周期\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">#</a>组件生命周期</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/lifetimes.html\">lifetimes(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 生命周期</span><br><span class=\"hljs-attr\">lifetimes</span>: &#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">ready</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 在组件在视图层布局完成后执行</span><br>   \t ...<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"组件所在页面的生命周期\"><a href=\"#组件所在页面的生命周期\" class=\"headerlink\" title=\"#组件所在页面的生命周期\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E6%89%80%E5%9C%A8%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">#</a>组件所在页面的生命周期</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">Component(&#123;<br>  <span class=\"hljs-attr\">pageLifetimes</span>: &#123;<br>    <span class=\"hljs-attr\">show</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面被展示</span><br>    &#125;,<br>    <span class=\"hljs-attr\">hide</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面被隐藏</span><br>    &#125;,<br>    <span class=\"hljs-attr\">resize</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">size</span>) </span>&#123;<br>      <span class=\"hljs-comment\">// 页面尺寸变化</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"对数据的监听\"><a href=\"#对数据的监听\" class=\"headerlink\" title=\"对数据的监听\"></a>对数据的监听</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/observer.html\">observers(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">observers: &#123; <span class=\"hljs-comment\">// 对数据的监听(数据初次加载完成也会执行)</span><br>    监听的数据对象(newData)&#123;<br>      <span class=\"hljs-built_in\">console</span>.log(newData)<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"子组件自定义事件传递给父组件\"><a href=\"#子组件自定义事件传递给父组件\" class=\"headerlink\" title=\"#子组件自定义事件传递给父组件\"></a><a href=\"#%E5%AD%90%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E7%BB%99%E7%88%B6%E7%BB%84%E4%BB%B6\">#</a>子组件自定义事件传递给父组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">子组件js：<br>// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）<br>this.triggerEvent(&#x27;自定义事件名&#x27;, 参数x)<br><br><br>父组件wxml：<br>&lt;子组件标签 bind:自定义事件名=&quot;执行的事件&quot; /&gt;<br><br>父组件js：<br>执行的事件(event) &#123;<br>\tconsole.log(event.detil.参数)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"父组件自定义事件传递给子组件\"><a href=\"#父组件自定义事件传递给子组件\" class=\"headerlink\" title=\"#父组件自定义事件传递给子组件\"></a><a href=\"#%E7%88%B6%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6\">#</a>父组件自定义事件传递给子组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件wxml：<br>&lt;子组件标签 class=&quot;子组件类名&quot;&gt;<br><br>父组件JS：<br>// 选择组件，并传入事件和参数<br>this.selectComponent(&#x27;.子组件类名&#x27;).自定义事件名(传入参数)<br><br>子组件js：<br>methods: &#123;<br>\t自定义事件名(参数x)&#123;<br>\t\tconsole.log(参数x)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"兄弟组件间传递事件和传值\"><a href=\"#兄弟组件间传递事件和传值\" class=\"headerlink\" title=\"#兄弟组件间传递事件和传值\"></a><a href=\"#%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E9%80%92%E4%BA%8B%E4%BB%B6%E5%92%8C%E4%BC%A0%E5%80%BC\">#</a>兄弟组件间传递事件和传值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">例子：子组件1向子组件2传递参数<br><br>父组件wxml中：<br>&lt;子组件标签1 bind:自定义事件名1=&quot;执行的事件&quot;&gt;<br>&lt;子组件标签2 class=&quot;子组件2类名&quot;&gt;<br><br>父组件js：<br>执行的事件(event) &#123;<br>\tthis.selectComponent(&#x27;.子组件2类名&#x27;).自定义事件名2(event.detil.参数x) // 向子组件2传值<br>&#125;<br><br>子组件1js：<br>// 触发自定义事件 向父组件传值， 参数x（可选，传递给父组件的参数，可以是对象或其他）<br>this.triggerEvent(&#x27;自定义事件名1&#x27;, 参数x)<br><br><br><br>子组件2js：<br>methods: &#123;<br>\t自定义事件名2(参数x)&#123;<br>\t\tconsole.log(参数x)  // 接收父组件传入的值<br>\t&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取手机信息\"><a href=\"#获取手机信息\" class=\"headerlink\" title=\"#获取手机信息\"></a><a href=\"#%E8%8E%B7%E5%8F%96%E6%89%8B%E6%9C%BA%E4%BF%A1%E6%81%AF\">#</a>获取手机信息</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/base/system/system-info/wx.getSystemInfo.html\">wx.getSystemInfo(Object object)(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.getSystemInfo(&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>\t\t<span class=\"hljs-built_in\">console</span>.log(res) <span class=\"hljs-comment\">//手机信息</span><br>\t&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"滚动组件\"><a href=\"#滚动组件\" class=\"headerlink\" title=\"#滚动组件\"></a><a href=\"#%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6\">#</a>滚动组件</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html\">scroll-view(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scroll-view</span> <span class=\"hljs-attr\">scroll-y</span> <span class=\"hljs-attr\">scroll-top</span>=<span class=\"hljs-string\">&quot;&#123;&#123;scrollTop&#125;&#125;&quot;</span> <span class=\"hljs-attr\">scroll-with-animation</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全局属性、方法（类似vuex）\"><a href=\"#全局属性、方法（类似vuex）\" class=\"headerlink\" title=\"#全局属性、方法（类似vuex）\"></a><a href=\"#%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7%E3%80%81%E6%96%B9%E6%B3%95-%E7%B1%BB%E4%BC%BCvuex\">#</a>全局属性、方法（类似vuex）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">在app.js中：<br><br>onLaunch: function () &#123;<br>\tthis.globalData = &#123;// 设置全局属性、方法<br>\t\ttest: 0<br>\t&#125;<br>&#125;,<br>setGlobalData(dataItem, val) &#123; // 设置全局属性<br>\tthis.globalData[dataItem] = val<br>&#125;,<br>getGlobalData(dataItem) &#123; // 获取全局属性<br>\treturn this.globalData[dataItem]<br>&#125;<br><br><br>在需要调用的页面js中：<br>const app = getApp() // 在最顶部先调用app方法<br><br>// 设置全局属性<br>app.setGlobalData(&#x27;test&#x27;, 1)<br><br>// 获取全局属性<br>app.getGlobalData(&#x27;test&#x27;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"消息提示框\"><a href=\"#消息提示框\" class=\"headerlink\" title=\"#消息提示框\"></a><a href=\"#%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E6%A1%86\">#</a>消息提示框</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html\">showToast(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.showToast(&#123;<br>  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;成功&#x27;</span>,<br>  <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;success&#x27;</span>, <span class=\"hljs-comment\">//图标： success 成功、loading 加载中、none 无</span><br>  <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">2000</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"《发现》页面\"><a href=\"#《发现》页面\" class=\"headerlink\" title=\"#《发现》页面\"></a><a href=\"#%E3%80%8A%E5%8F%91%E7%8E%B0%E3%80%8B%E9%A1%B5%E9%9D%A2\">#</a>《发现》页面</h2><h4 id=\"调用组件外部的样式\"><a href=\"#调用组件外部的样式\" class=\"headerlink\" title=\"#调用组件外部的样式\"></a><a href=\"#%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%E5%A4%96%E9%83%A8%E7%9A%84%E6%A0%B7%E5%BC%8F\">#</a>调用组件外部的样式</h4><p>components内部的组件无法直接调用外部的样式。可通过以下方式调用组件外部样式：</p>\n<p><strong>方法一：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件wxml：<br>&lt;!-- iconfont 和 icon-sousuo 是传入组件内部的样式名称，iconfont（自定义名称）=&quot;iconfont（外部样式文件中定义的样式名）&quot;  --&gt;<br>&lt;x-search iconfont=&quot;iconfont&quot; icon-sousuo=&quot;icon-sousuo&quot;/&gt;<br><br><br>子组件js:<br>// 组件外部样式<br>  externalClasses: [<br>    &#x27;iconfont&#x27;, // 对应的是上面等号前面的名称<br>    &#x27;icon-sousuo&#x27;<br>  ],<br><br> 子组件wxml： 即可实现调用组件外的样式<br> &lt;i class=&quot;iconfont icon-sousuo&quot; /&gt;<br><br><br>  注意：如果想在组件内部再次修改样式，不能够引用外部传进来的class名称进行修改，可以另起一个class名称进行修改。<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>方法二：</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html#%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB\">消除样式隔离(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">组件内:<br>Component(&#123;<br>  <span class=\"hljs-attr\">options</span>: &#123;<br>    <span class=\"hljs-attr\">styleIsolation</span>: <span class=\"hljs-string\">&#x27;apply-shared&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"组件插槽slot\"><a href=\"#组件插槽slot\" class=\"headerlink\" title=\"#组件插槽slot\"></a><a href=\"#%E7%BB%84%E4%BB%B6%E6%8F%92%E6%A7%BDslot\">#</a>组件插槽slot</h4><p><strong>单个插槽</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件调用传入插槽内容:<br>&lt;组件标签&gt;<br>    &lt;view&gt;<br>      &lt;view&gt;插槽内容&lt;/view&gt;<br>      &lt;view&gt;插槽内容&lt;/view&gt;<br>    &lt;/view&gt;<br>&lt;/组件标签&gt;<br><br> 组件内部定义slot标签:<br> &lt;view&gt;<br>    &lt;!-- slot插槽 --&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>如果需要实现多个插槽</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">父组件调用传入插槽内容:<br>&lt;组件标签&gt;<br>    &lt;view slot=&quot;slot2&quot;&gt;<br>      &lt;view&gt;插槽1内容&lt;/view&gt;<br>      &lt;view&gt;插槽1内容&lt;/view&gt;<br>    &lt;/view&gt;<br><br>     &lt;view slot=&quot;slot1&quot;&gt;<br>      &lt;view&gt;插槽2内容&lt;/view&gt;<br>      &lt;view&gt;插槽2内容&lt;/view&gt;<br>    &lt;/view&gt;<br>&lt;/组件标签&gt;<br><br>组件js :<br>options: &#123;// 设置<br>    multipleSlots: true // 打开多个插槽功能<br>&#125;,<br><br><br>组件内部定义slot标签:<br>&lt;view&gt;<br>    &lt;!-- slot插槽 具名插槽--&gt;<br>    &lt;slot name=&quot;slot1&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;slot2&quot;&gt;&lt;/slot&gt;<br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"判断用户授权\"><a href=\"#判断用户授权\" class=\"headerlink\" title=\"#判断用户授权\"></a><a href=\"#%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83\">#</a>判断用户授权</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/authorize.html\">授权(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 判断用户是否授权</span><br>    wx.getSetting(&#123;<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>        <span class=\"hljs-keyword\">if</span> (res.authSetting[<span class=\"hljs-string\">&#x27;scope.userInfo&#x27;</span>]) &#123; <span class=\"hljs-comment\">// 已授权</span><br>         wx.getUserInfo(&#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>           <span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span> &#123;<br>             <span class=\"hljs-built_in\">console</span>.log(res)<br>           &#125;<br>         &#125;)<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 未授权</span><br><br>        &#125;<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"button的开发能力（获取用户信息）1\"><a href=\"#button的开发能力（获取用户信息）1\" class=\"headerlink\" title=\"#button的开发能力（获取用户信息）1\"></a><a href=\"#button%E7%9A%84%E5%BC%80%E5%8F%91%E8%83%BD%E5%8A%9B-%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF-1\">#</a>button的开发能力（获取用户信息）1</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;login&quot;</span><br>    open-type=<span class=\"hljs-string\">&quot;getUserInfo&quot;</span><br>    bindgetuserinfo=<span class=\"hljs-string\">&quot;onGetUserInfo&quot;</span>     <span class=\"hljs-comment\">// bindgetuserinfo 为固定的</span><br>&gt;<br>\t获取微信授权信息<br>&lt;/button&gt;<br><br><br>bindgetuserinfo 事件会询问用户是否同意授权<br><br><br>js中：<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">onGetUserInfo</span>(<span class=\"hljs-params\">event</span>)</span> &#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>      <span class=\"hljs-keyword\">const</span> userInfo = event.detail.userInfo<br>      <span class=\"hljs-keyword\">if</span> (userInfo) &#123; <span class=\"hljs-comment\">// 用户允许授权</span><br>        <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>          <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">false</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginSuccess&#x27;</span>, userInfo) <span class=\"hljs-comment\">// 给父组件传用户数据</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 用户拒绝授权</span><br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginFail&#x27;</span>)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"原生组件\"><a href=\"#原生组件\" class=\"headerlink\" title=\"#原生组件\"></a><a href=\"#%E5%8E%9F%E7%94%9F%E7%BB%84%E4%BB%B6\">#</a>原生组件</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html\">原生组件(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">auto-focus 自动获取焦点<br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;分享新鲜事...&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;140&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">auto-focus</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">&quot;onInput&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindfocus</span>=<span class=\"hljs-string\">&quot;onFocus&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">bindblur</span>=<span class=\"hljs-string\">&quot;onBlur&quot;</span></span><br><span class=\"hljs-tag\">  &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"选择上传图片\"><a href=\"#选择上传图片\" class=\"headerlink\" title=\"#选择上传图片\"></a><a href=\"#%E9%80%89%E6%8B%A9%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87\">#</a>选择上传图片</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.chooseImage.html\">上传图片(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> max = <span class=\"hljs-number\">9</span> - <span class=\"hljs-built_in\">this</span>.data.images.length <span class=\"hljs-comment\">// 还能再选几张图片</span><br>wx.chooseImage(&#123;<br>      <span class=\"hljs-attr\">count</span>: max, <span class=\"hljs-comment\">// 还能再选几张图片</span><br>      <span class=\"hljs-attr\">sizeType</span>: [<span class=\"hljs-string\">&#x27;original&#x27;</span>, <span class=\"hljs-string\">&#x27;compressed&#x27;</span>], <span class=\"hljs-comment\">// 初始值 and 压缩过的</span><br>      <span class=\"hljs-attr\">sourceType</span>: [<span class=\"hljs-string\">&#x27;album&#x27;</span>, <span class=\"hljs-string\">&#x27;camera&#x27;</span>], <span class=\"hljs-comment\">// 手机相册选择 and 拍照选择</span><br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 箭头函数改变this指向</span><br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>      &#125;,<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"#图片裁剪\"></a><a href=\"#%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA\">#</a>图片裁剪</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">图片裁剪(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- mode 图片裁剪 aspectFill 保证短边完整显示 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;image&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class=\"hljs-attr\">mode</span>=<span class=\"hljs-string\">&quot;aspectFill&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"获取标签自定义属性data-（删除图片的实现）\"><a href=\"#获取标签自定义属性data-（删除图片的实现）\" class=\"headerlink\" title=\"#获取标签自定义属性data-* （删除图片的实现）\"></a><a href=\"#%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7data-%E5%88%A0%E9%99%A4%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0\">#</a>获取标签自定义属性data-* （删除图片的实现）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">&lt;!-- 显示图片 --&gt;<br>    &lt;block wx:for=&quot;&#123;&#123;images&#125;&#125;&quot; wx:key=&quot;*this&quot;&gt;<br>      &lt;view class=&quot;image-wrap&quot;&gt;<br>        &lt;!-- mode 图片裁剪 aspectFill 保证短边完整显示 --&gt;<br>        &lt;image class=&quot;image&quot; src=&quot;&#123;&#123;item&#125;&#125;&quot; mode=&quot;aspectFill&quot;&gt;&lt;/image&gt;<br>        &lt;icon class=&quot;iconfont icon-shanchu&quot; bindtap=&quot;onDelImage&quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;/icon&gt;<br>      &lt;/view&gt;<br>    &lt;/block&gt;<br><br><br>    // 删除图片<br>  onDelImage(event) &#123;<br>  \t// event.target.dataset.index 获取标签属性data-index的值<br>    this.data.images.splice(event.target.dataset.index, 1) // splice会改变原有数组<br>    this.setData(&#123;<br>      images: this.data.images<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全屏预览图片-点击图片放大预览\"><a href=\"#全屏预览图片-点击图片放大预览\" class=\"headerlink\" title=\"#)全屏预览图片(点击图片放大预览)\"></a><a href=\"#%E5%85%A8%E5%B1%8F%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87-%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%A2%84%E8%A7%88\">#</a>)全屏预览图片(点击图片放大预览)</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media/image/wx.previewImage.html\">全屏预览图片(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 全屏预览图片</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">onPreviewImage</span>(<span class=\"hljs-params\">event</span>)</span> &#123;<br>    wx.previewImage(&#123;<br>      <span class=\"hljs-attr\">urls</span>: <span class=\"hljs-built_in\">this</span>.data.images, <span class=\"hljs-comment\">// 图片地址列表</span><br>      <span class=\"hljs-attr\">current</span>: event.target.dataset.imgsrc <span class=\"hljs-comment\">// 当前预览图片地址</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"文件上传云存储（发布博客例子）\"><a href=\"#文件上传云存储（发布博客例子）\" class=\"headerlink\" title=\"#文件上传云存储（发布博客例子）\"></a><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BA%91%E5%AD%98%E5%82%A8-%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E4%BE%8B%E5%AD%90\">#</a>文件上传云存储（发布博客例子）</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/storage/uploadFile.html\">文件上传云存储(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//  结合&#x27;发布&#x27;的例子：</span><br> <span class=\"hljs-function\"><span class=\"hljs-title\">send</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>   <span class=\"hljs-comment\">// 验证是否输入内容</span><br>   <span class=\"hljs-keyword\">if</span> (content.trim() === <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">// trim() 去掉字符串空格</span><br>     wx.showToast(&#123;<br>       <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;请输入内容&#x27;</span>,<br>       <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span><br>     &#125;)<br>     <span class=\"hljs-keyword\">return</span><br>   &#125;<br>   wx.showLoading(&#123;<br>     <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;发布中&#x27;</span>,<br>   &#125;)<br>   <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 实现思路及步骤：</span><br><span class=\"hljs-comment\">    * 1、图片 -&gt; 上传 云存储  -&gt; 生成 图片fineID（云文件ID）</span><br><span class=\"hljs-comment\">    * 2、数据 -&gt; 录入 云数据库</span><br><span class=\"hljs-comment\">    *    数据包括：文字内容、图片fineID、昵称、头像、发布时间、openId(用户唯一标识，在插入数据库是系统会自动添加_openId字段，不需要另外插入)</span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">let</span> promiseArr = []<br>   <span class=\"hljs-keyword\">let</span> fileIds = []<br>   <span class=\"hljs-comment\">// 图片上传云存储</span><br>   <span class=\"hljs-built_in\">this</span>.data.images.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>     <span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> &#123;<br>       <span class=\"hljs-keyword\">let</span> suffix = <span class=\"hljs-regexp\">/\\.\\w+$/</span>.exec(item)[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// 文件扩展名(文件后缀)</span><br>       wx.cloud.uploadFile(&#123; <span class=\"hljs-comment\">// 每次只能上传一个文件</span><br>         <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">          * cloudPath 云路径。如果路径相同，后上传的文件会覆盖原文件</span><br><span class=\"hljs-comment\">          * 路径：blog/云存储中的文件夹 + Date.now()时间戳 + Math.random()*1000000随机数 + 文件后缀</span><br><span class=\"hljs-comment\">          */</span><br>         <span class=\"hljs-attr\">cloudPath</span>: <span class=\"hljs-string\">&#x27;blog/&#x27;</span> + <span class=\"hljs-built_in\">Date</span>.now() + <span class=\"hljs-string\">&#x27;-&#x27;</span> + <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">1000000</span> + suffix,<br>         <span class=\"hljs-attr\">filePath</span>: item, <span class=\"hljs-comment\">// 文件本地临时路径</span><br>         <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>           fileIds.push(res.fileID)<br>           resolve()<br>         &#125;,<br>         <span class=\"hljs-attr\">fail</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>           <span class=\"hljs-built_in\">console</span>.error(err)<br>           reject()<br>         &#125;<br>       &#125;)<br>     &#125;)<br>     promiseArr.push(p)<br>   &#125;)<br><br>   <span class=\"hljs-comment\">// 存入云数据库</span><br>   <span class=\"hljs-built_in\">Promise</span>.all(promiseArr).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>     db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>).add(&#123;<br>       <span class=\"hljs-attr\">data</span>: &#123;<br>         ...userInfo, <span class=\"hljs-comment\">// 昵称、头像</span><br>         content, <span class=\"hljs-comment\">// 内容</span><br>         <span class=\"hljs-attr\">img</span>: fileIds, <span class=\"hljs-comment\">// 图片fileID列表</span><br>         <span class=\"hljs-attr\">createTime</span>: db.serverDate() <span class=\"hljs-comment\">// 创建时间，取服务端时间</span><br>       &#125;<br>     &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>       wx.hideLoading()<br>       wx.showToast(&#123;<br>         <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;发布成功&#x27;</span>,<br>       &#125;)<br>       <span class=\"hljs-comment\">// 返回博客页面，并刷新</span><br>       wx.navigateBack()<br><br>     &#125;)<br>   &#125;).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>     wx.hideLoading()<br>     wx.showToast(&#123;<br>       <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;抱歉，发布失败&#x27;</span>,<br>       <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-string\">&#x27;none&#x27;</span><br>     &#125;)<br>   &#125;)<br> &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"js模块化-（时间格式化）\"><a href=\"#js模块化-（时间格式化）\" class=\"headerlink\" title=\"#js模块化 （时间格式化）\"></a><a href=\"#js%E6%A8%A1%E5%9D%97%E5%8C%96-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96\">#</a>js模块化 （时间格式化）</h4><p>在目录utils 中新建formatTime.js文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 时间格式化 模块封装</span><br><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">date</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// date 数据格式为 date</span><br>  <span class=\"hljs-keyword\">let</span> fmt = <span class=\"hljs-string\">&#x27;yyyy-MM-dd hh:mm:ss&#x27;</span> <span class=\"hljs-comment\">// 预定格式</span><br>  <span class=\"hljs-keyword\">const</span> o = &#123;<br>    <span class=\"hljs-comment\">// + 正则中的1个或多个</span><br>    <span class=\"hljs-string\">&#x27;M+&#x27;</span>: date.getMonth() + <span class=\"hljs-number\">1</span>,<br>    <span class=\"hljs-string\">&#x27;d+&#x27;</span>: date.getDate(),<br>    <span class=\"hljs-string\">&#x27;h+&#x27;</span>: date.getHours(),<br>    <span class=\"hljs-string\">&#x27;m+&#x27;</span>: date.getMinutes(),<br>    <span class=\"hljs-string\">&#x27;s+&#x27;</span>: date.getSeconds()<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/(y+)/</span>.test(fmt)) &#123;<br>    <span class=\"hljs-comment\">// $1 表示正则中的第一个，即(y+)</span><br>    fmt = fmt.replace(<span class=\"hljs-built_in\">RegExp</span>.$1, date.getFullYear()) <span class=\"hljs-comment\">// replace 替换</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> o) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">&#x27;(&#x27;</span>+ k +<span class=\"hljs-string\">&#x27;)&#x27;</span>).test(fmt)) &#123;<br>      fmt = fmt.replace(<span class=\"hljs-built_in\">RegExp</span>.$1, o[k].toString().length === <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">&#x27;0&#x27;</span> + o[k] : o[k])<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> fmt<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>在组件引入js模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> formatTime <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../utils/formatTime.js&#x27;</span><br><br>使用：<br>formatTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Aug 28 2019 16:23:06 GMT+0800 (中国标准时间)&#x27;</span>))<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"阻止事件冒泡-1\"><a href=\"#阻止事件冒泡-1\" class=\"headerlink\" title=\"#阻止事件冒泡\"></a><a href=\"#%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1-2\">#</a>阻止事件冒泡</h4><p><code>bind</code> 和 <code>catch</code> 都可以绑定事件，它们的区别是 <code>bind</code> 有事件冒泡，而 <code>catch</code> 没有</p>\n<h4 id=\"返回上一个页面并执行方法\"><a href=\"#返回上一个页面并执行方法\" class=\"headerlink\" title=\"#返回上一个页面并执行方法\"></a><a href=\"#%E8%BF%94%E5%9B%9E%E4%B8%8A%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E5%B9%B6%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95\">#</a>返回上一个页面并执行方法</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateBack.html\">API(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 返回博客页面，并刷新</span><br>wx.navigateBack()<br><span class=\"hljs-keyword\">const</span> pages = getCurrentPages() <span class=\"hljs-comment\">// 获取当前页面栈</span><br><span class=\"hljs-keyword\">const</span> prevPage = pages[pages.length - <span class=\"hljs-number\">2</span>]  <span class=\"hljs-comment\">// 取到上一个页面</span><br>prevPage.onPullDownRefresh() <span class=\"hljs-comment\">// 执行上一个页面的方法 onPullDownRefresh</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"图片懒加载\"><a href=\"#图片懒加载\" class=\"headerlink\" title=\"#图片懒加载\"></a><a href=\"#%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD\">#</a>图片懒加载</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/image.html\">API(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">给image标签设置 lazy-load 为 true<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">image</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;&#123;item&#125;&#125;&quot;</span> <span class=\"hljs-attr\">lazy-load</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">image</span>&gt;</span><br><br>.img &#123;<br>  background: #eee;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>懒加载占位图可以给image设置背景图或背景色</strong></p>\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"#模糊查询\"></a><a href=\"#%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2\">#</a>模糊查询</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取博客列表</span><br>  app.router(<span class=\"hljs-string\">&#x27;blogList&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">const</span> keyword = event.keyword <span class=\"hljs-comment\">// 搜索关键字 调用接口时传递来的数据</span><br>    <span class=\"hljs-keyword\">let</span> w = &#123;&#125;<br>    <span class=\"hljs-keyword\">if</span> (keyword.trim() != <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;<br>      w = &#123;<br>        <span class=\"hljs-attr\">content</span>: db.RegExp(&#123; <span class=\"hljs-comment\">// 正则</span><br>          <span class=\"hljs-attr\">regexp</span>: keyword,<br>          <span class=\"hljs-attr\">options</span>: <span class=\"hljs-string\">&#x27;i&#x27;</span> <span class=\"hljs-comment\">// i表示忽略大小写</span><br>        &#125;)<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// where查询条件 skip 从第几条开始查，limit 查几条数据，orderBy(排序字段，排序方式) 排序，排序方式desc降序/asc升序</span><br>    ctx.body =  <span class=\"hljs-keyword\">await</span> blogCollection.where(w).skip(event.start).limit(event.count)<br>    .orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>  &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"提升模糊查询的效率-（添加索引，对数据量大的查询效果明显）\"><a href=\"#提升模糊查询的效率-（添加索引，对数据量大的查询效果明显）\" class=\"headerlink\" title=\"#提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）\"></a><a href=\"#%E6%8F%90%E5%8D%87%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%95%88%E7%8E%87-%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95-%E5%AF%B9%E6%95%B0%E6%8D%AE%E9%87%8F%E5%A4%A7%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%95%88%E6%9E%9C%E6%98%8E%E6%98%BE\">#</a>提升模糊查询的效率 （添加索引，对数据量大的查询效果明显）</h4><p>云开发控制台 &gt; 数据库相应的集合 &gt; 索引管理 &gt; 添加索引 &gt; 输入自定义索引名称、该字段的值是否唯一、被查询的字段名、升序/降序 &gt; ok</p>\n<h4 id=\"小程序端调用云数据库\"><a href=\"#小程序端调用云数据库\" class=\"headerlink\" title=\"#小程序端调用云数据库\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AB%AF%E8%B0%83%E7%94%A8%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>小程序端调用云数据库</h4><p>一般调用云数据库的操作都写在云函数内，其实小程序端也可以对数据库进行操作。</p>\n<p>小程序端一次最多只能查询20条数据，云函数端最多可查询100条数据，可使用多次查询拼接的方式突破限制。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 小程序端调用云数据库示例</span><br>    <span class=\"hljs-keyword\">const</span> db = wx.cloud.database() <span class=\"hljs-comment\">// 初始化数据库</span><br>    db.collection(<span class=\"hljs-string\">&#x27;blog&#x27;</span>).orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>,<span class=\"hljs-string\">&#x27;deac&#x27;</span>).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-built_in\">console</span>.log(res)<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云数据库权限管理-1\"><a href=\"#云数据库权限管理-1\" class=\"headerlink\" title=\"#云数据库权限管理\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-2\">#</a>云数据库权限管理</h4><p><strong>注意：云控制台和服务端（云函数）始终有所有数据读写权限，</strong></p>\n<p><strong>但权限的管理仅对小程序端发起的请求有效。</strong></p>\n<ul>\n<li>仅创建者可写，所有人可读 （适合于文章）</li>\n<li>仅创建者可读写 (适用于私密内容)</li>\n<li>仅管理端可写，所有人可读（适用于商品信息）</li>\n<li>仅管理端可读写（适用于后台敏感数据）</li>\n</ul>\n<h4 id=\"数据库中1对N关系的三种设计方式\"><a href=\"#数据库中1对N关系的三种设计方式\" class=\"headerlink\" title=\"#数据库中1对N关系的三种设计方式\"></a><a href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD1%E5%AF%B9n%E5%85%B3%E7%B3%BB%E7%9A%84%E4%B8%89%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F\">#</a>数据库中1对N关系的三种设计方式</h4><h5 id=\"第一种：N的数量较少-几十个以内\"><a href=\"#第一种：N的数量较少-几十个以内\" class=\"headerlink\" title=\"#第一种：N的数量较少 几十个以内\"></a><a href=\"#%E7%AC%AC%E4%B8%80%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E8%BE%83%E5%B0%91-%E5%87%A0%E5%8D%81%E4%B8%AA%E4%BB%A5%E5%86%85\">#</a>第一种：N的数量较少 几十个以内</h5><p><strong>1 条记录存储 N 个子数据</strong></p>\n<p>​    如一条博客中，最多有9张图片，这9张图片可和其他数据放在一个记录中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">[<br>\t&#123;<br>\t\t<span class=\"hljs-attr\">id</span>:...<br>\t\t<span class=\"hljs-attr\">img</span>:[<br>\t\t<span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-string\">&#x27;...&#x27;</span><br>\t\t]<br>\t&#125;<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"第二种：N的数量较多-几十到几百个\"><a href=\"#第二种：N的数量较多-几十到几百个\" class=\"headerlink\" title=\"#第二种：N的数量较多 几十到几百个\"></a><a href=\"#%E7%AC%AC%E4%BA%8C%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E8%BE%83%E5%A4%9A-%E5%87%A0%E5%8D%81%E5%88%B0%E5%87%A0%E7%99%BE%E4%B8%AA\">#</a>第二种：N的数量较多 几十到几百个</h5><p><strong>1 存储 每个N的 id</strong></p>\n<p>可分两个数据库集合，</p>\n<p>一个为 ‘目录’ 集合，存放 ‘详情’ 集合下的每条数据的 id 目录</p>\n<p>一个为 ‘详情’ 集合，每条数据对应一个单独的 id 和 详细数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">目录集合：<br>[<br>\t&#123;<br>\t\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;11&quot;</span>,<br>\t\t<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;产品1&#x27;</span>,<br>\t\t<span class=\"hljs-string\">&#x27;xqs&#x27;</span>: [<span class=\"hljs-string\">&#x27;111&#x27;</span>,<span class=\"hljs-string\">&#x27;222&#x27;</span>,<span class=\"hljs-string\">&#x27;333&#x27;</span>, ... ]  <span class=\"hljs-comment\">// 存放 详情集合 中的每条数据 id</span><br>\t&#125;<br>]<br><br><br><br>详情集合：<br>[<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;111&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件1&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;222&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件2&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>&#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&quot;333&quot;</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;零件3&#x27;</span>,<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&#x27;...&#x27;</span> ...&#125;,<br>...<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<p>如歌单列表，与歌曲详情的数据组合设计。</p>\n<h5 id=\"第三种：N的数量巨大-几百成千上万个\"><a href=\"#第三种：N的数量巨大-几百成千上万个\" class=\"headerlink\" title=\"#第三种：N的数量巨大 几百成千上万个\"></a><a href=\"#%E7%AC%AC%E4%B8%89%E7%A7%8D-n%E7%9A%84%E6%95%B0%E9%87%8F%E5%B7%A8%E5%A4%A7-%E5%87%A0%E7%99%BE%E6%88%90%E5%8D%83%E4%B8%8A%E4%B8%87%E4%B8%AA\">#</a>第三种：N的数量巨大 几百成千上万个</h5><p><strong>每个 N 都存储 1 的 id</strong></p>\n<p>如新浪博客中的一条博客下面有几千条评论</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">一条新浪博客：<br>[&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>,<br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>:<span class=\"hljs-string\">&#x27;博客内容&#x27;</span><br>\t...<br>&#125;]<br><br><br>上千条评价：<br>[<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;111111&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容1&#x27;</span><br>&#125;,<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;222222&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容2&#x27;</span><br>&#125;,<br>&#123;<br>\t<span class=\"hljs-string\">&#x27;id&#x27;</span>:<span class=\"hljs-string\">&#x27;33333&#x27;</span><br>\t<span class=\"hljs-string\">&#x27;blogId&#x27;</span>:<span class=\"hljs-string\">&#x27;11&#x27;</span>, <span class=\"hljs-comment\">// 这个id对应的是那一条博客的id</span><br>\t<span class=\"hljs-string\">&#x27;content&#x27;</span>: <span class=\"hljs-string\">&#x27;评价内容3&#x27;</span><br>&#125;,<br>...<br>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云调用\"><a href=\"#云调用\" class=\"headerlink\" title=\"#云调用\"></a><a href=\"#%E4%BA%91%E8%B0%83%E7%94%A8\">#</a>云调用</h4><p>通过云函数调用服务端的开发接口</p>\n<p>这些接口如：模板消息推送、生成小程序码…</p>\n<h4 id=\"模板消息推送\"><a href=\"#模板消息推送\" class=\"headerlink\" title=\"#模板消息推送\"></a><a href=\"#%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81\">#</a>模板消息推送</h4><p><strong>1、使用from表单才能触发消息推送，并设置report-submit=”true”</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;modal-content&quot;</span> <span class=\"hljs-attr\">report-submit</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">bind:submit</span>=<span class=\"hljs-string\">&quot;onSend&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;comment-content&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;写评论&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#123;&#123;content&#125;&#125;&quot;</span> <span class=\"hljs-attr\">fixed</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;send&quot;</span> <span class=\"hljs-attr\">form-type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>发送<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、需要到微信公众平台做相应的设置：</strong></p>\n<p>微信公众平台 &gt; 功能 &gt; 模板消息 &gt; 添加模板 &gt; 选择相应的模板&gt; 添加成功后会有一个模板ID</p>\n<p><strong>3、新建一个云函数，用于云调用。在该云函数下新建配置文件：config.json ，用于配置权限</strong></p>\n<p>config.json ：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;permissions&quot;</span>: &#123;<br>    <span class=\"hljs-attr\">&quot;openapi&quot;</span>: [<br>      <span class=\"hljs-string\">&quot;templateMessage.send&quot;</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>云函数设置消息推送：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 获取openid</span><br>  <span class=\"hljs-keyword\">const</span> &#123; OPENID &#125; = cloud.getWXContext()<br><br>  <span class=\"hljs-comment\">// 模板推送消息</span><br>  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> cloud.openapi.templateMessage.send(&#123;<br>    <span class=\"hljs-attr\">touser</span>: OPENID,<br>    <span class=\"hljs-attr\">page</span>: <span class=\"hljs-string\">`/pages/blog-comment/blog-comment?blogId=<span class=\"hljs-subst\">$&#123;event.blogId&#125;</span>`</span>, <span class=\"hljs-comment\">// 用户点击推送消息打开的页面</span><br>    <span class=\"hljs-attr\">data</span>: &#123; <span class=\"hljs-comment\">// 模板的内容，keyword为在公众平台设置模板时对应的字段</span><br>      <span class=\"hljs-attr\">keyword1</span>: &#123; <span class=\"hljs-comment\">// 评价内容</span><br>        <span class=\"hljs-attr\">value</span>: event.context<br>      &#125;,<br>      <span class=\"hljs-attr\">keyword2</span>: &#123; <span class=\"hljs-comment\">// 评价时间</span><br>        <span class=\"hljs-attr\">value</span>: event.time<br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-attr\">templateId</span>: <span class=\"hljs-string\">&#x27;LNwKMcYwlz-0HabgBhmZi6CWZrlNSBiNJ2h0SMorcxQ&#x27;</span>, <span class=\"hljs-comment\">// 模板id，到公众平台模板消息上获取</span><br>    <span class=\"hljs-attr\">formId</span>: event.formId <span class=\"hljs-comment\">// 触发消息推送的form表单的id</span><br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>4、在提交表单事件完成后调用消息推送云函数</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.cloud.callFunction(&#123;<br>         <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;sendMessage&#x27;</span>,<br>         <span class=\"hljs-attr\">data</span>: &#123;<br>           content,<br>           formId,<br>           <span class=\"hljs-attr\">blogId</span>: <span class=\"hljs-built_in\">this</span>.properties.blogId<br>         &#125;<br>       &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>         <span class=\"hljs-built_in\">console</span>.log(res)<br>       &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云函数多集合查询数据库\"><a href=\"#云函数多集合查询数据库\" class=\"headerlink\" title=\"#云函数多集合查询数据库\"></a><a href=\"#%E4%BA%91%E5%87%BD%E6%95%B0%E5%A4%9A%E9%9B%86%E5%90%88%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93\">#</a>云函数多集合查询数据库</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 博客详情(博客内容、评论)</span><br>  app.router(<span class=\"hljs-string\">&#x27;blogDetail&#x27;</span>, <span class=\"hljs-keyword\">async</span>(ctx, next) =&gt; &#123;<br>    <span class=\"hljs-keyword\">let</span> blogId = event.blogId<br><br>    <span class=\"hljs-comment\">// 博客内容</span><br>    <span class=\"hljs-keyword\">let</span> detail = <span class=\"hljs-keyword\">await</span> blogCollection.where(&#123;<br>      <span class=\"hljs-attr\">_id</span>: blogId<br>    &#125;).get().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> res.data<br>    &#125;)<br><br>    <span class=\"hljs-comment\">// 评论查询</span><br>    <span class=\"hljs-keyword\">const</span> countResult = <span class=\"hljs-keyword\">await</span> blogCollection.count()<br>    <span class=\"hljs-keyword\">const</span> total = countResult.total<br>    <span class=\"hljs-keyword\">let</span> commentList = &#123;<br>      <span class=\"hljs-attr\">data</span>: []<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (total &gt; <span class=\"hljs-number\">0</span>) &#123;<br>      <span class=\"hljs-comment\">// 突破100条限制</span><br>      <span class=\"hljs-keyword\">const</span> batchTimes = <span class=\"hljs-built_in\">Math</span>.ceil(total / MAX_LIMIT)<br>      <span class=\"hljs-keyword\">const</span> tasks = []<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; batchTimes; i++) &#123;<br>        <span class=\"hljs-keyword\">let</span> promise = db.collection(<span class=\"hljs-string\">&#x27;blog-comment&#x27;</span>).skip(i * MAX_LIMIT)<br>          .limit(MAX_LIMIT).where(&#123;<br>            blogId<br>          &#125;).orderBy(<span class=\"hljs-string\">&#x27;createTime&#x27;</span>, <span class=\"hljs-string\">&#x27;desc&#x27;</span>).get()<br>        tasks.push(promise)<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (tasks.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        commentList = (<span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(tasks)).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> &#123;<br>          <span class=\"hljs-keyword\">return</span> &#123;<br>            <span class=\"hljs-attr\">data</span>: acc.data.concat(cur.data)<br>          &#125;<br>        &#125;)<br>      &#125;<br><br>    &#125;<br>    ctx.body = &#123;<br>      detail,<br>      commentList<br>    &#125;<br>  &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"分享功能\"><a href=\"#分享功能\" class=\"headerlink\" title=\"#分享功能\"></a><a href=\"#%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD\">#</a>分享功能</h4><p>分享功能需要button标签，设置open-type=”share”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">open-type</span>=<span class=\"hljs-string\">&quot;share&quot;</span> <span class=\"hljs-attr\">data-blogid</span>=<span class=\"hljs-string\">&quot;&#123;&#123;blogId&#125;&#125;&quot;</span> <span class=\"hljs-attr\">data-blog</span>=<span class=\"hljs-string\">&quot;&#123;&#123;blog&#125;&#125;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;share-btn&quot;</span> <span class=\"hljs-attr\">hover-class</span>=<span class=\"hljs-string\">&quot;share-hover&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;iconfont icon-fenxiang icon&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span>&gt;</span>分享<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>在js中有onShareAppMessage方法，点击button会自动执行此方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">onShareAppMessage: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">console</span>.log(event)<br><br>    <span class=\"hljs-comment\">// 对分享卡片的设置</span><br>    <span class=\"hljs-keyword\">let</span> blogObj = event.target.dataset.blog<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">title</span>: blogObj.content,<br>      <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">`/pages/blog-comment/blog-comment?blogId=<span class=\"hljs-subst\">$&#123;blogObj._id&#125;</span>`</span>,<br>      <span class=\"hljs-comment\">// imageUrl: &#x27;&#x27; // 自定义图片，不支持云存储的图片</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"不同场景获取用户信息的方式\"><a href=\"#不同场景获取用户信息的方式\" class=\"headerlink\" title=\"#不同场景获取用户信息的方式\"></a><a href=\"#%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E6%96%B9%E5%BC%8F\">#</a>不同场景获取用户信息的方式</h4><h5 id=\"场景一：只想在界面上显示自己的昵称和头像\"><a href=\"#场景一：只想在界面上显示自己的昵称和头像\" class=\"headerlink\" title=\"#场景一：只想在界面上显示自己的昵称和头像\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%B8%80-%E5%8F%AA%E6%83%B3%E5%9C%A8%E7%95%8C%E9%9D%A2%E4%B8%8A%E6%98%BE%E7%A4%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%98%B5%E7%A7%B0%E5%92%8C%E5%A4%B4%E5%83%8F\">#</a>场景一：只想在界面上显示自己的昵称和头像</h5><p>以组件的方式：根据type类型获取不同用户数据</p>\n<p><strong>该方式不需要授权，只能用于在wxml显示自己的信息</strong></p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html\">open-data(opens new window)</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">open-data</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;userAvatarUrl&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">open-data</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">open-data</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;userNickName&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">open-data</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"场景二：在JS中获取用户信息\"><a href=\"#场景二：在JS中获取用户信息\" class=\"headerlink\" title=\"#场景二：在JS中获取用户信息\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%BA%8C-%E5%9C%A8js%E4%B8%AD%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF\">#</a>场景二：在JS中获取用户信息</h5><p>该方式要在用户授权以后才能获取用户信息</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\">wx.getUserInfo(opens new window)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">wx.getUserInfo(&#123;<br>      <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>        <span class=\"hljs-built_in\">console</span>.log(res)<br>      &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>在未授权的情况下需要用户先授权：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 判断用户是否授权</span><br>      wx.getSetting(&#123;<br>        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br>          <span class=\"hljs-keyword\">if</span> (res.authSetting[<span class=\"hljs-string\">&#x27;scope.userInfo&#x27;</span>]) &#123; <span class=\"hljs-comment\">// 已授权</span><br>            wx.getUserInfo(&#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>              <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123; <span class=\"hljs-comment\">// 这里使用箭头函数可改变内部this指向为外部的this</span><br><br>                app.setGlobalData(<span class=\"hljs-string\">&#x27;userInfo&#x27;</span>, res.userInfo) <span class=\"hljs-comment\">// 设置app全局属性</span><br><br>                <span class=\"hljs-built_in\">this</span>.onLoginSuccess(&#123;<br>                  <span class=\"hljs-attr\">detail</span>: res.userInfo<br>                &#125;)<br>              &#125;<br>            &#125;)<br>          &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 未授权</span><br>            <span class=\"hljs-built_in\">this</span>.setData(&#123; <span class=\"hljs-comment\">// 打开弹出层，显示获取用户信息按钮</span><br>              <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">true</span><br>            &#125;)<br>          &#125;<br>        &#125;<br>      &#125;)<br><br><br>  授权按钮<br> &lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;login&quot;</span> open-type=<span class=\"hljs-string\">&quot;getUserInfo&quot;</span> bindgetuserinfo=<span class=\"hljs-string\">&quot;onGetUserInfo&quot;</span>&gt;获取微信授权信息&lt;/button&gt;<br><br><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">onGetUserInfo</span>(<span class=\"hljs-params\">event</span>)</span> &#123; <span class=\"hljs-comment\">// 获取用户信息</span><br>      <span class=\"hljs-keyword\">const</span> userInfo = event.detail.userInfo<br>      <span class=\"hljs-keyword\">if</span> (userInfo) &#123; <span class=\"hljs-comment\">// 用户允许授权</span><br>        <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>          <span class=\"hljs-attr\">modalShow</span>: <span class=\"hljs-literal\">false</span><br>        &#125;)<br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginSuccess&#x27;</span>, userInfo) <span class=\"hljs-comment\">// 给父组件传用户数据</span><br>      &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 用户拒绝授权</span><br>        <span class=\"hljs-built_in\">this</span>.triggerEvent(<span class=\"hljs-string\">&#x27;loginFail&#x27;</span>)<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：上面这种方式没有获取到openId</p>\n</blockquote>\n<h5 id=\"场景三：获取openId\"><a href=\"#场景三：获取openId\" class=\"headerlink\" title=\"#场景三：获取openId\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E4%B8%89-%E8%8E%B7%E5%8F%96openid\">#</a>场景三：获取openId</h5><p><strong>获取openId不需要用户授权</strong></p>\n<p>1、传统开发方式获取openId，后台服务器由自己开发，没使用云开发</p>\n<p>小程序端 微信服务器 后端服务器</p>\n<p>步骤：</p>\n<p>小程序端 调用 wx.login 向微信服务器 获取code</p>\n<p>小程序端 调用 wx.request 将 code 传递给 后端服务器</p>\n<p>后端服务器 使用code 向微信服务器 换取openid和session_key</p>\n<p>后端服务器 将openid 发送给 小程序端</p>\n<p>2、云开发方式获取openId</p>\n<p>云函数login中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 获取 WX Context (微信调用上下文)，包括 OPENID、APPID、及 UNIONID（需满足 UNIONID 获取条件）</span><br>  <span class=\"hljs-keyword\">const</span> wxContext = cloud.getWXContext()<br><br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    event,<br>    <span class=\"hljs-attr\">openid</span>: wxContext.OPENID,<br>    <span class=\"hljs-attr\">appid</span>: wxContext.APPID,<br>    <span class=\"hljs-attr\">unionid</span>: wxContext.UNIONID,<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">普通按钮<br>&lt;button bindtap=<span class=\"hljs-string\">&quot;getOpenid&quot;</span>&gt;获取openid&lt;/button&gt;<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">getOpenid</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>\twx.cloud.callFunction(&#123;<br>\t\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span><br>\t&#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">console</span>.log(res)<br>\t&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>openid 在小程序和公众号下是不一样的</p>\n<p>unionid 在小程序和公众号下都是一样的</p>\n</blockquote>\n<h2 id=\"《我的》页面\"><a href=\"#《我的》页面\" class=\"headerlink\" title=\"#《我的》页面\"></a><a href=\"#%E3%80%8A%E6%88%91%E7%9A%84%E3%80%8B%E9%A1%B5%E9%9D%A2\">#</a>《我的》页面</h2><p>json文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;navigationBarTitleText&quot;</span>: <span class=\"hljs-string\">&quot;我的&quot;</span>,<br>  <span class=\"hljs-string\">&quot;disableScroll&quot;</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// 使页面无法滚动</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"导航页面链接跳转\"><a href=\"#导航页面链接跳转\" class=\"headerlink\" title=\"#导航页面链接跳转\"></a><a href=\"#%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC\">#</a>导航页面链接跳转</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html\">navigator(opens new window)</a></p>\n<h4 id=\"背景图片\"><a href=\"#背景图片\" class=\"headerlink\" title=\"#背景图片\"></a><a href=\"#%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87\">#</a>背景图片</h4><p>wxss背景图片不支持本地相对路径的图片，只支持网络图片和base64图片</p>\n<p>建议使用base64图片，图片文件最好不要太大。</p>\n<h4 id=\"每个页面都有的page标签\"><a href=\"#每个页面都有的page标签\" class=\"headerlink\" title=\"#每个页面都有的page标签\"></a><a href=\"#%E6%AF%8F%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%83%BD%E6%9C%89%E7%9A%84page%E6%A0%87%E7%AD%BE\">#</a>每个页面都有的page标签</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">page &#123;<br>  background-color: #f1f1f1;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"播放历史与本地存储\"><a href=\"#播放历史与本地存储\" class=\"headerlink\" title=\"#播放历史与本地存储\"></a><a href=\"#%E6%92%AD%E6%94%BE%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8\">#</a>播放历史与本地存储</h4><p>方案一：播放历史存储在数据库当中，这样在不同设备访问都可查看播放历史。读取速度相对较慢</p>\n<p>方案二：播放历史存储在本地，仅当前设备可查看播放历史。读取速度较快</p>\n<p>本项目采用本地存储：</p>\n<p>使用openid作为本地存储的key，播放历史存入value</p>\n<p>在app.js中获取openid，即打开小程序就获取openid。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// app.js</span><br><span class=\"hljs-attr\">onLaunch</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;<br>\t<span class=\"hljs-built_in\">this</span>.getOpenid() <span class=\"hljs-comment\">// 获取openid并存储</span><br>&#125;,<br><span class=\"hljs-function\"><span class=\"hljs-title\">getOpenid</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-comment\">// 获取openid并存储</span><br>    wx.cloud.callFunction(&#123;<br>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;login&#x27;</span><br>    &#125;).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> openid = res.result.openid<br>      <span class=\"hljs-built_in\">this</span>.globalData.openid = openid <span class=\"hljs-comment\">// 保存到全局变量</span><br>      <span class=\"hljs-keyword\">if</span> (wx.getStorageSync(openid) == <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123; <span class=\"hljs-comment\">// 该用户从未打开过小程序，未存储过openid在本地</span><br>        wx.setStorageSync(openid, []) <span class=\"hljs-comment\">// 存储openid到本地</span><br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>歌曲播放时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 保存播放历史到本地存储</span><br>  <span class=\"hljs-function\"><span class=\"hljs-title\">savePlayHistory</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    <span class=\"hljs-keyword\">const</span> currentSong = musiclist[nowPlayingIndex] <span class=\"hljs-comment\">// 当前播放歌曲</span><br>    <span class=\"hljs-keyword\">const</span> openid = app.globalData.openid <span class=\"hljs-comment\">// 从全局属性获取openid</span><br>    <span class=\"hljs-keyword\">const</span> playHistory = wx.getStorageSync(openid) <span class=\"hljs-comment\">// 从本地存储获取播放历史数组</span><br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, len = playHistory.length; i &lt; len; i++) &#123;<br>      <span class=\"hljs-keyword\">if</span> (playHistory[i].id === currentSong.id) &#123; <span class=\"hljs-comment\">// 当前播放歌曲已存在播放历史中</span><br>        playHistory.splice(i, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 删除原纪录</span><br>        <span class=\"hljs-keyword\">break</span><br>      &#125;<br>    &#125;<br><br>    playHistory.unshift(currentSong) <span class=\"hljs-comment\">// 在数组开头插入</span><br>    wx.setStorage(&#123; <span class=\"hljs-comment\">// 存入本地</span><br>      <span class=\"hljs-attr\">key</span>: openid,<br>      <span class=\"hljs-attr\">data</span>: playHistory<br>    &#125;)<br><br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<p>播放历史页面获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">onLoad: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br><br>    <span class=\"hljs-keyword\">const</span> openid = app.globalData.openid <span class=\"hljs-comment\">//从全局属性获取openid</span><br>    <span class=\"hljs-keyword\">const</span> playHistory = wx.getStorageSync(openid) <span class=\"hljs-comment\">// 读取本地播放历史数据</span><br><br>    <span class=\"hljs-keyword\">if</span> (playHistory.length !== <span class=\"hljs-number\">0</span>) &#123; <span class=\"hljs-comment\">// 有播放历史</span><br>      <span class=\"hljs-built_in\">this</span>.setData(&#123;<br>        playHistory<br>      &#125;)<br>      wx.setStorage(&#123; <span class=\"hljs-comment\">// storage里把musiclist（播放列表）的内容换成播放历史的列表</span><br>        <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;musiclist&#x27;</span>,<br>        <span class=\"hljs-attr\">data</span>: playHistory,<br>      &#125;)<br>    &#125;<br><br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"我的发现\"><a href=\"#我的发现\" class=\"headerlink\" title=\"#我的发现\"></a><a href=\"#%E6%88%91%E7%9A%84%E5%8F%91%E7%8E%B0\">#</a>我的发现</h4><p>代码分别演示了从云函数和小程序端获取数据，从小程序端获取数据享有<strong>权限管理</strong>的能力，不需要传openid。</p>\n<h4 id=\"小程序码\"><a href=\"#小程序码\" class=\"headerlink\" title=\"#小程序码\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81\">#</a>小程序码</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/qr-code.html\">获取小程序码(opens new window)</a></p>\n<p>本项目演示使用<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\">接口 B：适用于需要的码数量极多的业务场景 (opens new window)</a><code>云调用</code> 的方式。</p>\n<p>步骤：</p>\n<ul>\n<li>创建云函数 gteQRCode</li>\n<li>gteQRCode云函数下创建config.json配置权限，代码如下：</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;permissions&quot;</span>:&#123;<br>    <span class=\"hljs-attr\">&quot;openapi&quot;</span>:[<br>      <span class=\"hljs-string\">&quot;wxacode.getUnlimited&quot;</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 云函数入口函数</span><br><span class=\"hljs-built_in\">exports</span>.main = <span class=\"hljs-keyword\">async</span> (event, context) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> wxContext = cloud.getWXContext()<br><br>  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> cloud.openapi.wxacode.getUnlimited(&#123;<br>    <span class=\"hljs-attr\">scene</span>: wxContext.OPENID, <span class=\"hljs-comment\">// 链接参数 不一定传openid，可传其他任意数据，然后通过此数据，在别人扫码进入时就可用于判断</span><br>    <span class=\"hljs-comment\">// page: &quot;pages/blog/blog&quot; // 默认进入主页</span><br>    <span class=\"hljs-comment\">// lineColor: &#123; // 线条颜色</span><br>    <span class=\"hljs-comment\">//   &#x27;r&#x27;: 211,</span><br>    <span class=\"hljs-comment\">//   &#x27;g&#x27;: 60,</span><br>    <span class=\"hljs-comment\">//   &#x27;b&#x27;: 57</span><br>    <span class=\"hljs-comment\">// &#125;,</span><br>    <span class=\"hljs-comment\">// isHyaline: true // 是否透明</span><br>  &#125;)<br><br>  <span class=\"hljs-comment\">// result为二进制数据, 先上传到云存储</span><br><br>  <span class=\"hljs-comment\">// 上传云存储</span><br>  <span class=\"hljs-keyword\">const</span> upload = <span class=\"hljs-keyword\">await</span> cloud.uploadFile(&#123;<br>    <span class=\"hljs-attr\">cloudPath</span>: <span class=\"hljs-string\">&#x27;qrcode/qrcode&#x27;</span> + <span class=\"hljs-built_in\">Date</span>.now() + <span class=\"hljs-built_in\">Math</span>.random() + <span class=\"hljs-string\">&#x27;.png&#x27;</span>,<br>    <span class=\"hljs-attr\">fileContent</span>: result.buffer<br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> upload.fileID<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"判断是从扫码小程序码进入，以及参数获取\"><a href=\"#判断是从扫码小程序码进入，以及参数获取\" class=\"headerlink\" title=\"#判断是从扫码小程序码进入，以及参数获取\"></a><a href=\"#%E5%88%A4%E6%96%AD%E6%98%AF%E4%BB%8E%E6%89%AB%E7%A0%81%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A0%81%E8%BF%9B%E5%85%A5-%E4%BB%A5%E5%8F%8A%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96\">#</a>判断是从扫码小程序码进入，以及参数获取</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 在从小程序码进入的页面js，onLoad方法中，</span><br><br><span class=\"hljs-attr\">onLoad</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">options</span>) </span>&#123;<br>\t<span class=\"hljs-built_in\">console</span>.log(options.scene) <span class=\"hljs-comment\">// 获取到小程序码进入的参数</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"版本更新检测\"><a href=\"#版本更新检测\" class=\"headerlink\" title=\"#版本更新检测\"></a><a href=\"#%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\">#</a>版本更新检测</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// app.js</span><br><span class=\"hljs-attr\">onLaunch</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">options</span>) </span>&#123;<br>    <span class=\"hljs-built_in\">this</span>.checkUpate()<br>&#125;,<br><span class=\"hljs-function\"><span class=\"hljs-title\">checkUpate</span>(<span class=\"hljs-params\"></span>)</span>&#123;<br>    <span class=\"hljs-keyword\">const</span> updateManager = wx.getUpdateManager()<br>    <span class=\"hljs-comment\">// 检测版本更新</span><br>    updateManager.onCheckForUpdate(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>&#123;<br>      <span class=\"hljs-keyword\">if</span> (res.hasUpdate)&#123;<br>        updateManager.onUpdateReady(<span class=\"hljs-function\">()=&gt;</span>&#123;<br>          wx.showModal(&#123;<br>            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;更新提示&#x27;</span>,<br>            <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;新版本已经准备好，是否重启应用&#x27;</span>,<br>            <span class=\"hljs-function\"><span class=\"hljs-title\">success</span>(<span class=\"hljs-params\">res</span>)</span>&#123;<br>              <span class=\"hljs-keyword\">if</span>(res.confirm)&#123;<br>                updateManager.applyUpdate()<br>              &#125;<br>            &#125;<br>          &#125;)<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"#性能优化\"></a><a href=\"#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">#</a>性能优化</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips.html\">官网文档优化建议(opens new window)</a></p>\n<p>使用开发者工具的调试器，Audits进行评分，然后根据提示针对项目进行优化。</p>\n<h3 id=\"场景值scene的作用与应用场景\"><a href=\"#场景值scene的作用与应用场景\" class=\"headerlink\" title=\"#场景值scene的作用与应用场景\"></a><a href=\"#%E5%9C%BA%E6%99%AF%E5%80%BCscene%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">#</a>场景值scene的作用与应用场景</h3><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html\">场景值(opens new window)</a></p>\n<p>场景值用来描述用户进入小程序的路径。完整场景值的含义请查看<a href=\"https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html\">场景值列表 (opens new window)</a>。</p>\n<p>可根据不同场景进入实现不同业务处理，比如一个点餐小程序，店家内贴了小程序码，用户通过扫码进入，可立即进入点餐页面，等等</p>\n<p>在app.js中的onLaunch(options) 、onShow(options)，options包含scene场景值</p>\n<p><strong>开发者工具中，切后台，可模拟进入场景。</strong></p>\n<h3 id=\"小程序的”SEO”—页面收录sitemap\"><a href=\"#小程序的”SEO”—页面收录sitemap\" class=\"headerlink\" title=\"#小程序的”SEO”—页面收录sitemap\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84-seo-%E9%A1%B5%E9%9D%A2%E6%94%B6%E5%BD%95sitemap\">#</a>小程序的”SEO”—页面收录sitemap</h3><p>在app.js的同级目录下有sitemap.json文件，用于配置收录规则</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html\">stiemap配置(opens new window)</a></p>\n<p>作用：</p>\n<p>使小程序搜索可根据小程序的内容进行搜索到</p>\n<p>使用方法：</p>\n<p>1、在微信公众平台，小程序信息 &gt; 页面收录设置 &gt; 打开 (默认是已开启)</p>\n<p>2、打开sitemap.json文件，配置收录规则</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;desc&quot;</span>: <span class=\"hljs-string\">&quot;关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;rules&quot;</span>: [&#123; <span class=\"hljs-comment\">// 收录规则</span><br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;allow&quot;</span>,<span class=\"hljs-comment\">// 是否被收录，allow允许被收录，disallow不允许</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>: <span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-comment\">// *星号表示所有页面都被收录</span><br>  &#125;]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>  <span class=\"hljs-attr\">&quot;desc&quot;</span>: <span class=\"hljs-string\">&quot;关于本文件的更多信息，请参考文档 https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html&quot;</span>,<br>  <span class=\"hljs-attr\">&quot;rules&quot;</span>: [&#123; <span class=\"hljs-comment\">// 收录规则，可添加多条</span><br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;allow&quot;</span>, <span class=\"hljs-comment\">// 是否被收录</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>:<span class=\"hljs-string\">&quot;pages/player/player&quot;</span>,  <span class=\"hljs-comment\">// 页面</span><br>  <span class=\"hljs-attr\">&quot;params&quot;</span>: [<span class=\"hljs-string\">&quot;musicId&quot;</span>,<span class=\"hljs-string\">&quot;index&quot;</span>], <span class=\"hljs-comment\">// 链接的动态参数</span><br>   <span class=\"hljs-attr\">&quot;matching&quot;</span>:&#x27;exact&#x27; <span class=\"hljs-comment\">// 表示params的参数是否要准确的匹配</span><br>  &#125;，&#123;<br>  <span class=\"hljs-attr\">&quot;action&quot;</span>: <span class=\"hljs-string\">&quot;disallow&quot;</span>, <span class=\"hljs-comment\">// 是否被收录</span><br>  <span class=\"hljs-attr\">&quot;page&quot;</span>:<span class=\"hljs-string\">&quot;*&quot;</span>,  /<br>  &#125;]<br>&#125;<br><br><span class=\"hljs-comment\">// 上面配置规则表示除了player页面被收录外，其他页面不被收录</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小程序上线审核流程\"><a href=\"#小程序上线审核流程\" class=\"headerlink\" title=\"#小程序上线审核流程\"></a><a href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E7%BA%BF%E5%AE%A1%E6%A0%B8%E6%B5%81%E7%A8%8B\">#</a>小程序上线审核流程</h3><p>微信公众平台，版本管理&gt;把小程序上传为体验版》提交审核》上线</p>\n<h2 id=\"后台管理系统\"><a href=\"#后台管理系统\" class=\"headerlink\" title=\"#后台管理系统\"></a><a href=\"#%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\">#</a>后台管理系统</h2><h4 id=\"架构示意图\"><a href=\"#架构示意图\" class=\"headerlink\" title=\"#架构示意图\"></a><a href=\"#%E6%9E%B6%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE\">#</a>架构示意图</h4><p>​    前端 后台 小程序云开发</p>\n<p>vue-admin-template &lt;—通过ajax–&gt; 基于Koa2；HTTP API 或 tcb-admin-node —-&gt;云函数、云数据库、云存储</p>\n<h4 id=\"vue-admin-template构建管理系统前端\"><a href=\"#vue-admin-template构建管理系统前端\" class=\"headerlink\" title=\"#vue-admin-template构建管理系统前端\"></a><a href=\"#vue-admin-template%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF\">#</a>vue-admin-template构建管理系统前端</h4><p><a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin (opens new window)</a>基于element的后台管理系统模板</p>\n<p><a href=\"https://github.com/PanJiaChen/vue-admin-template\">vue-admin-template (opens new window)</a>是 <a href=\"https://github.com/PanJiaChen/vue-element-admin\">vue-element-admin (opens new window)</a>的简化版</p>\n<p>使用方法查看官方文档。</p>\n<h4 id=\"Koa2构建管理系统后端\"><a href=\"#Koa2构建管理系统后端\" class=\"headerlink\" title=\"#Koa2构建管理系统后端\"></a><a href=\"#koa2%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%90%8E%E7%AB%AF\">#</a>Koa2构建管理系统后端</h4><p>官网： <a href=\"https://koa.bootcss.com/\">https://koa.bootcss.com/(opens new window)</a></p>\n<p>新建空文件夹wx-music-admin-backend，打开终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成package.json文件，-y 表示默认的配置</span><br>npm init -y<br><br><span class=\"hljs-comment\"># 安装koa</span><br>npm install koa<br><br><span class=\"hljs-comment\"># 新建app.js文件 (win10系统命令)，作为项目入口文件</span><br><span class=\"hljs-built_in\">type</span> nul &gt; app.js<br></code></pre></td></tr></table></figure>\n\n\n\n<p>app.js:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> Koa = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa&#x27;</span>)<br><span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;chalk&#x27;</span>) <span class=\"hljs-comment\">// 使console.log打印文字有颜色的插件，需: npm i chalk</span><br><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> Koa()<br><br>app.use(<span class=\"hljs-keyword\">async</span> (ctx) =&gt; &#123;<br>  ctx.body = <span class=\"hljs-string\">&#x27;Hello Wolrd&#x27;</span><br>&#125;)<br><span class=\"hljs-keyword\">const</span> port = <span class=\"hljs-number\">3000</span><br>app.listen(port, <span class=\"hljs-function\">() =&gt;</span> &#123; <span class=\"hljs-comment\">// 端口号，开启服务后的回调函数</span><br>  <span class=\"hljs-built_in\">console</span>.log(chalk.green(<span class=\"hljs-string\">`&gt; 服务已开启，访问：http://localhost:<span class=\"hljs-subst\">$&#123;port&#125;</span>`</span>))<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># node启动项目</span><br>node app.js<br><br><span class=\"hljs-comment\"># 访问：http://localhost:3000</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"接口调用凭证-access-token-的缓存与更新\"><a href=\"#接口调用凭证-access-token-的缓存与更新\" class=\"headerlink\" title=\"#接口调用凭证 access_token 的缓存与更新\"></a><a href=\"#%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%87%AD%E8%AF%81-access-token-%E7%9A%84%E7%BC%93%E5%AD%98%E4%B8%8E%E6%9B%B4%E6%96%B0\">#</a>接口调用凭证 access_token 的缓存与更新</h4><p>access_token，微信的接口调用凭证，详情：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html\">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html(opens new window)</a></p>\n<p>回到项目wx-music-admin-backend，打开终端：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># HTTP 请求 插件</span><br>npm i request<br>npm i request-promise<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 获取微信接口调用凭证</span><br><span class=\"hljs-comment\"> * 详情：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html</span><br><span class=\"hljs-comment\"> */</span><br><br><br><span class=\"hljs-keyword\">const</span> rp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;request-promise&#x27;</span>) <span class=\"hljs-comment\">// node发送http请求的插件</span><br><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>) <span class=\"hljs-comment\">// node文件模块</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>) <span class=\"hljs-comment\">// node 路径模块</span><br><br><span class=\"hljs-comment\">//fileName = __dirname 当前文件所在目录的绝对路径, 加上 &#x27;./access_token.json&#x27;</span><br><span class=\"hljs-keyword\">const</span> fileName = path.resolve(__dirname, <span class=\"hljs-string\">&#x27;./access_token.json&#x27;</span>)<br><br><span class=\"hljs-comment\">// 这两个参数的获取：微信公众平台&gt;开发&gt;开发设置</span><br><span class=\"hljs-keyword\">const</span> APPID = <span class=\"hljs-string\">&#x27;wxc4e0b2d98063b103&#x27;</span><br><span class=\"hljs-keyword\">const</span> APPSECRET = <span class=\"hljs-string\">&#x27;xxx&#x27;</span> <span class=\"hljs-comment\">//小程序密钥，注意保密!</span><br><br><span class=\"hljs-comment\">// 微信 access_token 请求地址</span><br><span class=\"hljs-keyword\">const</span> URL = <span class=\"hljs-string\">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class=\"hljs-subst\">$&#123;APPID&#125;</span>&amp;secret=<span class=\"hljs-subst\">$&#123;APPSECRET&#125;</span>`</span><br><br><span class=\"hljs-comment\">// 发送请求获取AccessToken</span><br><span class=\"hljs-keyword\">const</span> updateAccessToken = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> resStr = <span class=\"hljs-keyword\">await</span> rp(URL)<br>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-built_in\">JSON</span>.parse(resStr)<br><br>  <span class=\"hljs-keyword\">if</span> (res.access_token) &#123;<br>    <span class=\"hljs-comment\">// node写文件,参数：1 文件路径，2 文件内容, 首次写文件为新建，往后为覆盖</span><br>    fs.writeFileSync(fileName, <span class=\"hljs-built_in\">JSON</span>.stringify(&#123;<br>      <span class=\"hljs-attr\">access_token</span>: res.access_token,<br>      <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()<br>    &#125;))<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 如获取不到，再次获取</span><br>    <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 读取access_token</span><br><span class=\"hljs-keyword\">const</span> getAccessToken = <span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">try</span> &#123;<br>     <span class=\"hljs-comment\">// node读取文件,参数：1 读取的文件，2 字符集</span><br>    <span class=\"hljs-keyword\">const</span> readRes = fs.readFileSync(fileName, <span class=\"hljs-string\">&#x27;utf8&#x27;</span>)<br>    <span class=\"hljs-keyword\">const</span> readObj = <span class=\"hljs-built_in\">JSON</span>.parse(readRes)<br><br>    <span class=\"hljs-comment\">// 如果服务器宕机导致setInterval无法定时更新，这里需要再次判断access_token的有效性</span><br>    <span class=\"hljs-keyword\">const</span> createTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(readObj.createTime).getTime()<br>    <span class=\"hljs-keyword\">const</span> nowTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()<br>    <span class=\"hljs-keyword\">if</span>((nowTime - createTime) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">60</span> / <span class=\"hljs-number\">60</span> &gt;= <span class=\"hljs-number\">2</span>) &#123;<br>      <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>      <span class=\"hljs-keyword\">await</span> getAccessToken()<br>      <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> readObj.access_token<br><br>  &#125; <span class=\"hljs-keyword\">catch</span> (error) &#123; <span class=\"hljs-comment\">//捕获异常，在未创建文件时，先创建文件</span><br>    <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>    <span class=\"hljs-keyword\">await</span> getAccessToken()<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// access_token有效期为2个小时，定时更新</span><br><span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-keyword\">async</span> () =&gt; &#123;<br>  <span class=\"hljs-keyword\">await</span> updateAccessToken()<br>&#125;, (<span class=\"hljs-number\">7200</span> - <span class=\"hljs-number\">300</span>) * <span class=\"hljs-number\">1000</span>)<br><br><span class=\"hljs-built_in\">module</span>.exports = getAccessToken<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"后端代码通过HTTP-API-触发云函数获取数据\"><a href=\"#后端代码通过HTTP-API-触发云函数获取数据\" class=\"headerlink\" title=\"#后端代码通过HTTP API 触发云函数获取数据\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E9%80%9A%E8%BF%87http-api-%E8%A7%A6%E5%8F%91%E4%BA%91%E5%87%BD%E6%95%B0%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE\">#</a>后端代码通过HTTP API 触发云函数获取数据</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/functions/invokeCloudFunction.html\">HTTP API 触发云函数(opens new window)</a></p>\n<h4 id=\"产生跨域和后端解决跨域问题\"><a href=\"#产生跨域和后端解决跨域问题\" class=\"headerlink\" title=\"#产生跨域和后端解决跨域问题\"></a><a href=\"#%E4%BA%A7%E7%94%9F%E8%B7%A8%E5%9F%9F%E5%92%8C%E5%90%8E%E7%AB%AF%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\">#</a>产生跨域和后端解决跨域问题</h4><p>管理系统前端向管理系统后端请求数据，产生了跨域问题</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">  <span class=\"hljs-comment\">// 产生跨域的几种情况</span><br>  <span class=\"hljs-comment\">// http://www.a.com  https://www.a.com 协议不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com  http://www.b.com 域名不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com  http://news.a.com 主域与子域不同</span><br>  <span class=\"hljs-comment\">// http://www.a.com:8080  http://www.a.com:3000 端口不同</span><br><br><span class=\"hljs-comment\">// 解决跨域的几种方法</span><br><span class=\"hljs-comment\">// jsonp</span><br><span class=\"hljs-comment\">// iframe</span><br><span class=\"hljs-comment\">// postMessage跨域</span><br><span class=\"hljs-comment\">// 跨域资源共享（CORS）</span><br></code></pre></td></tr></table></figure>\n\n<p>管理系统后端，安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">// 解决跨域问题的koa包<br>npm i koa2-cors<br></code></pre></td></tr></table></figure>\n\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//处理跨域</span><br>app.use(cors(&#123;<br>  <span class=\"hljs-attr\">origin</span>: [<span class=\"hljs-string\">&#x27;http://localhost:9528&#x27;</span>], <span class=\"hljs-comment\">// 允许访问本服务的域</span><br>  <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-literal\">true</span><br>&#125;))<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"云数据库的增删改查接口\"><a href=\"#云数据库的增删改查接口\" class=\"headerlink\" title=\"#云数据库的增删改查接口\"></a><a href=\"#%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%8E%A5%E5%8F%A3\">#</a>云数据库的增删改查接口</h4><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-http-api/database/databaseQuery.html\">数据库查询记录(opens new window)</a></p>\n<h4 id=\"后端获取前端post请求传来的数据\"><a href=\"#后端获取前端post请求传来的数据\" class=\"headerlink\" title=\"#后端获取前端post请求传来的数据\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E5%89%8D%E7%AB%AFpost%E8%AF%B7%E6%B1%82%E4%BC%A0%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE\">#</a>后端获取前端post请求传来的数据</h4><p>get请求可以直接通过ctx.request.query获取，但是post请求需要安装koa-body</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">npm i koa-body<br></code></pre></td></tr></table></figure>\n\n<p>app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> koaBody = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;koa-body&#x27;</span>) <span class=\"hljs-comment\">// 对post请求前端传来的数据的获取，需要此依赖</span><br><br><span class=\"hljs-comment\">// 接收post参数解析</span><br>app.use(koaBody(&#123;<br>  <span class=\"hljs-attr\">multipart</span>: <span class=\"hljs-literal\">true</span><br>&#125;))<br></code></pre></td></tr></table></figure>\n\n<p>接口.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.post(<span class=\"hljs-string\">&#x27;/updatePlaylist&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br><br>  <span class=\"hljs-keyword\">const</span> params = ctx.request.body <span class=\"hljs-comment\">// post请求获取前端传来的数据，需安装和配置koa-body</span><br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"后端获取云存储图片\"><a href=\"#后端获取云存储图片\" class=\"headerlink\" title=\"#后端获取云存储图片\"></a><a href=\"#%E5%90%8E%E7%AB%AF%E8%8E%B7%E5%8F%96%E4%BA%91%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87\">#</a>后端获取云存储图片</h4><p>云存储中上传图片，云数据库中新建图片的集合，并添加数据字段，字段包含云文件的fileid。</p>\n<p>后端项目通过调用云数据库的方式获取数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">router.get(<span class=\"hljs-string\">&#x27;/list&#x27;</span>, <span class=\"hljs-keyword\">async</span> (ctx, next) =&gt; &#123;<br>  <span class=\"hljs-comment\">// 接口中读取数据库默认最多10条数据</span><br>  <span class=\"hljs-keyword\">const</span> query = <span class=\"hljs-string\">`db.collection(&#x27;swiper&#x27;).get()`</span><br>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> callCloudDB(ctx, <span class=\"hljs-string\">&#x27;databasequery&#x27;</span>, query)<br>  <span class=\"hljs-built_in\">console</span>.log(res)<br><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>但获取到的数据为fileid，并不能用于显示图片，需要通过微信HTTP API获取云存储的接口来获取图片地址</p>\n"},{"title":"CSS3手写新拟态vue3组件","_content":"# CS3手写新拟态vue3组件\n\n![image-20210714163247179](https://i.loli.net/2021/11/11/4HA9cp58T1NyFPl.png)\n\n#### \n\n#### 按钮的拟态组件效果\n\n```vue\n<template>\n  <button>\n    <slot></slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    //不能为空\n  },\n});\n</script>\n\n\n<style scoped>\nbutton {\n  border: none;\n  padding: 20px 40px;\n  cursor: pointer;\n  font-weight: 500;\n  letter-spacing: 2px;\n  color: #5a84a2;\n  font-size: 18px;\n  border-radius: 60px;\n  background-color: #ecf0f3;\n  box-shadow: -2px -2px 8px rgba(255, 255, 255, 1),\n    -2px -2px 12px rgba(255, 255, 255, 0.5),\n    inset 2px 2px 4px rgba(255, 255, 255, 0.1), 2px 2px 8px rgba(0, 0, 0, 0.15);\n}\n\nbutton:hover {\n  box-shadow: inset -2px -2px 8px rgba(255, 255, 255, 1),\n    inset -2px -2px 12px rgba(255, 255, 255, 0.5),\n    inset 2px 2px 4px rgba(255, 255, 255, 0.1),\n    inset 2px 2px 8px rgba(0, 0, 0, 0.15);\n}\n</style>\n\n```\n\n\n\n#### 下拉框拟态组件\n\n```vue\n<template>\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">\n      <slot name=\"title\"></slot>\n    </button>\n    <div class=\"dropdown-content\">\n      <slot name=\"item\"></slot>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    // 不能为空\n  },\n});\n</script>\n\n  <style scoped>\n.dropbtn {\n  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),\n    -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);\n  background: #ecf0f3;\n  color: #5a84a2;\n  border-radius: 10px;\n  padding: 20px 30px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  border-radius: 10px;\n  cursor: pointer;\n  color: #5a84a2;\n  min-width: 130px;\n  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),\n    -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n\n.dropdown-content div {\n  border-radius: 10px;\n  color: #5a84a2;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n}\n\n.dropdown-content div:hover {\n  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),\n    inset -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1),\n    inset 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n\n.dropdown:hover .dropdown-content {\n  display: block;\n}\n\n.dropdown:hover .dropbtn {\n  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),\n    inset -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1),\n    inset 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n</style>\n  \n```\n\n在父组件中可以这样引用\n\n```vue\n<!-- 按钮组件 -->\n<Neu_button> 按钮 </Neu_button>\n<!-- 下拉框组件 -->\n    <Neu_dropdown style=\"padding-left:50px\">\n      <template v-slot:title> 下拉框 </template>\n      <template v-slot:item>\n        <!-- 需要加样式 -->\n        <div>111</div>\n        <div>111</div>\n        <div>222</div>\n        <div>111</div>\n        <div>111</div>\n      </template>\n    </Neu_dropdown>\n\n```\n\n#### 拟态头像框\n\n```vue\n<div class=\"inner-shadow-ring item\"> </div>\n    <div class=\"inner-shadow-ring-2 item\"> </div>\n\n<style>\n.item {\n  position: relative;\n  width: 200px;\n  height: 200px;\n  margin-left: 80px;\n  margin-top: 80px;\n  background: #ecf0f3;\n}\n.inner-shadow-ring {\n  border-radius: 100%;\n  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;\n}\n\n.inner-shadow-ring:before {\n  content: \"\";\n  position: absolute;\n  left: 10%;\n  top: 10%;\n  width: 80%;\n  height: 80%;\n  border-radius: 100%;\n  background: #ecf0f3;\n  background-image:url(../../public/head.jpg);\n  background-position: 50% 50%;\n  background-size:100% 100%;\n  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;\n}\n.inner-shadow-ring-2 {\n  border-radius: 100%;\n  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;\n}\n\n.inner-shadow-ring-2:before {\n  content: \"\";\n  position: absolute;\n  left: 10%;\n  top: 10%;\n  width: 80%;\n  height: 80%;\n  border-radius: 100%;\n  background: #ecf0f3;\n  background-image:url(../../public/head.jpg);\n  background-position: 50% 50%;\n  background-size:100% 100%;\n  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px rgb(247, 247, 247);\n  /* box-shadow: inset 3px 3px 15px #d1d9e6, inset -3px -3px 15px #fff; */\n}\n</style>\n```\n\n","source":"_posts/CSS3 手写新拟态vue3组件.md","raw":"---\ntitle: CSS3手写新拟态vue3组件\n---\n# CS3手写新拟态vue3组件\n\n![image-20210714163247179](https://i.loli.net/2021/11/11/4HA9cp58T1NyFPl.png)\n\n#### \n\n#### 按钮的拟态组件效果\n\n```vue\n<template>\n  <button>\n    <slot></slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    //不能为空\n  },\n});\n</script>\n\n\n<style scoped>\nbutton {\n  border: none;\n  padding: 20px 40px;\n  cursor: pointer;\n  font-weight: 500;\n  letter-spacing: 2px;\n  color: #5a84a2;\n  font-size: 18px;\n  border-radius: 60px;\n  background-color: #ecf0f3;\n  box-shadow: -2px -2px 8px rgba(255, 255, 255, 1),\n    -2px -2px 12px rgba(255, 255, 255, 0.5),\n    inset 2px 2px 4px rgba(255, 255, 255, 0.1), 2px 2px 8px rgba(0, 0, 0, 0.15);\n}\n\nbutton:hover {\n  box-shadow: inset -2px -2px 8px rgba(255, 255, 255, 1),\n    inset -2px -2px 12px rgba(255, 255, 255, 0.5),\n    inset 2px 2px 4px rgba(255, 255, 255, 0.1),\n    inset 2px 2px 8px rgba(0, 0, 0, 0.15);\n}\n</style>\n\n```\n\n\n\n#### 下拉框拟态组件\n\n```vue\n<template>\n  <div class=\"dropdown\">\n    <button class=\"dropbtn\">\n      <slot name=\"title\"></slot>\n    </button>\n    <div class=\"dropdown-content\">\n      <slot name=\"item\"></slot>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {\n    // 不能为空\n  },\n});\n</script>\n\n  <style scoped>\n.dropbtn {\n  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),\n    -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);\n  background: #ecf0f3;\n  color: #5a84a2;\n  border-radius: 10px;\n  padding: 20px 30px;\n  font-size: 16px;\n  border: none;\n  cursor: pointer;\n}\n\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  border-radius: 10px;\n  cursor: pointer;\n  color: #5a84a2;\n  min-width: 130px;\n  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),\n    -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n\n.dropdown-content div {\n  border-radius: 10px;\n  color: #5a84a2;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n}\n\n.dropdown-content div:hover {\n  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),\n    inset -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1),\n    inset 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n\n.dropdown:hover .dropdown-content {\n  display: block;\n}\n\n.dropdown:hover .dropbtn {\n  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),\n    inset -5px -5px 16px rgba(255, 255, 255, 0.5),\n    inset 5px 5px 8px rgba(255, 255, 255, 0.1),\n    inset 5px 5px 12px rgba(0, 0, 0, 0.15);\n}\n</style>\n  \n```\n\n在父组件中可以这样引用\n\n```vue\n<!-- 按钮组件 -->\n<Neu_button> 按钮 </Neu_button>\n<!-- 下拉框组件 -->\n    <Neu_dropdown style=\"padding-left:50px\">\n      <template v-slot:title> 下拉框 </template>\n      <template v-slot:item>\n        <!-- 需要加样式 -->\n        <div>111</div>\n        <div>111</div>\n        <div>222</div>\n        <div>111</div>\n        <div>111</div>\n      </template>\n    </Neu_dropdown>\n\n```\n\n#### 拟态头像框\n\n```vue\n<div class=\"inner-shadow-ring item\"> </div>\n    <div class=\"inner-shadow-ring-2 item\"> </div>\n\n<style>\n.item {\n  position: relative;\n  width: 200px;\n  height: 200px;\n  margin-left: 80px;\n  margin-top: 80px;\n  background: #ecf0f3;\n}\n.inner-shadow-ring {\n  border-radius: 100%;\n  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;\n}\n\n.inner-shadow-ring:before {\n  content: \"\";\n  position: absolute;\n  left: 10%;\n  top: 10%;\n  width: 80%;\n  height: 80%;\n  border-radius: 100%;\n  background: #ecf0f3;\n  background-image:url(../../public/head.jpg);\n  background-position: 50% 50%;\n  background-size:100% 100%;\n  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;\n}\n.inner-shadow-ring-2 {\n  border-radius: 100%;\n  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;\n}\n\n.inner-shadow-ring-2:before {\n  content: \"\";\n  position: absolute;\n  left: 10%;\n  top: 10%;\n  width: 80%;\n  height: 80%;\n  border-radius: 100%;\n  background: #ecf0f3;\n  background-image:url(../../public/head.jpg);\n  background-position: 50% 50%;\n  background-size:100% 100%;\n  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px rgb(247, 247, 247);\n  /* box-shadow: inset 3px 3px 15px #d1d9e6, inset -3px -3px 15px #fff; */\n}\n</style>\n```\n\n","slug":"CSS3 手写新拟态vue3组件","published":1,"date":"2021-11-11T06:43:48.913Z","updated":"2021-12-31T02:25:59.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxtry9gx00002o8i3n3w4d74","content":"<h1 id=\"CS3手写新拟态vue3组件\"><a href=\"#CS3手写新拟态vue3组件\" class=\"headerlink\" title=\"CS3手写新拟态vue3组件\"></a>CS3手写新拟态vue3组件</h1><p><img  src=\"https://i.loli.net/2021/11/11/4HA9cp58T1NyFPl.png\"  ><span class=\"image-caption\">image-20210714163247179</span></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h4 id=\"按钮的拟态组件效果\"><a href=\"#按钮的拟态组件效果\" class=\"headerlink\" title=\"按钮的拟态组件效果\"></a>按钮的拟态组件效果</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>import &#123; defineComponent &#125; from &quot;vue&quot;;<br><br>export default defineComponent(&#123;<br>  setup() &#123;<br>    //不能为空<br>  &#125;,<br>&#125;);<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>button &#123;<br>  border: none;<br>  padding: 20px 40px;<br>  cursor: pointer;<br>  font-weight: 500;<br>  letter-spacing: 2px;<br>  color: #5a84a2;<br>  font-size: 18px;<br>  border-radius: 60px;<br>  background-color: #ecf0f3;<br>  box-shadow: -2px -2px 8px rgba(255, 255, 255, 1),<br>    -2px -2px 12px rgba(255, 255, 255, 0.5),<br>    inset 2px 2px 4px rgba(255, 255, 255, 0.1), 2px 2px 8px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>button:hover &#123;<br>  box-shadow: inset -2px -2px 8px rgba(255, 255, 255, 1),<br>    inset -2px -2px 12px rgba(255, 255, 255, 0.5),<br>    inset 2px 2px 4px rgba(255, 255, 255, 0.1),<br>    inset 2px 2px 8px rgba(0, 0, 0, 0.15);<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"下拉框拟态组件\"><a href=\"#下拉框拟态组件\" class=\"headerlink\" title=\"下拉框拟态组件\"></a>下拉框拟态组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;dropdown&quot;&gt;<br>    &lt;button class=&quot;dropbtn&quot;&gt;<br>      &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;<br>    &lt;/button&gt;<br>    &lt;div class=&quot;dropdown-content&quot;&gt;<br>      &lt;slot name=&quot;item&quot;&gt;&lt;/slot&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot;&gt;<br>import &#123; defineComponent &#125; from &quot;vue&quot;;<br><br>export default defineComponent(&#123;<br>  setup() &#123;<br>    // 不能为空<br>  &#125;,<br>&#125;);<br>&lt;/script&gt;<br><br>  &lt;style scoped&gt;<br>.dropbtn &#123;<br>  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),<br>    -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);<br>  background: #ecf0f3;<br>  color: #5a84a2;<br>  border-radius: 10px;<br>  padding: 20px 30px;<br>  font-size: 16px;<br>  border: none;<br>  cursor: pointer;<br>&#125;<br><br>.dropdown &#123;<br>  position: relative;<br>  display: inline-block;<br>&#125;<br><br>.dropdown-content &#123;<br>  display: none;<br>  position: absolute;<br>  border-radius: 10px;<br>  cursor: pointer;<br>  color: #5a84a2;<br>  min-width: 130px;<br>  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),<br>    -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>.dropdown-content div &#123;<br>  border-radius: 10px;<br>  color: #5a84a2;<br>  padding: 12px 16px;<br>  text-decoration: none;<br>  display: block;<br>&#125;<br><br>.dropdown-content div:hover &#123;<br>  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),<br>    inset -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1),<br>    inset 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>.dropdown:hover .dropdown-content &#123;<br>  display: block;<br>&#125;<br><br>.dropdown:hover .dropbtn &#123;<br>  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),<br>    inset -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1),<br>    inset 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br>&lt;/style&gt;<br>  <br></code></pre></td></tr></table></figure>\n\n<p>在父组件中可以这样引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!-- 按钮组件 --&gt;<br>&lt;Neu_button&gt; 按钮 &lt;/Neu_button&gt;<br>&lt;!-- 下拉框组件 --&gt;<br>    &lt;Neu_dropdown style=&quot;padding-left:50px&quot;&gt;<br>      &lt;template v-slot:title&gt; 下拉框 &lt;/template&gt;<br>      &lt;template v-slot:item&gt;<br>        &lt;!-- 需要加样式 --&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;222&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/Neu_dropdown&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"拟态头像框\"><a href=\"#拟态头像框\" class=\"headerlink\" title=\"拟态头像框\"></a>拟态头像框</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div class=&quot;inner-shadow-ring item&quot;&gt; &lt;/div&gt;<br>    &lt;div class=&quot;inner-shadow-ring-2 item&quot;&gt; &lt;/div&gt;<br><br>&lt;style&gt;<br>.item &#123;<br>  position: relative;<br>  width: 200px;<br>  height: 200px;<br>  margin-left: 80px;<br>  margin-top: 80px;<br>  background: #ecf0f3;<br>&#125;<br>.inner-shadow-ring &#123;<br>  border-radius: 100%;<br>  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;<br>&#125;<br><br>.inner-shadow-ring:before &#123;<br>  content: &quot;&quot;;<br>  position: absolute;<br>  left: 10%;<br>  top: 10%;<br>  width: 80%;<br>  height: 80%;<br>  border-radius: 100%;<br>  background: #ecf0f3;<br>  background-image:url(../../public/head.jpg);<br>  background-position: 50% 50%;<br>  background-size:100% 100%;<br>  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;<br>&#125;<br>.inner-shadow-ring-2 &#123;<br>  border-radius: 100%;<br>  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;<br>&#125;<br><br>.inner-shadow-ring-2:before &#123;<br>  content: &quot;&quot;;<br>  position: absolute;<br>  left: 10%;<br>  top: 10%;<br>  width: 80%;<br>  height: 80%;<br>  border-radius: 100%;<br>  background: #ecf0f3;<br>  background-image:url(../../public/head.jpg);<br>  background-position: 50% 50%;<br>  background-size:100% 100%;<br>  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px rgb(247, 247, 247);<br>  /* box-shadow: inset 3px 3px 15px #d1d9e6, inset -3px -3px 15px #fff; */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{"galleries":[{"name":"colorful","cover":"/images/theme/post.jpg","description":"君未看花时，花与君同寂；君来看花日，花色一时明。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"记事","cover":"/images/theme/post.jpg","description":"翻开随身携带的记事本，写着许多事都是关于你。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]},{"name":"济南日记","cover":"/images/theme/post.jpg","description":"斑马斑马，你不要睡着啦，我只是个匆忙的旅人啊。","photos":["/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg","/images/theme/post.jpg"]}],"local_images":["/images/theme/post-image/post (1).jpg","/images/theme/post-image/post (2).jpg","/images/theme/post-image/post (3).jpg","/images/theme/post-image/post (4).jpg","/images/theme/post-image/post (5).jpg","/images/theme/post-image/post (6).jpg","/images/theme/post-image/post (7).jpg","/images/theme/post-image/post (8).jpg","/images/theme/post-image/post (9).jpg","/images/theme/post-image/post (10).jpg","/images/theme/post-image/post (11).jpg","/images/theme/post-image/post (12).jpg","/images/theme/post-image/post (13).jpg","/images/theme/post-image/post (14).jpg","/images/theme/post-image/post (15).jpg","/images/theme/post-image/post (16).jpg","/images/theme/post-image/post (17).jpg","/images/theme/post-image/post (18).jpg","/images/theme/post-image/post (19).jpg","/images/theme/post-image/post (20).jpg","/images/theme/post-image/post (21).jpg","/images/theme/post-image/post (22).jpg"]}},"excerpt":"","more":"<h1 id=\"CS3手写新拟态vue3组件\"><a href=\"#CS3手写新拟态vue3组件\" class=\"headerlink\" title=\"CS3手写新拟态vue3组件\"></a>CS3手写新拟态vue3组件</h1><p><img  src=\"https://i.loli.net/2021/11/11/4HA9cp58T1NyFPl.png\"  ><span class=\"image-caption\">image-20210714163247179</span></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h4 id=\"按钮的拟态组件效果\"><a href=\"#按钮的拟态组件效果\" class=\"headerlink\" title=\"按钮的拟态组件效果\"></a>按钮的拟态组件效果</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>import &#123; defineComponent &#125; from &quot;vue&quot;;<br><br>export default defineComponent(&#123;<br>  setup() &#123;<br>    //不能为空<br>  &#125;,<br>&#125;);<br>&lt;/script&gt;<br><br><br>&lt;style scoped&gt;<br>button &#123;<br>  border: none;<br>  padding: 20px 40px;<br>  cursor: pointer;<br>  font-weight: 500;<br>  letter-spacing: 2px;<br>  color: #5a84a2;<br>  font-size: 18px;<br>  border-radius: 60px;<br>  background-color: #ecf0f3;<br>  box-shadow: -2px -2px 8px rgba(255, 255, 255, 1),<br>    -2px -2px 12px rgba(255, 255, 255, 0.5),<br>    inset 2px 2px 4px rgba(255, 255, 255, 0.1), 2px 2px 8px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>button:hover &#123;<br>  box-shadow: inset -2px -2px 8px rgba(255, 255, 255, 1),<br>    inset -2px -2px 12px rgba(255, 255, 255, 0.5),<br>    inset 2px 2px 4px rgba(255, 255, 255, 0.1),<br>    inset 2px 2px 8px rgba(0, 0, 0, 0.15);<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"下拉框拟态组件\"><a href=\"#下拉框拟态组件\" class=\"headerlink\" title=\"下拉框拟态组件\"></a>下拉框拟态组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;div class=&quot;dropdown&quot;&gt;<br>    &lt;button class=&quot;dropbtn&quot;&gt;<br>      &lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;<br>    &lt;/button&gt;<br>    &lt;div class=&quot;dropdown-content&quot;&gt;<br>      &lt;slot name=&quot;item&quot;&gt;&lt;/slot&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot;&gt;<br>import &#123; defineComponent &#125; from &quot;vue&quot;;<br><br>export default defineComponent(&#123;<br>  setup() &#123;<br>    // 不能为空<br>  &#125;,<br>&#125;);<br>&lt;/script&gt;<br><br>  &lt;style scoped&gt;<br>.dropbtn &#123;<br>  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),<br>    -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);<br>  background: #ecf0f3;<br>  color: #5a84a2;<br>  border-radius: 10px;<br>  padding: 20px 30px;<br>  font-size: 16px;<br>  border: none;<br>  cursor: pointer;<br>&#125;<br><br>.dropdown &#123;<br>  position: relative;<br>  display: inline-block;<br>&#125;<br><br>.dropdown-content &#123;<br>  display: none;<br>  position: absolute;<br>  border-radius: 10px;<br>  cursor: pointer;<br>  color: #5a84a2;<br>  min-width: 130px;<br>  box-shadow: -5px -5px 12px rgba(255, 255, 255, 1),<br>    -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1), 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>.dropdown-content div &#123;<br>  border-radius: 10px;<br>  color: #5a84a2;<br>  padding: 12px 16px;<br>  text-decoration: none;<br>  display: block;<br>&#125;<br><br>.dropdown-content div:hover &#123;<br>  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),<br>    inset -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1),<br>    inset 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br><br>.dropdown:hover .dropdown-content &#123;<br>  display: block;<br>&#125;<br><br>.dropdown:hover .dropbtn &#123;<br>  box-shadow: inset -5px -5px 12px rgba(255, 255, 255, 1),<br>    inset -5px -5px 16px rgba(255, 255, 255, 0.5),<br>    inset 5px 5px 8px rgba(255, 255, 255, 0.1),<br>    inset 5px 5px 12px rgba(0, 0, 0, 0.15);<br>&#125;<br>&lt;/style&gt;<br>  <br></code></pre></td></tr></table></figure>\n\n<p>在父组件中可以这样引用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;!-- 按钮组件 --&gt;<br>&lt;Neu_button&gt; 按钮 &lt;/Neu_button&gt;<br>&lt;!-- 下拉框组件 --&gt;<br>    &lt;Neu_dropdown style=&quot;padding-left:50px&quot;&gt;<br>      &lt;template v-slot:title&gt; 下拉框 &lt;/template&gt;<br>      &lt;template v-slot:item&gt;<br>        &lt;!-- 需要加样式 --&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;222&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>        &lt;div&gt;111&lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/Neu_dropdown&gt;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"拟态头像框\"><a href=\"#拟态头像框\" class=\"headerlink\" title=\"拟态头像框\"></a>拟态头像框</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;div class=&quot;inner-shadow-ring item&quot;&gt; &lt;/div&gt;<br>    &lt;div class=&quot;inner-shadow-ring-2 item&quot;&gt; &lt;/div&gt;<br><br>&lt;style&gt;<br>.item &#123;<br>  position: relative;<br>  width: 200px;<br>  height: 200px;<br>  margin-left: 80px;<br>  margin-top: 80px;<br>  background: #ecf0f3;<br>&#125;<br>.inner-shadow-ring &#123;<br>  border-radius: 100%;<br>  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;<br>&#125;<br><br>.inner-shadow-ring:before &#123;<br>  content: &quot;&quot;;<br>  position: absolute;<br>  left: 10%;<br>  top: 10%;<br>  width: 80%;<br>  height: 80%;<br>  border-radius: 100%;<br>  background: #ecf0f3;<br>  background-image:url(../../public/head.jpg);<br>  background-position: 50% 50%;<br>  background-size:100% 100%;<br>  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;<br>&#125;<br>.inner-shadow-ring-2 &#123;<br>  border-radius: 100%;<br>  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;<br>&#125;<br><br>.inner-shadow-ring-2:before &#123;<br>  content: &quot;&quot;;<br>  position: absolute;<br>  left: 10%;<br>  top: 10%;<br>  width: 80%;<br>  height: 80%;<br>  border-radius: 100%;<br>  background: #ecf0f3;<br>  background-image:url(../../public/head.jpg);<br>  background-position: 50% 50%;<br>  background-size:100% 100%;<br>  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px rgb(247, 247, 247);<br>  /* box-shadow: inset 3px 3px 15px #d1d9e6, inset -3px -3px 15px #fff; */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckw02q18e00031g8i4a489zb6","category_id":"ckw02q18g00061g8id3hkeagt","_id":"ckw02q18m000e1g8i9cl335k3"},{"post_id":"ckw02q18e00031g8i4a489zb6","category_id":"ckw02q18l000d1g8i3vr68gcm","_id":"ckw02q18m000f1g8i0s9o1df3"},{"post_id":"ckxtrc6yt0000ow8ic6xf68bl","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc6zx0009ow8i9a4a41nv"},{"post_id":"ckxtrc6zs0004ow8i3m17hk1u","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc700000bow8iey0b5f7s"},{"post_id":"ckxtrc6zg0001ow8icbhk6b4c","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc701000dow8iebpb6w7w"},{"post_id":"ckxtrc6zw0007ow8i36j02mwy","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc702000eow8i3nib96a0"},{"post_id":"ckxtrc6zz000aow8ib0rf1brg","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc702000fow8ic7ykb0pi"},{"post_id":"ckxtrc6zp0003ow8i0d20d1u3","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc703000gow8iac4abajy"},{"post_id":"ckxtrc6zv0006ow8i2esq1npp","category_id":"ckxtrc6zj0002ow8i3x0o53es","_id":"ckxtrc703000how8i5pk3g62o"},{"post_id":"ckxtrc6zv0006ow8i2esq1npp","category_id":"ckxtrc701000cow8i9sxvgqlv","_id":"ckxtrc703000iow8ihw9i2p8j"},{"post_id":"ckw2tlnf100001w8i0fl0dqo2","category_id":"ckxtrpxr80001mc8ibuot3imb","_id":"ckxtrpxrg0004mc8i809ecral"},{"post_id":"ckxtrpxr60000mc8i63yfhvj6","category_id":"ckxtrpxrg0003mc8if0ima54h","_id":"ckxtrpxrh0006mc8i3xfx8aic"},{"post_id":"ckxtrpxre0002mc8iep5efssy","category_id":"ckxtrpxrh0005mc8ihr4q56aa","_id":"ckxtrpxri0007mc8i8t9xgna6"},{"post_id":"ckxtrpxsl0008mc8ic30nctav","category_id":"ckxtrpxsm0009mc8id6w35z9h","_id":"ckxtrpxsm000amc8ignqv24tw"}],"PostTag":[],"Tag":[]}}